{
  "openapi": "3.0.0",
  "info": {
    "title": "Secret Server Rest API",
    "description": "REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "termsOfService": "https://thycotic.com/company/eula/",
    "contact": {
      "name": "Support",
      "url": "https://thycotic.com"
    },
    "version": "11.2.2"
  },
  "paths": {
    "/v1/activations": {
      "post": {
        "tags": [
          "Activations"
        ],
        "summary": "Perform an online activation of Secret Server",
        "description": "Perform an online activation of Secret Server",
        "operationId": "ActivationsService_Activate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnlineActivationArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Activation result",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/active-directory/synchronize": {
      "post": {
        "tags": [
          "ActiveDirectory"
        ],
        "summary": "Synchronize Active Directory Groups and Users",
        "description": "Synchronize Members from Active Directory Groups that have Sync enabled",
        "operationId": "ActiveDirectoryService_Synchronize",
        "responses": {
          "200": {
            "description": "Bool",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/-token/generate-token": {
      "get": {
        "tags": [
          "ApiToken"
        ],
        "summary": "Generate API Token",
        "description": "Generate API Token",
        "operationId": "ApiTokenService_GetToken",
        "responses": {
          "200": {
            "description": "Generated API Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTokenViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/app-clients/{id}": {
      "get": {
        "tags": [
          "AppClients"
        ],
        "summary": "Get App Client",
        "description": "Get a single app client by ID",
        "operationId": "AppClientsService_GetClient",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive app clients",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "App client ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "App client object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AppClients"
        ],
        "summary": "Update App Client",
        "description": "Update a single app client by ID",
        "operationId": "AppClientsService_UpdateClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App client ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppClientUpdateArgs"
              }
            }
          },
          "description": "App client update options"
        },
        "responses": {
          "200": {
            "description": "App client object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AppClients"
        ],
        "summary": "Delete App Client",
        "description": "Delete an app client by ID",
        "operationId": "AppClientsService_DeleteClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "App client ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/app-clients/stub": {
      "get": {
        "tags": [
          "AppClients"
        ],
        "summary": "Get App Client Stub",
        "description": "Return the default values for a new app client",
        "operationId": "AppClientsService_Stub",
        "responses": {
          "200": {
            "description": "App client object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/app-clients": {
      "post": {
        "tags": [
          "AppClients"
        ],
        "summary": "Create App Client",
        "description": "Create a new app client",
        "operationId": "AppClientsService_CreateClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppClientCreateArgs"
              }
            }
          },
          "description": "App client creation options"
        },
        "responses": {
          "200": {
            "description": "App client object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppClientModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/application-accounts/lookup": {
      "get": {
        "tags": [
          "ApplicationAccounts"
        ],
        "summary": "Lookup Application Accounts",
        "description": "Search, filter, sort, and page application accounts, returning only user id and display",
        "operationId": "ApplicationAccountsService_LookupAccount",
        "parameters": [
          {
            "name": "filter.includeAll",
            "in": "query",
            "description": "IncludeAll",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include inactive application accounts in the results. Inactive application accounts are included by default.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserLookup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/application-access-requests": {
      "get": {
        "tags": [
          "ApplicationRequest"
        ],
        "summary": "Get Application Access Requests by Status for Current User.",
        "description": "Get Application Access Requests by Status for Current User.",
        "operationId": "ApplicationRequestService_SearchRequestsByStatus",
        "parameters": [
          {
            "name": "filter.status",
            "in": "query",
            "description": "Status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfApplicationAccessRequestViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/application-access-request/{deviceId}": {
      "get": {
        "tags": [
          "ApplicationRequest"
        ],
        "summary": "Get Application Access Requests by Device Id.",
        "description": "Get Application Access Requests by Device Id.",
        "operationId": "ApplicationRequestService_GetRequestByDeviceId",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "deviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationAccessRequestViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "ApplicationRequest"
        ],
        "summary": "Update Application Access Requests by Device Id.",
        "description": "Update Application Access Requests by Device Id.",
        "operationId": "ApplicationRequestService_UpdateRequest",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "deviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationAccessRequestUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationAccessRequestViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/application-access-request-audits": {
      "get": {
        "tags": [
          "ApplicationRequest"
        ],
        "summary": "Get Application Access Request Audits by Device Id.",
        "description": "Get Application Access Request Audits by Device Id.",
        "operationId": "ApplicationRequestService_GetAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.deviceId",
            "in": "query",
            "description": "DeviceId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application Access Request Audit View Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfApplicationAccessRequestAuditViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-operations/{id}/progress": {
      "get": {
        "tags": [
          "BulkOperations"
        ],
        "summary": "Progress",
        "description": "Get the progress of a bulk operation by id.",
        "operationId": "BulkOperationsService_GetProgress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of Bulk operation to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "BulkOperationProgressModel object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationProgressModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/add-share": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Add share",
        "description": "Add share to each Secret with supplied Permissions.",
        "operationId": "BulkSecretOperationsService_AddSharePermissionsToSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSharePermissionArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/assign-site": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Assign site",
        "description": "Assign each Secret to the supplied site.",
        "operationId": "BulkSecretOperationsService_AssignSecretsToSite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignSecretsToSiteArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/assign-jumpbox-route": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Assign Jumpbox Route",
        "description": "Assign each Secret to the supplied Jumpbox route.",
        "operationId": "BulkSecretOperationsService_AssignSecretsToJumpboxRoute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignSecretsToJumpboxRouteArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/assign-secret-policy": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Assign Secret Policy",
        "description": "Assign each Secret to the supplied Secret Policy.",
        "operationId": "BulkSecretOperationsService_AssignSecretsToSecretPolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignSecretsToSecretPolicyArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/change-password-remotely": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Change Password Remotely",
        "description": "Change the password remotely of each Secret.",
        "operationId": "BulkSecretOperationsService_ChangeSecretsPasswordsRemotely",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSecretsPasswordsRemotelyArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/convert-type": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Convert Type",
        "description": "Convert each Secret to the supplied type.",
        "operationId": "BulkSecretOperationsService_ConvertSecretsToSecretType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertSecretsSecretTypeArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/deactivate": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Deactivate",
        "description": "Deactivate each Secret.",
        "operationId": "BulkSecretOperationsService_DeactivateSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/disable-autochange": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Disable AutoChange",
        "description": "Disable AutoChange for each Secret.",
        "operationId": "BulkSecretOperationsService_DisableAutoChangeSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableAutoChangeSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/disable-checkout": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Disable Checkout",
        "description": "Disable Checkout for each Secret.",
        "operationId": "BulkSecretOperationsService_DisableCheckoutSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableCheckoutSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/disable-heartbeat": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Disable Heartbeat",
        "description": "Disable Heartbeat for each Secret.",
        "operationId": "BulkSecretOperationsService_DisableHeartbeatSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableHeartbeatSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/disable-require-view-comment": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Disable Require View Comment",
        "description": "Disable Require View Comment for each Secret.",
        "operationId": "BulkSecretOperationsService_DisableRequireViewCommentSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableRequireViewCommentSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/enable-autochange": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Enable AutoChange",
        "description": "Enable AutoChange for each Secret.",
        "operationId": "BulkSecretOperationsService_EnableAutoChangeSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableAutoChangeSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/enable-checkout": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Enable Checkout",
        "description": "Enable Checkout for each Secret.",
        "operationId": "BulkSecretOperationsService_EnableCheckoutSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableCheckoutSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/request-erase": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Request Erase",
        "description": "Request Erase for each Secret.",
        "operationId": "BulkSecretOperationsService_RequestEraseSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestEraseSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/change-security-options": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Change Security Options",
        "description": "Change Security Options for each Secret.",
        "operationId": "BulkSecretOperationsService_ChangeSecurityOptionsSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSecurityOptionsSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/enable-require-view-comment": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Enable Require View Comment",
        "description": "Enable Require View Comment for each Secret.",
        "operationId": "BulkSecretOperationsService_EnableRequireViewCommentSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableRequireViewCommentSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/enable-heartbeat": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Enable Heartbeat",
        "description": "Enable Heartbeat for each Secret.",
        "operationId": "BulkSecretOperationsService_EnableHeartbeatSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableHeartbeatSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/edit-share": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Edit Share",
        "description": "Edit each Secret and apply the supplied share Permissions.",
        "operationId": "BulkSecretOperationsService_EditSharePermissionsSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditSharePermissionsSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/enable-hide-launcher-password": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Enable Hide Launcher Password",
        "description": "Enable Hide Launcher Password for each Secret.",
        "operationId": "BulkSecretOperationsService_EnableHideLauncherPasswordSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableHideLauncherPasswordSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/enable-inherit-permissions": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Enable Inherit Permissions",
        "description": "Enable Inherit Permissions for each Secret.",
        "operationId": "BulkSecretOperationsService_EnableInheritPermissionsSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableInheritPermissionsSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/move-to-folder": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Move To Folder",
        "description": "Move selected Secrets to a specified Folder.",
        "operationId": "BulkSecretOperationsService_MoveSecretsToFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveSecretsToFolderArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/run-heartbeat": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Run Heartbeat",
        "description": "Run Heartbeat for selected Secrets.",
        "operationId": "BulkSecretOperationsService_RunHeartbeatForSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunHeartbeatForSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/set-privileged-account": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Set Privileged Account",
        "description": "Set a Privileged Account for selected Secrets.",
        "operationId": "BulkSecretOperationsService_SetPrivilegedAccountForSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetPrivilegedAccountForSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/update-associated-secrets": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Update Associated Secrets",
        "description": "Associate each Secret in a list with every Secret in a second list.",
        "operationId": "BulkSecretOperationsService_UpdateAssociatedSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssociatedSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/set-dependencies-password": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Set Dependencies Password",
        "description": "Set Password dependencies for each Secret.",
        "operationId": "BulkSecretOperationsService_SetDependenciesPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDependencyPasswordArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/enable-dependencies": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Enable Dependencies",
        "description": "Enable Dependencies for each Secret.",
        "operationId": "BulkSecretOperationsService_EnableDependencies",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableDependenciesArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/delete-dependencies": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Delete Dependencies",
        "description": "Delete Dependencies for each Secret.",
        "operationId": "BulkSecretOperationsService_DeleteDependencies",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDependenciesArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/disable-dependencies": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Disable Dependencies",
        "description": "Disable Dependencies for each Secret.",
        "operationId": "BulkSecretOperationsService_DisableDependencies",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableDependenciesArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/activate": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Activate",
        "description": "Activate each Secret.",
        "operationId": "BulkSecretOperationsService_ActivateSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-secret-operations/disable-hide-launcher-password": {
      "post": {
        "tags": [
          "BulkSecretOperations"
        ],
        "summary": "Disable Hide Launcher Password",
        "description": "Disable Hide Launcher Password for each Secret.",
        "operationId": "BulkSecretOperationsService_DisableHideLauncherPasswordForSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableHideLauncherPasswordForSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/enable": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Enable",
        "description": "Enable each User.",
        "operationId": "BulkUserOperationsService_EnableUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/disable": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Disable",
        "description": "Disable each User.",
        "operationId": "BulkUserOperationsService_DisableUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/enable-email-two-factor": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Enable Email Two Factor",
        "description": "Enable Email two factor for each User.",
        "operationId": "BulkUserOperationsService_EnableEmailTwoFactorForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableEmailTwoFactorForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/disable-email-two-factor": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Disable Email Two Factor",
        "description": "Disable Email two factor for each User.",
        "operationId": "BulkUserOperationsService_DisableEmailTwoFactorForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableEmailTwoFactorForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/enable-radius-two-factor": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Enable Radius Two Factor",
        "description": "Enable Radius two factor for each User.",
        "operationId": "BulkUserOperationsService_EnableRadiusTwoFactorForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableRadiusTwoFactorForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/disable-radius-two-factor": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Disable Radius Two Factor",
        "description": "Disable Radius two factor for each User.",
        "operationId": "BulkUserOperationsService_DisableRadiusTwoFactorForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableRadiusTwoFactorForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/enable-totp-auth": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Enable TOTP Auth",
        "description": "Enable TOTP Auth for each User.",
        "operationId": "BulkUserOperationsService_EnableTOTPAuthForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableTOTPAuthForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/disable-totp-auth": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Disable TOTP Auth",
        "description": "Disable TOTP Auth for each User.",
        "operationId": "BulkUserOperationsService_DisableTOTPAuthForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableTOTPAuthForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/reset-totp-auth": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Reset TOTP Auth",
        "description": "Reset TOTP Auth for each User.",
        "operationId": "BulkUserOperationsService_ResetTOTPAuthForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetTOTPAuthForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/enable-duo-auth": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Enable Duo Auth",
        "description": "Enable Duo Auth for each User.",
        "operationId": "BulkUserOperationsService_EnableDuoAuthForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableDuoAuthForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/disable-duo-auth": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Disable Duo Auth",
        "description": "Disable Duo Auth for each User.",
        "operationId": "BulkUserOperationsService_DisableDuoAuthForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableDuoAuthForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/enable-fido2-two-factor": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Enable Fido2 Two Factor",
        "description": "Enable Fido2 two factor for each User.",
        "operationId": "BulkUserOperationsService_EnableFido2TwoFactorForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableFido2TwoFactorForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/disable-fido2-two-factor": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Disable Fido2 Two Factor",
        "description": "Disable Fido2 two factor for each User.",
        "operationId": "BulkUserOperationsService_DisableFido2TwoFactorForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFido2TwoFactorForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/reset-fido2-two-factor": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Reset Fido2 Two Factor",
        "description": "Reset Fido2 two factor for each User.",
        "operationId": "BulkUserOperationsService_ResetFido2TwoFactorForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetFido2TwoFactorForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/force-logout": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Force Logout",
        "description": "Force Logout for each User.",
        "operationId": "BulkUserOperationsService_ForceLogoutForUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForceLogoutForUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/lock": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Lock",
        "description": "Lock selected Users.",
        "operationId": "BulkUserOperationsService_LockUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/unlock": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Unlock",
        "description": "Unlock selected Users.",
        "operationId": "BulkUserOperationsService_UnlockUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockUsersArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/add-to-group": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Add To Group",
        "description": "Add selected Users to the specified Group.",
        "operationId": "BulkUserOperationsService_AddUsersToGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUsersToGroupArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/remove-from-group": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Remove From Group",
        "description": "Remove selected Users from the specified Group.",
        "operationId": "BulkUserOperationsService_RemoveUsersFromGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUsersFromGroupArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/add-to-team": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Add To Team",
        "description": "Add selected Users to the specified Team.",
        "operationId": "BulkUserOperationsService_AddUsersToTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUsersToTeamArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/bulk-user-operations/remove-from-team": {
      "post": {
        "tags": [
          "BulkUserOperations"
        ],
        "summary": "Remove From Team",
        "description": "Remove selected Users from the specified Team.",
        "operationId": "BulkUserOperationsService_RemoveUsersFromTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveUsersFromTeamArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "BulkOperationResponseMessage containing the Id of the created Bulk Operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkOperationResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{categorizedListId}": {
      "get": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Get a list",
        "description": "Returns the list for the provided ID",
        "operationId": "CategorizedListsService_GetList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list with provided ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorizedListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Update a list",
        "description": "Updates a given list",
        "operationId": "CategorizedListsService_UpdateList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategorizedListUpdateArgs"
              }
            }
          },
          "description": "List to be updated"
        },
        "responses": {
          "200": {
            "description": "The updated list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorizedListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Delete List",
        "description": "Delete a List by ID",
        "operationId": "CategorizedListsService_DeleteList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "ID of list to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorizedListDeleteModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{categorizedListId}/options": {
      "get": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Get a list's items",
        "description": "Returns the list's options for the provided ID",
        "operationId": "CategorizedListsService_GetListItems",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filter.category",
            "in": "query",
            "description": "Category text to filter by. If empty or not included, will return items for all categories.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.nullCategoryIsUncategorized",
            "in": "query",
            "description": "If true and Category value is an empty string or not included, will return only uncategorized items; otherwise, an empty category filter is treated as no category filter.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list's options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListItemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Updates options in a list",
        "description": "Updates the options in the list with the provided ID",
        "operationId": "CategorizedListsService_UpdateItemsInList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategorizedListItemUpdateArgs"
              }
            }
          },
          "description": "List options to be updated"
        },
        "responses": {
          "200": {
            "description": "The updated options in the list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListItemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Adds options to a list",
        "description": "Adds the options to the list with the provided ID",
        "operationId": "CategorizedListsService_AddItemsToList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CategorizedListItemCreateArgs"
        },
        "responses": {
          "200": {
            "description": "The new options in the list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListItemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Delete all list options from a list",
        "description": "Delete all list options from a list",
        "operationId": "CategorizedListsService_RemoveItemsFromList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorizedListDeleteModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{listId}/options/{optionId}": {
      "delete": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Delete a list option from a list",
        "description": "Delete a list option from a list",
        "operationId": "CategorizedListsService_RemoveItemFromList",
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "List id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "optionId",
            "in": "path",
            "description": "List option id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List option deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorizedListItemDeleteModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists": {
      "get": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Search Lists",
        "description": "Search, filter, sort, and page lists",
        "operationId": "CategorizedListsService_Search",
        "parameters": [
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "Whether to include active lists in results (when excluded equals true)",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive lists in results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Create a list",
        "description": "Creates the given list",
        "operationId": "CategorizedListsService_CreateList",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategorizedListCreateArgs"
              }
            }
          },
          "description": "List be added"
        },
        "responses": {
          "200": {
            "description": "The new list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorizedListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/summary": {
      "get": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Get a list of lists available to current user",
        "description": "Returns a list of lists for the current user",
        "operationId": "CategorizedListsService_GetAllListsUserMaySee",
        "responses": {
          "200": {
            "description": "A list of lists for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSimpleCategorizedList"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{categorizedListId}/categories": {
      "get": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Get a list's current categories",
        "description": "Returns the list's categories for the provided ID",
        "operationId": "CategorizedListsService_GetCategoriesForList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list's categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfString"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{categorizedListId}/audits": {
      "get": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Get Audits for List",
        "description": "Search, filter, sort, and page List Audits.",
        "operationId": "CategorizedListsService_SearchListAudit",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of Audits for List.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListAuditModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{categorizedListId}/options/single": {
      "put": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Updates an option in a list",
        "description": "Updates an option in the list with the provided ID",
        "operationId": "CategorizedListsService_UpdateItemInList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategorizedListItemSingleUpdateArgs"
              }
            }
          },
          "description": "List option to be updated"
        },
        "responses": {
          "200": {
            "description": "The updated options in the list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListItemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Adds an option to a list",
        "description": "Adds an option to the list with the provided ID",
        "operationId": "CategorizedListsService_AddItemToList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategorizedListItemSingleCreateArgs"
              }
            }
          },
          "description": "List option to be added"
        },
        "responses": {
          "200": {
            "description": "The new option in the list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListItemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{categorizedListId}/options/{category}": {
      "post": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Adds options to the list with the specified category",
        "description": "Adds the options to the list with the provided ID with the specified category",
        "operationId": "CategorizedListsService_AddItemsToListWithCategory",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "category",
            "in": "path",
            "description": "Category to assign",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CategorizedListItemCreateArgs"
        },
        "responses": {
          "200": {
            "description": "The new options in the list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListItemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{categorizedListId}/options/file": {
      "post": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Upload a file of list options",
        "description": "Adds the options from the given file to the list with the provided ID",
        "operationId": "CategorizedListsService_AddItemsToListFromFile",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategorizedListItemCreateWithFileArgs"
              }
            }
          },
          "description": "File containing list options to add"
        },
        "responses": {
          "200": {
            "description": "The new options in the list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListItemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/lists/{categorizedListId}/options/replace": {
      "put": {
        "tags": [
          "CategorizedLists"
        ],
        "summary": "Replaces options in a list",
        "description": "Replaces all options currently in the list with the given options",
        "operationId": "CategorizedListsService_ReplaceItemsInList",
        "parameters": [
          {
            "name": "categorizedListId",
            "in": "path",
            "description": "List ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CategorizedListItemCreateArgs"
        },
        "responses": {
          "200": {
            "description": "The new item in the list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListItemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/character-sets": {
      "get": {
        "tags": [
          "CharacterSets"
        ],
        "summary": "Search Character Sets",
        "description": "Search, filter, sort, and page character sets",
        "operationId": "CharacterSetsService_SearchCharacterSets",
        "parameters": [
          {
            "name": "filter.status",
            "in": "query",
            "description": "Status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Character Set Collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCharacterSetSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "CharacterSets"
        ],
        "summary": "Create Character Set",
        "description": "Create character set",
        "operationId": "CharacterSetsService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterSetCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Character Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSetModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/character-sets/{id}": {
      "get": {
        "tags": [
          "CharacterSets"
        ],
        "summary": "Get Character Set",
        "description": "Get character set",
        "operationId": "CharacterSetsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Character Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSetModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "CharacterSets"
        ],
        "summary": "Patch Character Set",
        "description": "Patch character set",
        "operationId": "CharacterSetsService_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CharacterSetPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Character Set",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterSetModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/character-sets/{id}/audit": {
      "get": {
        "tags": [
          "CharacterSets"
        ],
        "summary": "Characterset Audits",
        "description": "Get all of the audits for a character set",
        "operationId": "CharacterSetsService_GetSiteAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCharacterSetAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/saml/identity-provider/{id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Saml Identity Provider configuration",
        "description": "Get Saml Identity Provider Configuration",
        "operationId": "ConfigurationService_GetSamlIdentityProviderConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Saml Identity Provider Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saml Identity Provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Delete Saml Configuration Identity Provider",
        "description": "Delete Saml Configuration Identity Provider",
        "operationId": "ConfigurationService_DeleteSamlConfigurationIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderDeleteResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/state": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "The allowed permissions for configuration for the current user",
        "description": "The allowed permissions for configuration for the current user",
        "operationId": "ConfigurationService_GetConfigurationState",
        "responses": {
          "200": {
            "description": "The allowed configuration for the current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationStateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/audit": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Audit of system configuration changes",
        "description": "Audit of system configuration changes",
        "operationId": "ConfigurationService_GetConfigurationAudit",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration audit items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfConfigurationAuditItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/configuration/general": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the general configuration",
        "description": "Get configuration",
        "operationId": "ConfigurationService_GetGeneralConfigurationV2",
        "parameters": [
          {
            "name": "loadAll",
            "in": "query",
            "description": "Load all configuration sections",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadApplicationSettings",
            "in": "query",
            "description": "Load application settings section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadEmail",
            "in": "query",
            "description": "Load email section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadFolders",
            "in": "query",
            "description": "Load folder configuration section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadLauncherSettings",
            "in": "query",
            "description": "Load launcher settings section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadLocalUserPasswords",
            "in": "query",
            "description": "Load local user passwords section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadLogin",
            "in": "query",
            "description": "Load log in section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadPermissionOptions",
            "in": "query",
            "description": "Load permission options configuration section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadProtocolHandlerSettings",
            "in": "query",
            "description": "Load security protocol hander section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadSecurity",
            "in": "query",
            "description": "Load security section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadSessionRecording",
            "in": "query",
            "description": "Load the session recording section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadUnlimitedAdmin",
            "in": "query",
            "description": "Load unlimited admin section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadUserExperience",
            "in": "query",
            "description": "Load user experience configuration section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadUserInterface",
            "in": "query",
            "description": "Load user interface section",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationGeneralV2Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/local-user-passwords": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the local user password configuration",
        "description": "Get the local user password configuration.  Password requirements only require an authenticated user.  Extended fields will be null unless you have the View / Administer Configuration role permission.",
        "operationId": "ConfigurationService_GetLocalPasswordConfiguration",
        "responses": {
          "200": {
            "description": "Local User Password Configuration Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationLocalUserPasswordsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the local user password configuration",
        "description": "Update the local user password configuration",
        "operationId": "ConfigurationService_PatchLocalPasswordConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationLocalPasswordPatchArgs"
              }
            }
          },
          "description": "Local user password update args"
        },
        "responses": {
          "200": {
            "description": "Local User Password Configuration Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationLocalUserPasswordsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/security": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Security configuration",
        "description": "Get Security Configuration",
        "operationId": "ConfigurationService_GetSecurityConfiguration",
        "responses": {
          "200": {
            "description": "Security Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSecurityModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Security configuration",
        "description": "Update Security Configuration",
        "operationId": "ConfigurationService_PatchSecurityConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationSecurityPatchArgs"
              }
            }
          },
          "description": "Security update args"
        },
        "responses": {
          "200": {
            "description": "Security configuration after updates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSecurityModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/configuration/login": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Login configuration",
        "description": "Get Login Configuration",
        "operationId": "ConfigurationService_GetLoginConfigurationV2",
        "responses": {
          "200": {
            "description": "Login Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationLoginV2Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Login configuration",
        "description": "Update Login Configuration",
        "operationId": "ConfigurationService_PatchLoginConfigurationV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationLoginV2PatchArgs"
              }
            }
          },
          "description": "Login update args"
        },
        "responses": {
          "200": {
            "description": "Login configuration after updates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationLoginV2Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/login-policy": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Login Policy configuration",
        "description": "Get Login Policy Configuration",
        "operationId": "ConfigurationService_GetLoginPolicyConfiguration",
        "responses": {
          "200": {
            "description": "Login Policy Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationLoginPolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Login Policy configuration",
        "description": "Update Login Policy Configuration",
        "operationId": "ConfigurationService_PatchLoginPolicyConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationLoginPolicyPatchArgs"
              }
            }
          },
          "description": "Login Policy update args"
        },
        "responses": {
          "200": {
            "description": "Login Policy configuration after updates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationLoginPolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/saml": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Saml configuration",
        "description": "Get Saml Configuration",
        "operationId": "ConfigurationService_GetSamlConfiguration",
        "responses": {
          "200": {
            "description": "Saml Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSamlModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Saml configuration",
        "description": "Update Saml Configuration",
        "operationId": "ConfigurationService_PatchSamlConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationSamlPatchArgs"
              }
            }
          },
          "description": "Saml update args"
        },
        "responses": {
          "200": {
            "description": "Saml configuration after updates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSamlModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/saml/identity-provider/stub": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Saml Identity Provider configuration stub",
        "description": "Get Saml Identity Provider Configuration stub",
        "operationId": "ConfigurationService_GetSamlIdentityProviderConfigurationStub",
        "responses": {
          "200": {
            "description": "Saml Identity Provider configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/rpc": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get RPC configuration",
        "description": "Get Remote Password Configuration",
        "operationId": "ConfigurationService_GetRpcConfiguration",
        "responses": {
          "200": {
            "description": "RPC Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRpcModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update RPC configuration",
        "description": "Update Remote Password Configuration",
        "operationId": "ConfigurationService_PatchRpcConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationRpcPatchArgs"
              }
            }
          },
          "description": "Local user password update args"
        },
        "responses": {
          "200": {
            "description": "RPC configuration after updates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRpcModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/sessionrecording-advanced": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Session Recording Advanced",
        "description": "Get Session Recording Advanced Configuration",
        "operationId": "ConfigurationService_GetSessionRecordingAdvancedConfiguration",
        "responses": {
          "200": {
            "description": "Session Recording Advanced Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSessionRecordingAdvancedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Session Recording Advanced",
        "description": "Update Session Recording Advanced Configuration",
        "operationId": "ConfigurationService_PatchSessionRecordingAdvancedConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationSessionRecordingAdvancedPatchArgs"
              }
            }
          },
          "description": "Session recording advanced update args"
        },
        "responses": {
          "200": {
            "description": "Session Recording Advanced Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSessionRecordingAdvancedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/site-connector": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Site Connectors",
        "description": "Site Connectors",
        "operationId": "ConfigurationService_GetSiteConnectors",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connectors",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Site Connectors",
                  "items": {
                    "$ref": "#/components/schemas/SiteConnectorsSummaryModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/internal-site-connector": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Internal Site Connector Configuration",
        "description": "Internal Site Connector Configuration",
        "operationId": "ConfigurationService_GetInternalSiteConfiguration",
        "responses": {
          "200": {
            "description": "Internal Site Connector Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInternalSiteConnectorModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Internal Site Connector",
        "description": "Update Internal Site Connector",
        "operationId": "ConfigurationService_PatchInternalSiteConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationInternalSiteConnectorPatchArgs"
              }
            }
          },
          "description": "Internal Site Connector Update Options"
        },
        "responses": {
          "200": {
            "description": "Internal Site Connector Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationInternalSiteConnectorModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/unlimited-admin": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Unlimited Admin",
        "description": "Get Unlimited Admin",
        "operationId": "ConfigurationService_GetUnlimitedAdmin",
        "responses": {
          "200": {
            "description": "The value of unlimited admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlimitedAdminModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Unlimited Admin",
        "description": "Update Unlimited Admin",
        "operationId": "ConfigurationService_UpdateUnlimitedAdmin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlimitedAdminUpdateArgs"
              }
            }
          },
          "description": "Unlimited Admin Update Options"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/secret-search-indexer": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Secret Search Indexer Configuration",
        "description": "Secret Search Indexer Configuration",
        "operationId": "ConfigurationService_GetSecretSearchIndexerConfiguration",
        "responses": {
          "200": {
            "description": "Secret Search Indexer Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchIndexerModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Secret Search Indexer Configuration",
        "description": "Update Secret Search Indexer Configuration",
        "operationId": "ConfigurationService_PatchSecretSearchIndexerConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchIndexerUpdateArgs"
              }
            }
          },
          "description": "Secret Search Indexer Configuration Update Settings"
        },
        "responses": {
          "200": {
            "description": "Updated Secret Search Indexer Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchIndexerModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/platform": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Platform Configuration",
        "description": "Retrieve the settings and descriptions for the Platform configuration view model.",
        "operationId": "ConfigurationService_GetPlatformConfiguration",
        "responses": {
          "200": {
            "description": "Platform Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Patch Platform Configuration",
        "description": "Patch Platform Configuration by sending one or more fields with dirty set to true.  This will return the actual updated view model.",
        "operationId": "ConfigurationService_PatchPlatformConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformConfigurationArgs"
              }
            }
          },
          "description": "Platform Update Settings"
        },
        "responses": {
          "200": {
            "description": "Updated Platform Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/platform-audits": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Platform Configuration Audits",
        "description": "Retrieve the audits for the Platform configuration.",
        "operationId": "ConfigurationService_GetPlatformConfigurationAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Platform Configuration Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfPlatformConfigurationAuditViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/auto-export": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Automatic Export Configuration",
        "description": "Retrieve the settings and descriptions for the automatic export configuration view model.",
        "operationId": "ConfigurationService_GetAutoExportConfiguration",
        "responses": {
          "200": {
            "description": "Automatic Export Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoExportConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Patch Automatic Export Configuration",
        "description": "Patch Automatic Export Configuration by sending one or more fields with dirty set to true.  This will return the actual updated view model.",
        "operationId": "ConfigurationService_PatchAutomaticExportConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoExportConfigurationArgs"
              }
            }
          },
          "description": "Automatic Export Update Settings"
        },
        "responses": {
          "200": {
            "description": "Updated Automatic Export Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoExportConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/auto-export-audits": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Automatic Export Configuration Audits",
        "description": "Retrieve the audits for the automatic export configuration.",
        "operationId": "ConfigurationService_GetAutoExportConfigurationAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Automatic Export Configuration Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfAutoExportConfigurationAuditViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/auto-export-logs": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Automatic Export Logs",
        "description": "Retrieve the logs for the automatic exports.",
        "operationId": "ConfigurationService_GetAutoExportLogs",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Automatic Export Logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfAutoExportLogViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/auto-export-storage": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Automatic Export Storage Items",
        "description": "Retrieves a list of the items in automatic export storage.",
        "operationId": "ConfigurationService_GetAutoExportStorageItemsDefault",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Automatic Export Storage Items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfAutoExportStorageItemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/auto-export-storage/{id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Automatic Export Storage Items For Configuration",
        "description": "Retrieves a list of the items in automatic export storage for a configuration.",
        "operationId": "ConfigurationService_GetAutoExportStorageItems",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Automatic Export Storage Items For Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfAutoExportStorageItemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/auto-export-storage/item/{id}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Automatic Export Storage Item",
        "description": "Retrieves the automatic export storage item's contents.",
        "operationId": "ConfigurationService_GetAutoExportStorageItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Automatic Export Storage Item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamContent"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/backup": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Backup Configuration",
        "description": "Retrieve the settings and descriptions for the backup configuration view model.",
        "operationId": "ConfigurationService_GetDatabaseBackupConfiguration",
        "responses": {
          "200": {
            "description": "Backup Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Patch Backup Configuration",
        "description": "Patch Backup Configuration by sending one or more fields with dirty set to true.  This will return the actual updated view model.",
        "operationId": "ConfigurationService_PatchDatabaseBackupConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupConfigurationArgs"
              }
            }
          },
          "description": "Backup Configuration Update Settings"
        },
        "responses": {
          "200": {
            "description": "Updated Backup Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/configuration/backup-logs": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Backup Logs",
        "description": "Retrieve the logs for the backups run.",
        "operationId": "ConfigurationService_GetBackupLogsV2",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Backup Logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfBackupLogViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/system-log": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get system log configuration",
        "description": "Get system log configuration",
        "operationId": "ConfigurationService_GetSystemLogConfiguration",
        "responses": {
          "200": {
            "description": "System log configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemLogConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Patch system log configuration",
        "description": "Patch system log configuration",
        "operationId": "ConfigurationService_PatchSystemLogConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemLogConfigurationUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "System log configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemLogConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/system-log/clear": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Clear system log",
        "description": "Clear system log",
        "operationId": "ConfigurationService_ClearSystemLog",
        "responses": {
          "200": {
            "description": "Cleared System Log Result",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/public-ssh-key": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Public SSH Key Expiration",
        "description": "Public SSH Key Expiration",
        "operationId": "ConfigurationService_GetPublicSshKeyExpiration",
        "responses": {
          "200": {
            "description": "Public SSH Key Expiration Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicSshKeyConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/ticket-system": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the ticket system configuration",
        "description": "Get the ticket system configuration",
        "operationId": "ConfigurationService_GetTicketSystemConfiguration",
        "responses": {
          "200": {
            "description": "Ticket System Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationTicketSystemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the ticket system configuration",
        "description": "Update the ticket system configuration",
        "operationId": "ConfigurationService_PatchTicketSystemConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationTicketSystemArgs"
              }
            }
          },
          "description": "Ticket System update args"
        },
        "responses": {
          "200": {
            "description": "Ticket System Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationTicketSystemViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/database": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get the database configuration",
        "description": "Get the database configuration",
        "operationId": "ConfigurationService_GetDatabaseConfiguration",
        "responses": {
          "200": {
            "description": "Database Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationDatabaseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the database configuration",
        "description": "Update the database configuration",
        "operationId": "ConfigurationService_PatchDatabaseConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationDatabasePatchArgs"
              }
            }
          },
          "description": "Database configuration update args"
        },
        "responses": {
          "200": {
            "description": "Database Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationDatabaseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/read-only-mode": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Read Only Mode Configuration",
        "description": "Get Read Only Mode Configuration",
        "operationId": "ConfigurationService_GetConfigurationReadOnlyMode",
        "responses": {
          "200": {
            "description": "Read Only Mode Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationReadOnlyModeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Patch Read Only Mode Configuration",
        "description": "Patch Read Only Mode Configuration",
        "operationId": "ConfigurationService_PatchConfigurationReadOnlyMode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationReadOnlyModeArgs"
              }
            }
          },
          "description": "Configuration Read Only Mode Patch Settings"
        },
        "responses": {
          "200": {
            "description": "Read Only Mode Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationReadOnlyModeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/security/rotate-secret-keys-status": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Get Rotate Secret Keys Status",
        "description": "Get Rotate Secret Keys Status",
        "operationId": "ConfigurationService_GetRotateSecretKeysStatus",
        "responses": {
          "200": {
            "description": "Status of Rotate Secret Keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RotateSecretKeysStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/general": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update general configuration",
        "description": "Update general configuration",
        "operationId": "ConfigurationService_PatchGeneralConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationGeneralPatchArgs"
              }
            }
          },
          "description": "Local user password update args"
        },
        "responses": {
          "200": {
            "description": "Updated Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationGeneralModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/saml/identity-provider": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Create Saml configuration",
        "description": "Create Saml Configuration",
        "operationId": "ConfigurationService_PostSamlConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderCreateArgs"
              }
            }
          },
          "description": "Saml create args"
        },
        "responses": {
          "200": {
            "description": "Saml configuration after create",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update Saml Identity Provider configuration",
        "description": "Update Saml Identity Provider Configuration",
        "operationId": "ConfigurationService_PatchSamlIdentityProviderConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderPatchArgs"
              }
            }
          },
          "description": "Saml Identity Provider update args"
        },
        "responses": {
          "200": {
            "description": "Saml Identity Provider configuration after updates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/sessionrecording": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Session Recording",
        "description": "Update Session Recording Configuration",
        "operationId": "ConfigurationService_PatchSessionRecordingConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationSessionRecordingPatchArgs"
              }
            }
          },
          "description": "Local user password update args"
        },
        "responses": {
          "200": {
            "description": "Session Recording Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationSessionRecordingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/folder": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Folder",
        "description": "Update Folder Configuration",
        "operationId": "ConfigurationService_PatchFolderConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationFoldersPatchArgs"
              }
            }
          },
          "description": "Folders configuration args"
        },
        "responses": {
          "200": {
            "description": "Folder Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationFoldersModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/application-settings": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the application settings configuration",
        "description": "Update the application settings configuration",
        "operationId": "ConfigurationService_PatchApplicationSettingsConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationApplicationSettingsPatchArgs"
              }
            }
          },
          "description": "Application settings update args"
        },
        "responses": {
          "200": {
            "description": "Application Settings Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationApplicationSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/permission-options": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the permission options configuration",
        "description": "Update the permission options configuration",
        "operationId": "ConfigurationService_PatchPermissionOptionsConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationPermissionOptionsPatchArgs"
              }
            }
          },
          "description": "Permission options update args"
        },
        "responses": {
          "200": {
            "description": "Permission Options Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationPermissionOptionsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/launcher-settings": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the launcher settings configuration",
        "description": "Update the launcher settings configuration",
        "operationId": "ConfigurationService_PatchLauncherSettingsConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationLauncherSettingsPatchArgs"
              }
            }
          },
          "description": "Launcher settings update args"
        },
        "responses": {
          "200": {
            "description": "launcher settings Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationLauncherSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/protocol-handler-settings": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the protocol handler settings configuration",
        "description": "Update the protocol handler settings configuration",
        "operationId": "ConfigurationService_PatchProtocolHandlerSettingsConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationProtocolHandlerSettingsPatchArgs"
              }
            }
          },
          "description": "Protocol handler settings update args"
        },
        "responses": {
          "200": {
            "description": "protocol handler settings Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationProtocolHandlerSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/user-experience": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the user experience configuration",
        "description": "Update the user experience configuration",
        "operationId": "ConfigurationService_PatchUserExperienceConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationUserExperiencePatchArgs"
              }
            }
          },
          "description": "User experience update args"
        },
        "responses": {
          "200": {
            "description": "User Experience Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationUserExperienceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/user-interface": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the user interface configuration",
        "description": "Update the user interface configuration",
        "operationId": "ConfigurationService_PatchUserInterfaceConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationUserInterfacePatchArgs"
              }
            }
          },
          "description": "User interface update args"
        },
        "responses": {
          "200": {
            "description": "User Interface Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationUserInterfaceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/email": {
      "patch": {
        "tags": [
          "Configuration"
        ],
        "summary": "Update the email configuration",
        "description": "Update the email configuration",
        "operationId": "ConfigurationService_PatchEmailConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationEmailPatchArgs"
              }
            }
          },
          "description": "Email update args"
        },
        "responses": {
          "200": {
            "description": "Email Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationEmailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/rpc/run-now": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Run RPC Now",
        "description": "Run RPC Now",
        "operationId": "ConfigurationService_RunRpcNow",
        "responses": {
          "200": {
            "description": "Result of running RPC now",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationRpcRunNowResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/heartbeat/run-now": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Run Heartbeat Now",
        "description": "Run Heartbeat Now",
        "operationId": "ConfigurationService_RunHeartbeatNow",
        "responses": {
          "200": {
            "description": "Result of running Heartbeat now",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationHeartbeatRunNowResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/secret-search-indexer/rebuild-index": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Rebuild Secret Search Index",
        "description": "Start Rebuilding the Secret Search Index.  This method just indicates that a background process should start to process the index.",
        "operationId": "ConfigurationService_RebuildSecretSearchIndexerConfiguration",
        "responses": {
          "200": {
            "description": "true if the job was queued",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/auto-export/run-now": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Start Automatic Export",
        "description": "Start the automatic export as configured",
        "operationId": "ConfigurationService_RunAutoExportNow",
        "responses": {
          "200": {
            "description": "True if the job was queued",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/backup/run-now": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Start Backup",
        "description": "Start the backup as configured",
        "operationId": "ConfigurationService_RunBackupNow",
        "responses": {
          "200": {
            "description": "true if the job was queued",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/security/rotate-secret-keys": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Rotate Secret Keys",
        "description": "Rotate Secret Keys",
        "operationId": "ConfigurationService_RotateSecretKeys",
        "responses": {
          "200": {
            "description": "Result of running Rotate Secret Keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RotateSecretKeysStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/security/cancel-rotate-secret-keys": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Cancel Rotate Secret Keys",
        "description": "Cancel Rotate Secret Keys",
        "operationId": "ConfigurationService_CancelRotateSecretKeys",
        "responses": {
          "200": {
            "description": "Result of running Cancel Rotate Secret Keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RotateSecretKeysStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/email/test": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "TestEmail",
        "description": "Send Test Email",
        "operationId": "ConfigurationService_TestEmail",
        "responses": {
          "200": {
            "description": "Test Email Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestEmailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/login/clear-ad-credentials": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Clear AD Credentials",
        "description": "Clear AD Credentials",
        "operationId": "ConfigurationService_ClearADCredentials",
        "responses": {
          "200": {
            "description": "Clear AD Credentials Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClearCachedADCredentialsResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/login/radius/test": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Test Radius Login",
        "description": "Test a Radius Login",
        "operationId": "ConfigurationService_TestRadiusLogin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestRadiusLoginArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Test Radius Login Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRadiusLoginResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/configuration/saml/identity-provider/import": {
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Import Saml configuration Identity Provider",
        "description": "Import Saml configuration Identity Provider",
        "operationId": "ConfigurationService_ImportSamlConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderImportArgs"
              }
            }
          },
          "description": "Saml Identity Provider import args"
        },
        "responses": {
          "200": {
            "description": "Saml configuration Identity Provider after import",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Saml configuration Identity Provider after import",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/connection-manager-settings": {
      "get": {
        "tags": [
          "ConnectionManagerSettings"
        ],
        "summary": "Get Connection Manager Settings",
        "description": "Get Connection Manager Settings",
        "operationId": "ConnectionManagerSettingsService_Get",
        "responses": {
          "200": {
            "description": "Connection Manager Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionManagerSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/sync/status": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Information about secrets syncing.",
        "description": "Get which tenants the secrets are syncing to, the current status of the sync, and the last sync time.",
        "operationId": "DevOpsSecretsVaultSyncService_GetSyncStatuses",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "If inactive sync maps should be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "Search by the secret being synced.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.tenantId",
            "in": "query",
            "description": "Search by the tenant being pushed to.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of statuses for secret syncing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDevOpsSecretsVaultSyncStatusSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/sync/status/{syncMapId}": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Information about secret syncing.",
        "description": "Get which tenants a secret is syncing to, the current status of the sync, and the last sync time.",
        "operationId": "DevOpsSecretsVaultSyncService_GetSyncStatus",
        "parameters": [
          {
            "name": "syncMapId",
            "in": "path",
            "description": "syncMapId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The status of a secret syncing to a tenant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevOpsSecretsVaultSyncStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/add-sync": {
      "post": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Create a DevOps sync for a secret.",
        "description": "Create a sync between a secret and a DevOps Secrets Vault tenant.",
        "operationId": "DevOpsSecretsVaultSyncService_CreateSync",
        "requestBody": {
          "$ref": "#/components/requestBodies/DevOpsSecretsVaultCreateSyncArgs"
        },
        "responses": {
          "200": {
            "description": "The status of the secret's sync.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevOpsSecretsVaultSyncStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/sync": {
      "post": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Sync a secret.",
        "description": "Sync a secret to a DevOps Secrets Vault tenant.",
        "operationId": "DevOpsSecretsVaultSyncService_SyncSecret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevOpsSecretsVaultSyncSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The status of the secret's sync.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The status of the secret's sync.",
                  "items": {
                    "$ref": "#/components/schemas/DevOpsSecretsVaultSyncStatusViewModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/sync/{syncSecretMapId}": {
      "put": {
        "tags": [
          "DevOpsSecretsVaultSync"
        ],
        "summary": "Update a secret sync.",
        "description": "Update a sync between a secret and a DevOps Secrets Vault tenant.",
        "operationId": "DevOpsSecretsVaultSyncService_UpdateSync",
        "parameters": [
          {
            "name": "syncSecretMapId",
            "in": "path",
            "description": "syncSecretMapId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DevOpsSecretsVaultCreateSyncArgs"
        },
        "responses": {
          "200": {
            "description": "The status of the secret's sync.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevOpsSecretsVaultSyncStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/tenant": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "Get DevOps Secrets Vault Tenants.",
        "description": "Search, filter, sort, and page DevOps Secrets Vault Tenants.",
        "operationId": "DevOpsSecretsVaultTenantService_GetList",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "If inactive tenants should be returned. Defaulted to false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.nameSearch",
            "in": "query",
            "description": "Search by tenant names.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The DevOps Secrets Vault Tenants that were found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDevOpsSecretsVaultTenantSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "Save a DevOps Secrets Vault Tenant.",
        "description": "Creates an existing DevOps Secrets Vault Tenant, or creates a new one.",
        "operationId": "DevOpsSecretsVaultTenantService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevOpsSecretsVaultCreateTenantArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The DevOps Secrets Vault Tenant Id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevOpsSecretsVaultTenantModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/tenant/{id}": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "Get a DevOps Secrets Vault Tenant.",
        "description": "Get the DevOps Secrets Vault Tenant with the Tenant ID provided.",
        "operationId": "DevOpsSecretsVaultTenantService_GetTenant",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The DevOps Secrets Vault Tenant model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevOpsSecretsVaultTenantModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "Update a DevOps Secrets Vault Tenant.",
        "description": "Updates an existing DevOps Secrets Vault Tenant, or creates a new one.",
        "operationId": "DevOpsSecretsVaultTenantService_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevOpsSecretsVaultUpdateTenantArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The DevOps Secrets Vault Tenant Id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevOpsSecretsVaultTenantModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/tenant/stub": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "DevOps Secrets Vault Tenant Model.",
        "description": "Retrieve an empty instance of a DevOps Secrets Vault Tenant.",
        "operationId": "DevOpsSecretsVaultTenantService_GetTenantStub",
        "responses": {
          "200": {
            "description": "A DevOps Secrets Vault Tenant with no values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevOpsSecretsVaultTenantModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/devops-secrets-vault/tenant/audits": {
      "get": {
        "tags": [
          "DevOpsSecretsVaultTenant"
        ],
        "summary": "DSV Tenant Audits.",
        "description": "Retrieves the changes made to your DSV Tenants.",
        "operationId": "DevOpsSecretsVaultTenantService_GetTenantAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search for text in the audit log.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.tenantId",
            "in": "query",
            "description": "Optional filter by tenant id.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated list of DSV Tenant audits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDevOpsSecretsVaultTenantAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Diagnostic Information",
        "description": "Get Diagnostic Information",
        "operationId": "DiagnosticsService_GetDiagnosticInformation",
        "responses": {
          "200": {
            "description": "Diagnostics Info object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosticsSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/background-processes": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Background Processes",
        "description": "Get Background Process Information",
        "operationId": "DiagnosticsService_GetBackgroundProcesses",
        "responses": {
          "200": {
            "description": "Background Process Enumerable",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Background Process Enumerable",
                  "items": {
                    "$ref": "#/components/schemas/ThreadInformation"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/connectivity-report": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Connectivity Report",
        "description": "Get Connectivity Report",
        "operationId": "DiagnosticsService_GetConnectivityReport",
        "responses": {
          "200": {
            "description": "Connectivity Report",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/app-settings": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get App Settings",
        "description": "Get App Settings",
        "operationId": "DiagnosticsService_GetAppSettings",
        "responses": {
          "200": {
            "description": "App Setting Dictionary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DictionaryOfStringAndString"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/quartz-jobs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Quartz Jobs",
        "description": "Get Quartz Jobs",
        "operationId": "DiagnosticsService_GetQuartzJobs",
        "responses": {
          "200": {
            "description": "Enumerable of Quartz Jobs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Enumerable of Quartz Jobs",
                  "items": {
                    "$ref": "#/components/schemas/QuartzTrigger"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/general-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get General Logs",
        "description": "Get General Logs",
        "operationId": "DiagnosticsService_GetGeneralLogs",
        "responses": {
          "200": {
            "description": "Get General Logs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/system-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get System Logs",
        "description": "Get System Logs",
        "operationId": "DiagnosticsService_GetSystemLogs",
        "responses": {
          "200": {
            "description": "Get System Logs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/discovery-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Discovery Logs",
        "description": "Get Discovery Logs",
        "operationId": "DiagnosticsService_GetDiscoveryLogs",
        "responses": {
          "200": {
            "description": "Get Discovery Logs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/computer-scan-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get ComputerScan Logs",
        "description": "Get ComputerScan Logs",
        "operationId": "DiagnosticsService_GetComputerScanLogs",
        "responses": {
          "200": {
            "description": "Get ComputerScan Logs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/rpc-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get RPC Logs",
        "description": "Get RPC Logs",
        "operationId": "DiagnosticsService_GetRPCLogs",
        "responses": {
          "200": {
            "description": "Get RPC Logs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/heartbeat-logs": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Get Heartbeat Logs",
        "description": "Get Heartbeat Logs",
        "operationId": "DiagnosticsService_GetHeartbeatLogs",
        "responses": {
          "200": {
            "description": "Get Heartbeat Logs",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/clear-quartz-job-errors": {
      "post": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Clear Quartz Job Errors",
        "description": "Clear Quartz Job Errors",
        "operationId": "DiagnosticsService_ClearQuartzJobErrors",
        "responses": {
          "200": {
            "description": "Clear Quartz Job Errors Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/clear-upgrade-in-progress": {
      "post": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Clear Upgrade In Progress",
        "description": "Clear Upgrade In Progress",
        "operationId": "DiagnosticsService_ClearUpgradeInProgress",
        "responses": {
          "200": {
            "description": "Clear Upgrade In Progress Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/diagnostics/test-event-log": {
      "post": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Test Event Log",
        "description": "Test Event Log",
        "operationId": "DiagnosticsService_TestEventLog",
        "responses": {
          "200": {
            "description": "Test Event Log Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/{domainId}/group/{groupId}": {
      "delete": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Unlink a group from domain",
        "description": "Unlinking a group from a domain will disable future synchronization updates. The group will also be disabled.",
        "operationId": "DirectoryServicesService_UnlinkDomainGroup",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success status",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/synchronization/logs": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Get Synchronization Log",
        "description": "Get Synchronization Log",
        "operationId": "DirectoryServicesService_GetSynchronizationLog",
        "parameters": [
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "EndDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "StartDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Synchronization log entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDirectoryServicesSynchronizationLogEntry"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/synchronization": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Directory Services Sync Status",
        "description": "Return status of directory services synchronization",
        "operationId": "DirectoryServicesService_GetSynchronizationStatus",
        "responses": {
          "200": {
            "description": "Whether or not the sync has started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryServicesSynchronizationStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Search Domains",
        "description": "Search Domains",
        "operationId": "DirectoryServicesService_SearchDomains",
        "parameters": [
          {
            "name": "filter.domainName",
            "in": "query",
            "description": "DomainName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domains that matched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfDomainSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Create Domain",
        "description": "Create a new domain to be used for directory services synchronization / integration",
        "operationId": "DirectoryServicesService_CreateDomain",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Domain that was just created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/{id}": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Get a Domain",
        "description": "Get a Domain",
        "operationId": "DirectoryServicesService_GetDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain that was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/ldap-settings/{id}": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Get Ldap synchronization settings for a domain",
        "description": "Get Ldap synchronization settings for a domain",
        "operationId": "DirectoryServicesService_GetLdapSyncSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ldap synchronization settings for the domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSyncSettingsViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/stub": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Get a Domain Stub",
        "description": "Get a Domain Stub",
        "operationId": "DirectoryServicesService_GetDomainStub",
        "parameters": [
          {
            "name": "domainType",
            "in": "query",
            "description": "domainType",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain Stub",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/{domainId}/groups/search-directory": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Search in the directory for groups",
        "description": "Using the credentials defined on the domain search within the directory for groups",
        "operationId": "DirectoryServicesService_SearchDirectoryForGroups",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search text. Use * for wildcards, ex: Admin*. Leave empty to return all.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of groups matching search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalGroupViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/{domainId}/members": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Search in the directory for members of a group",
        "description": "Using the credentials defined on the domain find members of a group within the directory",
        "operationId": "DirectoryServicesService_GetDirectoryGroupMembers",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "domainIdentifier",
            "in": "query",
            "description": "The unique directory identifier for the group to be linked.  For example, this is ADGuid in Active Directory",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "query",
            "description": "Name of the Group",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of users in the passed in group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryServicesGroupMemberResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/configuration": {
      "get": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Directory Services Configuration",
        "description": "Retrieve the current settings for Directory Services configuration",
        "operationId": "DirectoryServicesService_GetDirectoryServicesConfiguration",
        "responses": {
          "200": {
            "description": "Directory Services Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryServicesConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Update Directory Services Configuration",
        "description": "Update the current settings for Directory Services configuration",
        "operationId": "DirectoryServicesService_PatchDirectoryServicesConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectoryServicesConfigurationUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Updated Directory Services Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryServicesConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/ldap-settings/{domainId}": {
      "patch": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Patch Ldap Sync Settings for a domain",
        "description": "Patch Ldap Sync Settings for a domain",
        "operationId": "DirectoryServicesService_PatchLdapSyncSettings",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LdapSyncSettingsPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Domain that was just updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LdapSyncSettingsViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/{domainId}": {
      "patch": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Patch a domain",
        "description": "Patch a domain",
        "operationId": "DirectoryServicesService_PatchDomain",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Domain that was just updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/synchronization-now": {
      "post": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Synchronize all directory services",
        "description": "Run synchronize to update users and groups for all configurated and enabled domains in all directories and domains",
        "operationId": "DirectoryServicesService_SynchronizeNow",
        "responses": {
          "200": {
            "description": "True if the command was initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/directory-services/domains/{domainId}/group": {
      "post": {
        "tags": [
          "DirectoryServices"
        ],
        "summary": "Link a group from the directory",
        "description": "Linking or adding a group to a domain will synchronize all users from the directory to SS that are members of this group.",
        "operationId": "DirectoryServicesService_LinkDomainGroup",
        "parameters": [
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LinkExternalGroupArgs"
        },
        "responses": {
          "200": {
            "description": "Success status",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/data-replication/{replicaId}": {
      "get": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Get Disaster Recovery Data Replica",
        "description": "Retrieve the settings and descriptions for the Disaster Recovery data replica view model.",
        "operationId": "DisasterRecoveryService_GetDisasterRecoveryDataReplica",
        "parameters": [
          {
            "name": "replicaId",
            "in": "path",
            "description": "replicaId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disaster Recovery Data Replica",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryDataReplicaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Delete Disaster Recovery Data Replica",
        "description": "Delete the data replica.",
        "operationId": "DisasterRecoveryService_DeleteDisasterRecoveryDataReplica",
        "parameters": [
          {
            "name": "replicaId",
            "in": "path",
            "description": "replicaId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if the data replica was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Patch Disaster Recovery Data Replica",
        "description": "Patch Disaster Recovery Data Replica by sending one or more fields with dirty set to true.  This will return the actual updated view model.",
        "operationId": "DisasterRecoveryService_PatchDisasterRecoveryDataReplica",
        "parameters": [
          {
            "name": "replicaId",
            "in": "path",
            "description": "replicaId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisasterRecoveryDataReplicaArgs"
              }
            }
          },
          "description": "Disaster Recovery Data Replica Update Settings"
        },
        "responses": {
          "200": {
            "description": "Updated Disaster Recovery Data Replica",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryDataReplicaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/incoming-configuration": {
      "get": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Get Disaster Recovery Incoming Configuration",
        "description": "Retrieve the settings and descriptions for the Disaster Recovery incoming configuration view model.",
        "operationId": "DisasterRecoveryService_GetDisasterRecoveryIncomingConfiguration",
        "responses": {
          "200": {
            "description": "Disaster Recovery Incoming Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryIncomingConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Patch Disaster Recovery Incoming Configuration",
        "description": "Patch Disaster Recovery Incoming Configuration by sending one or more fields with dirty set to true.  This will return the actual updated view model.",
        "operationId": "DisasterRecoveryService_PatchDisasterRecoveryIncomingConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisasterRecoveryConfigurationArgs"
              }
            }
          },
          "description": "Disaster Recovery Incoming Configuration Update Settings"
        },
        "responses": {
          "200": {
            "description": "Updated Disaster Recovery Incoming Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryIncomingConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/audits": {
      "get": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Get Disaster Recovery Configuration Audits",
        "description": "Retrieve the audits for the Disaster Recovery configuration.",
        "operationId": "DisasterRecoveryService_GetDisasterRecoveryConfigurationAudits",
        "parameters": [
          {
            "name": "auditType",
            "in": "query",
            "description": "auditType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disaster Recovery Configuration Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDisasterRecoveryAuditViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/outgoing-configuration": {
      "get": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Get Disaster Recovery Outgoing Configuration",
        "description": "Retrieve the settings and descriptions for the Disaster Recovery Outgoing Configuration view model.",
        "operationId": "DisasterRecoveryService_GetDisasterRecoveryOutgoingConfiguration",
        "parameters": [
          {
            "name": "filter.location",
            "in": "query",
            "description": "Only return data replicas with locations containing this text.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.name",
            "in": "query",
            "description": "Only return data replicas with names containing this text.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disaster Recovery Outgoing Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryOutgoingConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/logs": {
      "get": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Get Disaster Recovery Replication Logs",
        "description": "Retrieve the logs for each run of Disaster Recovery Replication",
        "operationId": "DisasterRecoveryService_GetDisasterRecoveryDataReplicationLogs",
        "parameters": [
          {
            "name": "logType",
            "in": "query",
            "description": "logType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disaster Recovery Replication Logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDisasterRecoveryDataReplicationLogViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/handshake": {
      "post": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Disaster Recovery Handshake",
        "description": "Try to add the requesting data replica to the receiving data source.",
        "operationId": "DisasterRecoveryService_PostDisasterRecoveryHandshake",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisasterRecoveryHandshakeArgs"
              }
            }
          },
          "description": "Disaster Recovery Handshake arguments encrypted using the data source's public key."
        },
        "responses": {
          "200": {
            "description": "Disaster Recovery Handshake response encrypted using the data replica's public key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryHandshakeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/data-replication/run-now": {
      "post": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Start Disaster Recovery Data Replication",
        "description": "Start Disaster Recovery data replication as configured.",
        "operationId": "DisasterRecoveryService_RunDisasterRecoveryDataReplicationNow",
        "parameters": [
          {
            "name": "minutes",
            "in": "query",
            "description": "minutes",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "True if the job was queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryDataReplicaMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/data-replication/test": {
      "post": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Test Disaster Recovery Data Replication",
        "description": "Test Disaster Recovery data replication as configured.",
        "operationId": "DisasterRecoveryService_RunDisasterRecoveryDataReplicaTestNow",
        "responses": {
          "200": {
            "description": "Whether the connection between the data replica and data source is configured correctly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryDataReplicaMessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/data-replication/start": {
      "post": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Request Disaster Recovery Data Replica Replication Start",
        "description": "Request that data replication be started for the given replica.",
        "operationId": "DisasterRecoveryService_RequestDataReplicaReplicationStart",
        "requestBody": {
          "$ref": "#/components/requestBodies/DisasterRecoveryDataReplicaToDataSourceArgs"
        },
        "responses": {
          "200": {
            "description": "Disaster Recovery Data Replica Replication Start response encrypted using the symmetric key for this data replica.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryDataSourceToDataReplicaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/data-replication/status": {
      "post": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Request Disaster Recovery Data Replica Replication Status",
        "description": "Request the data replication status for this replica from the Data Source.",
        "operationId": "DisasterRecoveryService_RequestDataReplicaReplicationStatus",
        "requestBody": {
          "$ref": "#/components/requestBodies/DisasterRecoveryDataReplicaToDataSourceArgs"
        },
        "responses": {
          "200": {
            "description": "Disaster Recovery Data Replica Replication Status response encrypted using the symmetric key for this data replica.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryDataSourceToDataReplicaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/disaster-recovery/data-replication/package": {
      "post": {
        "tags": [
          "DisasterRecovery"
        ],
        "summary": "Request Disaster Recovery Data Replica Replication Package",
        "description": "Request a data replication package for this replica from the Data Source.",
        "operationId": "DisasterRecoveryService_RequestDataReplicaReplicationPackage",
        "requestBody": {
          "$ref": "#/components/requestBodies/DisasterRecoveryDataReplicaToDataSourceArgs"
        },
        "responses": {
          "200": {
            "description": "Disaster Recovery Data Replica Replication Package response encrypted using the symmetric key for this data replica.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisasterRecoveryDataSourceToDataReplicaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/sources": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get discovery sources",
        "description": "Returns discovery sources",
        "operationId": "DiscoveryService_SearchDiscoverySources",
        "parameters": [
          {
            "name": "filter.discoverySourceName",
            "in": "query",
            "description": "DiscoverySourceName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.discoverySourceType",
            "in": "query",
            "description": "DiscoverySourceType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Discovery Source Views",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDiscoverySourceSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/{id}": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get discovery source",
        "description": "Returns the discovery source",
        "operationId": "DiscoveryService_GetDiscoverySource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Discovery Source ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Discovery Source View",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoverySourceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Discovery"
        ],
        "summary": "Update a discovery source",
        "description": "Update an existing discovery source using the existing discovery source ID",
        "operationId": "DiscoveryService_UpdateDiscoverySource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Discovery Source ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoverySourceUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The updated discovery source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoverySourceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/stub/{typeId}": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get a Discovery Source Stub",
        "description": "Get a Discovery Source Stub",
        "operationId": "DiscoveryService_GetDiscoverySourceStub",
        "parameters": [
          {
            "name": "typeId",
            "in": "path",
            "description": "Discovery Source Type ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discovery Source Stub",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoverySourceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/configuration": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Configuration",
        "description": "Get Discovery Configuration",
        "operationId": "DiscoveryService_GetDiscoveryConfiguration",
        "responses": {
          "200": {
            "description": "Discovery Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Discovery"
        ],
        "summary": "Update discovery configuration",
        "description": "Update discovery configuration",
        "operationId": "DiscoveryService_UpdateDiscoveryConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryConfigurationUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The updated discovery configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/status": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Status",
        "description": "Get Discovery Status",
        "operationId": "DiscoveryService_GetDiscoveryStatus",
        "responses": {
          "200": {
            "description": "Discovery Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/{discoverySourceId}/available-scanners": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Source Available Scanners",
        "description": "Get all of the scanners that can be created for this specific discovery source",
        "operationId": "DiscoveryService_GetAvailableDiscoverySourceScanners",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discovery Scanner Types",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Discovery Scanner Types",
                  "items": {
                    "$ref": "#/components/schemas/DiscoveryScannerSettingTypeSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/{discoverySourceId}/scanner-settings/search": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Scanner Settings",
        "description": "Get all of the scanner settings for a specific discovery source",
        "operationId": "DiscoveryService_SearchDiscoverySourceScannerSettings",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Collection of scanner settings",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Collection of scanner settings",
                  "items": {
                    "$ref": "#/components/schemas/DiscoveryScannerSettingSummaryModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/scan-types": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Scan Types",
        "description": "Get all of the scan types",
        "operationId": "DiscoveryService_GetScanTypes",
        "responses": {
          "200": {
            "description": "Discovery Scan Types",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Discovery Scan Types",
                  "items": {
                    "$ref": "#/components/schemas/DiscoveryScanTypeSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery-source/audit": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get Discovery Source Audits",
        "description": "Get Discovery Source Audits",
        "operationId": "DiscoveryService_GetDiscoverySourceAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.discoverySourceId",
            "in": "query",
            "description": "DiscoverySourceId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discovery Source Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfDiscoverySourceAuditModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/{discoverySourceId}/ou": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get and include or exclude for discovery",
        "description": "Returns the discovery source OU",
        "operationId": "DiscoveryService_SearchForDomainOu",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Only return items that can be included",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "Search for OU items containing this text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selectedIds",
            "in": "query",
            "description": "When include is false only include items within these exisitng IDs",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Discovery OU",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The Discovery OU",
                  "items": {
                    "$ref": "#/components/schemas/OUModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/{id}/filter": {
      "get": {
        "tags": [
          "Discovery"
        ],
        "summary": "Get the source filter for a discovery source",
        "description": "Get the source filter for a discovery source",
        "operationId": "DiscoveryService_GetDiscoverySourceFilter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The source filter for a discovery source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainDiscoveryScopeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/{discoverySourceId}/filter/{memberId}": {
      "patch": {
        "tags": [
          "Discovery"
        ],
        "summary": "Patches discovery source filter",
        "description": "Patches the properties on a single discovery source filter",
        "operationId": "DiscoveryService_PatchDiscoverySourceFilter",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "memberId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoverySourceFilterPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "True",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainDiscoveryScopeFilterModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Create a new discovery source",
        "description": "Creates a new discovery source",
        "operationId": "DiscoveryService_CreateDiscoverySource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoverySourceCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The new discovery source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoverySourceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/run": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Run a discovery command",
        "description": "Run a discovery command",
        "operationId": "DiscoveryService_RunDiscoveryNow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryRunArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "true to indicate the command was triggered",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/{discoverySourceId}/scanner-settings": {
      "post": {
        "tags": [
          "Discovery"
        ],
        "summary": "Create scanner setting",
        "description": "Create a scanner setting on a discovery source",
        "operationId": "DiscoveryService_CreateDiscoverySourceScannerSettings",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryScannerSettingCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "New scanner setting",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryScannerSettingViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/discovery/source/{discoverySourceId}/filters": {
      "put": {
        "tags": [
          "Discovery"
        ],
        "summary": "Updates discovery source filters",
        "description": "Updates the full collection of discovery source filters for a discovery source",
        "operationId": "DiscoveryService_UpdateDiscoverySourceFilters",
        "parameters": [
          {
            "name": "discoverySourceId",
            "in": "path",
            "description": "discoverySourceId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoverySourceFiltersUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The source filter for a discovery source",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainDiscoveryScopeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/configuration": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Distributed Engine Configuration",
        "description": "Retrieve the current settings for Distributed Engine configuration",
        "operationId": "DistributedEngineService_GetDistributedEngineConfiguration",
        "responses": {
          "200": {
            "description": "Distributed Engines Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributedEngineConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Update Distributed Engine Configuration",
        "description": "Update the current settings for Distributed Engine configuration",
        "operationId": "DistributedEngineService_PatchDistributedEngineConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DistributedEngineConfigurationUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Updated Distributed Engine Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DistributedEngineConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site-connectors": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Search Site Connectors",
        "description": "Search Site Connectors",
        "operationId": "DistributedEngineService_SearchSiteConnectors",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connectors that matched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfSiteConnectorSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site-connector/{id}": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site Connector",
        "description": "Get Site Connector for passed in Id",
        "operationId": "DistributedEngineService_GetSiteConnector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connector if found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteConnectorViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Update Site Connector",
        "description": "Update Site Connector object with passed in Id",
        "operationId": "DistributedEngineService_UpdateSiteConnector",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteConnectorUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Updated Site Connector object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteConnectorViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site-connector/stub": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site Connector Stub",
        "description": "Get Site Connector for passed in args",
        "operationId": "DistributedEngineService_GetSiteConnectorStub",
        "parameters": [
          {
            "name": "queueType",
            "in": "query",
            "description": "QueueType",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stub of a Site Connector model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteConnectorViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site-connector/{siteConnectorId}/credentials": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site Connector Credentials",
        "description": "Get Site Connector Credentials",
        "operationId": "DistributedEngineService_GetSiteConnectorCredentials",
        "parameters": [
          {
            "name": "siteConnectorId",
            "in": "path",
            "description": "siteConnectorId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connector Credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteConnectorCredentialsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/engines": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Search Engines",
        "description": "Search Engines",
        "operationId": "DistributedEngineService_SearchEngines",
        "parameters": [
          {
            "name": "filter.activationStatus",
            "in": "query",
            "description": "Only return engines with this activation status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.connectionStatus",
            "in": "query",
            "description": "Only return engines with this connection status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.friendlyName",
            "in": "query",
            "description": "Only return engines with a friendly name that contains this text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.onlyIncludeRequiringAction",
            "in": "query",
            "description": "Only include engines that require action.  For example, pending but not deleted or no site assigned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "Only return engines for this site",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Engines that matched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfEngineSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/engine-settings/site/{siteId}": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Default Engine Settings for Site",
        "description": "Get Default Engine Settings object having passed in Site Id",
        "operationId": "DistributedEngineService_GetEngineSettingsForSite",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "siteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Engine Settings object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site/{siteId}/engine-audits": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Engine Audits for Site",
        "description": "Get Engine Audits having passed in Site Id",
        "operationId": "DistributedEngineService_GetEngineAuditsForSite",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.engineId",
            "in": "query",
            "description": "EngineId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "siteId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Engine Audit Summary object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEngineAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/engine-settings/{engineId}": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Engine Settings",
        "description": "Get Engine Settings object having passed in Engine Id",
        "operationId": "DistributedEngineService_GetEngineSettings",
        "parameters": [
          {
            "name": "engineId",
            "in": "path",
            "description": "engineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Engine Settings object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/sites": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Search Sites",
        "description": "Search Sites",
        "operationId": "DistributedEngineService_SearchSites",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include inactive sites",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeSiteMetrics",
            "in": "query",
            "description": "When true metrics are included for returned sites such as how many inactive or active sites",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.onlyIncludeSitesThatCanAddNewEngines",
            "in": "query",
            "description": "Only returns sites that can have new engines added",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "Return the site with this ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.siteName",
            "in": "query",
            "description": "Return sites that partially match this name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sites that matched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSiteSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site/{id}": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site",
        "description": "Get Site for passed in Id",
        "operationId": "DistributedEngineService_GetSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site if found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteBasicModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Patch Site",
        "description": "Patch Site object having passed in Id",
        "operationId": "DistributedEngineService_PatchSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Patch Site object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteBasicModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site/stub": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Site Stub",
        "description": "Get Site for passed in args",
        "operationId": "DistributedEngineService_GetSiteStub",
        "responses": {
          "200": {
            "description": "Stub of a Site model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteBasicModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site/{id}/audit": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "GetSiteAudits",
        "description": "Get audits by Site Id",
        "operationId": "DistributedEngineService_GetSiteAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSiteAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site/{id}/logs": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "SearchSiteLogs",
        "description": "Search site logs by Site Id",
        "operationId": "DistributedEngineService_SearchSiteLogs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.engineId",
            "in": "query",
            "description": "Filter by a specific engine ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "Term used to search the Engine Name and/or the Message of the Site Log",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Logs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSiteLogSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site-connector/{id}/download-memorymq": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Download Memory MQ",
        "description": "Downloads MemoryMQ",
        "operationId": "DistributedEngineService_DownloadMemoryMq",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "MemoryMQ File Download",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileStream"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/{id}/server-capabilities": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Get Server Capabilities",
        "description": "Gets the server capabilities of an engine's server",
        "operationId": "DistributedEngineService_GetServerCapabilities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the server capabilities of an engine's server",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Returns the server capabilities of an engine's server",
                  "items": {
                    "$ref": "#/components/schemas/EngineServerCapabilitiesSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/download-distributed-engine": {
      "get": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Download Distributed Engine",
        "description": "Downloads Distributed Engine",
        "operationId": "DistributedEngineService_DownloadDistributedEngine",
        "parameters": [
          {
            "name": "is64Bit",
            "in": "query",
            "description": "is64Bit",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "siteId",
            "in": "query",
            "description": "siteId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DistributedEngine File Download",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileStream"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/engine-settings/{engineSettingsId}": {
      "patch": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Patch Engine Settings",
        "description": "Patch Engine Settings object having passed in the Id",
        "operationId": "DistributedEngineService_PatchEngineSettings",
        "parameters": [
          {
            "name": "engineSettingsId",
            "in": "path",
            "description": "engineSettingsId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EngineSettingsUpdateArgs"
        },
        "responses": {
          "200": {
            "description": "Patch Engine Settings object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/engine-settings/engine/{engineId}": {
      "patch": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Patch Engine Settings For Engine",
        "description": "Patch Engine Settings object having passed in the Engine Id",
        "operationId": "DistributedEngineService_PatchEngineSettingsForEngine",
        "parameters": [
          {
            "name": "engineId",
            "in": "path",
            "description": "engineId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/EngineSettingsUpdateArgs"
        },
        "responses": {
          "200": {
            "description": "Patch Engine Settings object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site-connector": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Create Site Connector",
        "description": "Create Site Connector and returns model",
        "operationId": "DistributedEngineService_CreateSiteConnector",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteConnectorCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Site Connector object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteConnectorViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site-connector/{siteConnectorId}/validate": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Validate Site Connector",
        "description": "Validate Site Connector and returns model",
        "operationId": "DistributedEngineService_ValidateSiteConnector",
        "parameters": [
          {
            "name": "siteConnectorId",
            "in": "path",
            "description": "siteConnectorId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Site Connector validation result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteConnectorValidationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/update-engine-status": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Activate Engine",
        "description": "Activate the specified engine",
        "operationId": "DistributedEngineService_UpdateEngineStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EngineActivationRequestArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Engine Activation Result Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineActivationResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site/{siteId}/validate-connectivity": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Validate Site Connectivity",
        "description": "Validate Site Connectivity within a timeout.",
        "operationId": "DistributedEngineService_ValidateSiteConnectivity",
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "Id of Site",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteConnectivityValidationArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "SiteConnectivityValidationResult object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteConnectivityValidationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Create Site",
        "description": "Create Site and returns model",
        "operationId": "DistributedEngineService_CreateSite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Site object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteBasicModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/distributed-engine/site/{id}/reassign": {
      "post": {
        "tags": [
          "DistributedEngine"
        ],
        "summary": "Reassign Secrets From the Site",
        "description": "Reassign Secrets From the Site",
        "operationId": "DistributedEngineService_ReassignSecrets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReassignSecretsArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The site model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteBasicModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/domain-index/delete-all": {
      "delete": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Delete all domain name index records",
        "description": "Delete existing domain name index records",
        "operationId": "DomainNameIndexService_TruncateDomainNameIndex",
        "responses": {
          "200": {
            "description": "Delete success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/domain-index": {
      "get": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Get a domain name index",
        "description": "Returns the domain name index",
        "operationId": "DomainNameIndexService_GetDomainNameIndex",
        "parameters": [
          {
            "name": "filter.discoverySourceIdScanned",
            "in": "query",
            "description": "DiscoverySourceIdScanned",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.domainName",
            "in": "query",
            "description": "DomainName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.domainResolveType",
            "in": "query",
            "description": "DomainResolveType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Domain Name Index View",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDomainNameIndexSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/domain-index/{id}": {
      "patch": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Update a domain name index",
        "description": "Update an existing domain name index using the existing domain name index ID",
        "operationId": "DomainNameIndexService_UpdateDomainNameIndex",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain Name Index ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainNameIndexUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The updated domain name index",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainNameIndexModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/domain-index/create": {
      "post": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Create a new domain name index",
        "description": "Creates a new domain name index with suggested discovery source id",
        "operationId": "DomainNameIndexService_CreateDomainNameIndex",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainNameIndexCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The new domain name index",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainNameIndexModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/domain-index/expire/{id}": {
      "post": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Expire a domain name index",
        "description": "Expire an existing domain name index using the existing domain name index ID",
        "operationId": "DomainNameIndexService_ExpireSingleDomainNameIndex",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain Name Index ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated domain name index",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainNameIndexModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/domain-index/expire-all": {
      "post": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Expire all domain name index records",
        "description": "Expire existing domain name index records",
        "operationId": "DomainNameIndexService_ExpireAllDomainNameIndex",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainNameIndexExpireUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Expire success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/domain-index/delete/{id}": {
      "put": {
        "tags": [
          "DomainNameIndex"
        ],
        "summary": "Delete a domain name index",
        "description": "Delete an existing domain name index using the existing domain name index ID",
        "operationId": "DomainNameIndexService_DeleteSingleDomainNameIndex",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Delete success",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dual-controls/{id}": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Get Dual Control",
        "description": "Get a single dual control by ID",
        "operationId": "DualControlsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dual control ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dual control object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DualControlModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "DualControls"
        ],
        "summary": "Update Dual Control",
        "description": "Update a single dual control by ID",
        "operationId": "DualControlsService_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dual control ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DualControlUpdateArgs"
              }
            }
          },
          "description": "Dual control update options"
        },
        "responses": {
          "200": {
            "description": "Dual control object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DualControlModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "DualControls"
        ],
        "summary": "Delete Dual Control",
        "description": "Delete a dual control by ID",
        "operationId": "DualControlsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dual control ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dual-controls/state/{dualControlType}/{id}": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Get dual control state for the current item",
        "description": "Get dual control state for the current item",
        "operationId": "DualControlsService_GetAllReports",
        "parameters": [
          {
            "name": "dualControlType",
            "in": "path",
            "description": "dualControlType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dual Control State",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DualControlStateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dual-controls": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Search Dual Controls",
        "description": "Search, filter, sort, and page dual controls",
        "operationId": "DualControlsService_SearchDualControls",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive items",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dual control search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDualControlSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "DualControls"
        ],
        "summary": "Create Dual Control",
        "description": "Create a new dual control",
        "operationId": "DualControlsService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DualControlCreateArgs"
              }
            }
          },
          "description": "Dual control creation options"
        },
        "responses": {
          "200": {
            "description": "Dual control object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DualControlModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dual-controls/types": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Get Dual Control Types",
        "description": "Return a list of Dual Control Types",
        "operationId": "DualControlsService_GetTypes",
        "responses": {
          "200": {
            "description": "Dual control type objects",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dual control type objects",
                  "items": {
                    "$ref": "#/components/schemas/DualControlTypeModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dual-controls/stub": {
      "get": {
        "tags": [
          "DualControls"
        ],
        "summary": "Get Dual Control Stub",
        "description": "Return the default values for a new dual control",
        "operationId": "DualControlsService_Stub",
        "responses": {
          "200": {
            "description": "Dual control object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DualControlModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/dual-controls/auth/{dualControlType}/{id}": {
      "post": {
        "tags": [
          "DualControls"
        ],
        "summary": "Authorize a dual control",
        "description": "Authorize a dual control",
        "operationId": "DualControlsService_AuthorizeDualControl",
        "parameters": [
          {
            "name": "dualControlType",
            "in": "path",
            "description": "dualControlType",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DualControlAuthArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Dual control authorization result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DualControlAuthResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/enterprise/search-request/{requestId}": {
      "get": {
        "tags": [
          "Enterprise"
        ],
        "summary": "GetRequestData",
        "description": "Retrieve Enterprise Search Request Data",
        "operationId": "EnterpriseService_GetRequestData",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "requestId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EnterpriseSummaryModel for given TaskId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterpriseSearchResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/enterprise/search-request": {
      "post": {
        "tags": [
          "Enterprise"
        ],
        "summary": "Request Enterprise Data",
        "description": "Initiate a search request for Enterprise Data",
        "operationId": "EnterpriseService_SearchRequestData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnterpriseSearchRequestArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Model of request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterpriseSearchRequestModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-audit": {
      "get": {
        "tags": [
          "EventPipelineAudit"
        ],
        "summary": "Get Pipeline / Policy Audits",
        "description": "Retrieve all of the audits for both pipeline and policy audit entries",
        "operationId": "EventPipelineAuditService_GetAllPipelineAndPolicyAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged list of audit entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEventPipelinePolicyAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/{id}": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Get an Event Pipeline",
        "description": "Returns the Event Pipeline for the provided ID",
        "operationId": "EventPipelineService_GetEventPipeline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Event Pipeline View",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelineModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Update an Event Pipeline",
        "description": "Update an existing Event Pipeline using the existing Event Pipeline's ID",
        "operationId": "EventPipelineService_UpdateEventPipelines",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelineUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The updated Event Pipeline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelineModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/list": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Get a list of Event Pipelines",
        "description": "Returns a list of Event Pipelines that meet the paging/searching criterea",
        "operationId": "EventPipelineService_GetEventPipelines",
        "parameters": [
          {
            "name": "filter.eventEntityTypeId",
            "in": "query",
            "description": "EventEntityTypeId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.eventPipelineName",
            "in": "query",
            "description": "EventPipelineName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Event Pipelines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEventPipelineViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/summaries": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Get summaries of Event Pipelines",
        "description": "Returns a list of Event Pipeline summaries that meet the searching criterea",
        "operationId": "EventPipelineService_GetEventPipelineSummaries",
        "parameters": [
          {
            "name": "filter.eventEntityTypeId",
            "in": "query",
            "description": "EventEntityTypeId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.eventPipelineName",
            "in": "query",
            "description": "EventPipelineName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The summaries of Event Pipelines",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEventPipelineSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/stub": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Stub an empty Event Pipeline",
        "description": "Returns an empty Event Pipeline to be filled out.",
        "operationId": "EventPipelineService_GetEventPipelineStub",
        "responses": {
          "200": {
            "description": "An empty Event Pipeline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipeline"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/runs": {
      "get": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Get Event Pipeline Runs",
        "description": "Get all of the runs for a specific pipeline",
        "operationId": "EventPipelineService_GetEventPipelineRuns",
        "parameters": [
          {
            "name": "filter.eventPipelineId",
            "in": "query",
            "description": "EventPipelineId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.eventPipelinePolicyRunId",
            "in": "query",
            "description": "EventPipelinePolicyRunId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of pipeline runs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEventPipelineRunViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline": {
      "post": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Create a new Event Pipeline",
        "description": "Creates a new Event Pipeline with the provided object.",
        "operationId": "EventPipelineService_CreateEventPipelines",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelineCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The new Event Pipeline",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelineModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/{id}/order": {
      "put": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Reorder an Event Pipeline",
        "description": "Reorder an existing Event Pipeline in a policy",
        "operationId": "EventPipelineService_ReorderPipeline",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelineOrderUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Event Pipeline Policy Map",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Event Pipeline Policy Map",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelinePolicyMap"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/{id}/activate": {
      "put": {
        "tags": [
          "EventPipeline"
        ],
        "summary": "Update an Event Pipeline active value",
        "description": "Sets if an Event Pipeline is active or not",
        "operationId": "EventPipelineService_TogglePipelineActive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelineActivateUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The Active value",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{policyId}/pipeline/{pipelineId}": {
      "delete": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Remove Event Pipeline From Policy",
        "description": "Remove a pipeline from a specific policy",
        "operationId": "EventPipelinePolicyService_RemoveEventPipelineFromPolicy",
        "parameters": [
          {
            "name": "pipelineId",
            "in": "path",
            "description": "Event Pipeline ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "boolean indicating success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{id}": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Event Pipeline Policy",
        "description": "Get a specific policy by ID",
        "operationId": "EventPipelinePolicyService_GetEventPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Policy details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelinePolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Update Event Pipeline Policy",
        "description": "Update a policy",
        "operationId": "EventPipelinePolicyService_UpdateEventPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelinePolicyUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The update policy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelinePolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Add Pipeline To Event Pipeline Policy",
        "description": "Returns data pertaining to children of a folder that has a particular pipeline policy assigned",
        "operationId": "EventPipelinePolicyService_AddPipelineToEventPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelinePolicyAddPipelineArgs"
              }
            }
          },
          "description": "eventPipelinePolicyAddPipelineArgs"
        },
        "responses": {
          "200": {
            "description": "Pipeline policy children",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelinePolicyMapModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/list": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Event Pipeline Policies",
        "description": "Get all pipeline policies",
        "operationId": "EventPipelinePolicyService_GetEventPipelinePolicies",
        "parameters": [
          {
            "name": "filter.eventPipelineId",
            "in": "query",
            "description": "EventPipelineId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.eventPipelinePolicyName",
            "in": "query",
            "description": "EventPipelinePolicyName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "FolderId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged list of all policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEventPipelinePolicySummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/runs": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Event Pipeline Policy Runs",
        "description": "Get all runs by specific search criteria",
        "operationId": "EventPipelinePolicyService_GetEventPipelinePolicyRuns",
        "parameters": [
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.eventPipelinePolicyRunId",
            "in": "query",
            "description": "EventPipelinePolicyRunId",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of policy runs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEventPipelineRunViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/activity": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Event Pipeline Policy Run Activity",
        "description": "Get all activity for a specific policy run ID",
        "operationId": "EventPipelinePolicyService_GetEventPipelinePolicyRunActivity",
        "parameters": [
          {
            "name": "eventPipelineId",
            "in": "query",
            "description": "eventPipelineId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "eventPipelinePolicyRunId",
            "in": "query",
            "description": "Event Pipeline Policy Run ID",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details for a specific run",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Details for a specific run",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelinePolicyRunActivityViewModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{id}/secretpolicies": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Secret Policies For Pipeline Policies",
        "description": "Get all of the secret polocies that are related to this pipeline",
        "operationId": "EventPipelinePolicyService_GetSecretPoliciesForPipelinePolicies",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.eventPipelinePolicyId",
            "in": "query",
            "description": "EventPipelinePolicyId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.eventPipelinePolicyName",
            "in": "query",
            "description": "EventPipelinePolicyName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of secret policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretPolicyViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{id}/folders": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Folders For Pipeline Policies",
        "description": "Get all of the folders for a policy pipeline",
        "operationId": "EventPipelinePolicyService_GetFoldersForPipelinePolicies",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all folders to which this policy is applied",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of all folders to which this policy is applied",
                  "items": {
                    "$ref": "#/components/schemas/FolderSimpleViewModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Update Event Pipeline Policy Folder Maps",
        "description": "Adds or updates the Pipeline Policy Folder Maps to reflect the collection of folder maps for the pipeline policy that was passed in.",
        "operationId": "EventPipelinePolicyService_UpdateEventPipelinePolicyFolderMaps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelinePolicyFolderMapUpdateArgs"
              }
            }
          },
          "description": "eventPipelinePolicyFolderMaps"
        },
        "responses": {
          "200": {
            "description": "boolean indicating success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{id}/groups": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Groups For Pipeline Policies",
        "description": "Get all of the groups that apply this pipeline",
        "operationId": "EventPipelinePolicyService_GetGroupsForPipelinePolicies",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all groups",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of all groups",
                  "items": {
                    "$ref": "#/components/schemas/UserGroupSearchResultModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Update Event Pipeline Policy Group Maps",
        "description": "Adds or updates the Pipeline Policy Group Maps to reflect the collection of group maps for the pipeline policy that was passed in.",
        "operationId": "EventPipelinePolicyService_UpdateEventPipelinePolicyGroupMaps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelinePolicyGroupMapUpdateArgs"
              }
            }
          },
          "description": "eventPipelinePolicyGroupMaps"
        },
        "responses": {
          "200": {
            "description": "boolean indicating success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{id}/groups/count": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Group Count For Pipeline Policy",
        "description": "Returns the count of groups that have a particular pipeline policy assigned",
        "operationId": "EventPipelinePolicyService_GetGroupCountForPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Number of groups affected",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Int32",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{id}/folders/{folderId}/childdata": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Get Child Folder Data For Pipeline Policy Folder",
        "description": "Get all of the child data for a specific folder",
        "operationId": "EventPipelinePolicyService_GetChildFolderDataForPipelinePolicyFolder",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of child data",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of child data",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelinePolicyFolderChildData"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/export/{id}": {
      "get": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Export Event Pipeline Policy",
        "description": "Export a policy",
        "operationId": "EventPipelinePolicyService_ExportEventPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the exported json of the policy",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy": {
      "post": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Create Pipeline Policy",
        "description": "Create Pipeline Policy",
        "operationId": "EventPipelinePolicyService_CreateEventPipelinePolicy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelinePolicyCreateArgs"
              }
            }
          },
          "description": "eventPipelinePolicy"
        },
        "responses": {
          "200": {
            "description": "Newly created model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelinePolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/duplicate": {
      "post": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Duplicate Event Pipeline Policy",
        "description": "Create a duplicate of a policy",
        "operationId": "EventPipelinePolicyService_DuplicateEventPipelinePolicy",
        "requestBody": {
          "$ref": "#/components/requestBodies/EventPipelinePolicyImportArgs"
        },
        "responses": {
          "200": {
            "description": "The duplicated model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelinePolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/import": {
      "post": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Import Event Pipeline Policy",
        "description": "Import a policy",
        "operationId": "EventPipelinePolicyService_ImportEventPipelinePolicy",
        "requestBody": {
          "$ref": "#/components/requestBodies/EventPipelinePolicyImportArgs"
        },
        "responses": {
          "200": {
            "description": "The imported policy model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelinePolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{id}/order": {
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Update Event Pipeline Policy Sort Order",
        "description": "Update the sort order of a policy",
        "operationId": "EventPipelinePolicyService_UpdateEventPipelinePolicySortOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelinePolicySortOrderUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "updated policy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelinePolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-policy/{id}/activate": {
      "put": {
        "tags": [
          "EventPipelinePolicy"
        ],
        "summary": "Activate Event Pipeline Policy",
        "description": "Activate a specific policy",
        "operationId": "EventPipelinePolicyService_ActivateEventPipelinePolicy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Policy ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventPipelinePolicyActivateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "boolean indicating success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-settings/task/list": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "Get Event Pipeline Tasks",
        "description": "Get all tasks",
        "operationId": "EventPipelineSettingsService_GetEventPipelineTasks",
        "parameters": [
          {
            "name": "filter.eventActionId",
            "in": "query",
            "description": "EventActionId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged list of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEventPipelineTask"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-settings/task-settings/list/{id}": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "Get Event Pipeline Task Settings",
        "description": "Returns a list of all pipeline task settings",
        "operationId": "EventPipelineSettingsService_GetEventPipelineTaskSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Task ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pipeline task settings",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Pipeline task settings",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelineTaskSettingMapSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-settings/filter-settings/list/{id}": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "Get Event Pipeline Filter Settings",
        "description": "Get all filter settings for a specific pipeline",
        "operationId": "EventPipelineSettingsService_GetEventPipelineFilterSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline Filter ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "filter settings",
            "content": {
              "application/json": {
                "schema": {
                  "description": "filter settings",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelineFilterSettingMapSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-settings/tasks/options": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "Get Pipeline Task Options",
        "description": "Get all available options for tasks",
        "operationId": "EventPipelineSettingsService_GetPipelineTaskOptions",
        "parameters": [
          {
            "name": "eventEntityTypeId",
            "in": "query",
            "description": "eventEntityTypeId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of task options",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of task options",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelineTaskSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline-settings/filter/options": {
      "get": {
        "tags": [
          "EventPipelineSettings"
        ],
        "summary": "Get Pipeline Filter Options",
        "description": "Get all the available filter options",
        "operationId": "EventPipelineSettingsService_GetPipelineFilterOptions",
        "parameters": [
          {
            "name": "eventEntityTypeId",
            "in": "query",
            "description": "eventEntityTypeId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filter options",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of filter options",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelineFilterSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/{id}/trigger": {
      "get": {
        "tags": [
          "EventPipelineTrigger"
        ],
        "summary": "Get the triggers for an Event Pipeline",
        "description": "Returns the triggers for the Event Pipeline that has the provided ID",
        "operationId": "EventPipelineTriggerService_GetEventPipelineTriggers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event Pipeline ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Event Pipeline Triggers",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The list of Event Pipeline Triggers",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelineTriggerSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/trigger/stub": {
      "get": {
        "tags": [
          "EventPipelineTrigger"
        ],
        "summary": "Stub an Event Pipeline Trigger",
        "description": "Creates an empty Event Pipeline Trigger to be populated",
        "operationId": "EventPipelineTriggerService_GetEventPipelineStub",
        "responses": {
          "200": {
            "description": "The empty Event Pipeline Trigger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventPipelineTrigger"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-pipeline/trigger/options": {
      "get": {
        "tags": [
          "EventPipelineTrigger"
        ],
        "summary": "Get Pipeline Trigger Options",
        "description": "returns all available pipeline trigger options for a specific entity type",
        "operationId": "EventPipelineTriggerService_GetEventPipelineTriggerOptions",
        "parameters": [
          {
            "name": "eventEntityTypeId",
            "in": "query",
            "description": "eventEntityTypeId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of triggers",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of triggers",
                  "items": {
                    "$ref": "#/components/schemas/EventPipelineTriggerSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-subscriptions/stub": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Get an empty event subscription",
        "description": "Returns the empty event subscription",
        "operationId": "EventSubscriptionsService_GetSubscriptionStub",
        "responses": {
          "200": {
            "description": "An empty event subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionStubViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-subscriptions/event-types": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Get an Event Subscription Types and Actions",
        "description": "Returns the array of Event Subscription Types and Actions",
        "operationId": "EventSubscriptionsService_GetSubscriptionEntityTypes",
        "responses": {
          "200": {
            "description": "The Event Subscription Types and Actions View",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The Event Subscription Types and Actions View",
                  "items": {
                    "$ref": "#/components/schemas/EntityTypeModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-subscriptions": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Search event subscriptions",
        "description": "Search, filter, sort, and page event subscriptions",
        "operationId": "EventSubscriptionsService_SearchEventSubscriptions",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "event subscriptions results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfEventSubscriptionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Create event subscription",
        "description": "Create a new event subscription",
        "operationId": "EventSubscriptionsService_CreateEventSubscription",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Details for a specific event subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/event-subscriptions/{eventSubscriptionId}": {
      "get": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "event subscription",
        "description": "Details for a specific event subscription",
        "operationId": "EventSubscriptionsService_GetEventSubscription",
        "parameters": [
          {
            "name": "eventSubscriptionId",
            "in": "path",
            "description": "eventSubscriptionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details for a specific event subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "EventSubscriptions"
        ],
        "summary": "Update event subscription",
        "description": "Update an event subscription",
        "operationId": "EventSubscriptionsService_UpdateEventSubscription",
        "parameters": [
          {
            "name": "eventSubscriptionId",
            "in": "path",
            "description": "eventSubscriptionId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSubscriptionUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Details for a specific event subscription",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventSubscriptionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/extended-fields/regex/{secretId}": {
      "get": {
        "tags": [
          "ExtendedFields"
        ],
        "summary": "Get Extended Regex values by Secret",
        "description": "Retrieve Extended Regex values for a Secret",
        "operationId": "ExtendedFieldsService_GetRegexBySecret",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Regex Values Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegexValuesSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folder-permissions/{id}": {
      "get": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Get Folder Permission",
        "description": "Get a single folder permission by ID",
        "operationId": "FolderPermissionsService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive folder permissions in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder permission ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Update Folder Permission",
        "description": "Update a single folder permission by ID",
        "operationId": "FolderPermissionsService_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder permission ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderPermissionUpdateArgs"
              }
            }
          },
          "description": "Folder permission update options"
        },
        "responses": {
          "200": {
            "description": "Folder permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Delete Folder Permission",
        "description": "Delete a folder permission by ID",
        "operationId": "FolderPermissionsService_Delete",
        "parameters": [
          {
            "name": "breakInheritance",
            "in": "query",
            "description": "Include to remove permission inheritance",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder permission ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folder-permissions": {
      "get": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Search Folder Permissions",
        "description": "Search, filter, sort, and page folder permissions",
        "operationId": "FolderPermissionsService_Search",
        "parameters": [
          {
            "name": "filter.excludeEditors",
            "in": "query",
            "description": "If populated with true, will filter editors from results. Will default to false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.excludeOwners",
            "in": "query",
            "description": "If populated with true, will filter owners from results. Will default to false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.excludeViewers",
            "in": "query",
            "description": "If populated with true, will filter viewers from results. Will default to false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "Limit results to a certain folder",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Limit results to a certain group",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "Limit results to a certain user",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder permission search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfFolderPermissionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Create Folder Permission",
        "description": "Create a new folder permission",
        "operationId": "FolderPermissionsService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderPermissionCreateArgs"
              }
            }
          },
          "description": "Folder permission creation options"
        },
        "responses": {
          "200": {
            "description": "Folder permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folder-permissions/stub": {
      "get": {
        "tags": [
          "FolderPermissions"
        ],
        "summary": "Get Folder Permission Stub",
        "description": "Return the default values for a new folder permission",
        "operationId": "FolderPermissionsService_Stub",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "description": "Folder for which to generate a permission stub",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folders/{id}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get Folder",
        "description": "Get a single folder by ID",
        "operationId": "FoldersService_Get",
        "parameters": [
          {
            "name": "getAllChildren",
            "in": "query",
            "description": "Whether to retrieve all child folders of the requested folder",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeAssociatedTemplates",
            "in": "query",
            "description": "Whether to list associated secret templates",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "folderPath",
            "in": "query",
            "description": "A full path to a folder including the folder name can be passed as a query string parameter when the folder ID is set to 0.  This will lookup the folder ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Folders"
        ],
        "summary": "Update Folder",
        "description": "Update a single secret folder by ID",
        "operationId": "FoldersService_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderUpdateArgs"
              }
            }
          },
          "description": "Folder update options"
        },
        "responses": {
          "200": {
            "description": "Folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Delete Folder",
        "description": "Delete a folder by ID",
        "operationId": "FoldersService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folders/{id}/templates/{templateId}": {
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Disassociate Template from Folder",
        "description": "Remove the ability to create secrets based on the template in this folder. If the folder has no associated templates, then any template can be used.",
        "operationId": "FoldersService_DissassociateTemplateToFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folder/{id}/pinned": {
      "delete": {
        "tags": [
          "Folders"
        ],
        "summary": "Unpin Folder",
        "description": "Unpin a folder for the current user.  This will remove any settings for this user for this pinned folder.  If not pinned already it will still return success.",
        "operationId": "FoldersService_UnpinFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnpinFolderResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Pin Folder",
        "description": "Pin a single folder or update settings for the pinned folder for the current user",
        "operationId": "FoldersService_PinFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinFolderArgs"
              }
            }
          },
          "description": "Pin Folder Args"
        },
        "responses": {
          "200": {
            "description": "Success Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinFolderResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folders": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Search Folders",
        "description": "Search, filter, sort, and page secret folders",
        "operationId": "FoldersService_Search",
        "parameters": [
          {
            "name": "filter.folderTypeId",
            "in": "query",
            "description": "The icon to display for the folder. Depricated in latest UI. Use 1 when setting this value.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.onlyIncludeRootFolders",
            "in": "query",
            "description": "When true only root folders will be returned and ParentFolderId will be ignored",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.parentFolderId",
            "in": "query",
            "description": "Only returns folders that are children of the specified folder.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by Owner, Edit, AddSecret, View folder permission. Default is View.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search term to match against folder names. Search returns any folder where the search term is contained in the folder name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfFolderSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Create Folder",
        "description": "Create a new secret folder",
        "operationId": "FoldersService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderCreateArgs"
              }
            }
          },
          "description": "Folder creation options"
        },
        "responses": {
          "200": {
            "description": "Folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folders/lookup": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Lookup Folders",
        "description": "Search, filter, sort, and page secret folders, returning only folder ID and name",
        "operationId": "FoldersService_Lookup",
        "parameters": [
          {
            "name": "filter.folderTypeId",
            "in": "query",
            "description": "The icon to display for the folder. Depricated in latest UI. Use 1 when setting this value.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.onlyIncludeRootFolders",
            "in": "query",
            "description": "When true only root folders will be returned and ParentFolderId will be ignored",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.parentFolderId",
            "in": "query",
            "description": "Only returns folders that are children of the specified folder.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by Owner, Edit, AddSecret, View folder permission. Default is View.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search term to match against folder names. Search returns any folder where the search term is contained in the folder name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfFolderLookup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folders/stub": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get Folder Stub",
        "description": "Return the default values for a new secret folder",
        "operationId": "FoldersService_Stub",
        "responses": {
          "200": {
            "description": "Folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folders/{id}/audit": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Folder Audits",
        "description": "Retrieve a list of audits for folder by ID.",
        "operationId": "FoldersService_GetAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Specify paging and sorting options for querying records and returning results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfFolderAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folder-details/{id}": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get Folder Details",
        "description": "Get Folder Details",
        "operationId": "FoldersService_GetFolderDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "returnEmptyInsteadOfNoAccessException",
            "in": "query",
            "description": "returnEmptyInsteadOfNoAccessException",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folder Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDetailViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folders/pinned": {
      "get": {
        "tags": [
          "Folders"
        ],
        "summary": "Get Pinned Folders",
        "description": "Return a list of folders that the current user has pinned",
        "operationId": "FoldersService_GetPinnedFolders",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pinned folders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfPinnedFolderModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folder/{id}": {
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Patch a Folder",
        "description": "Patch a single secret folder by ID",
        "operationId": "FoldersService_PatchFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderPatchArgs"
              }
            }
          },
          "description": "Folder update options"
        },
        "responses": {
          "200": {
            "description": "Folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderBasicModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folder/{folderId}/permissions": {
      "patch": {
        "tags": [
          "Folders"
        ],
        "summary": "Patch Folder Permissions",
        "description": "Add, delete, and update some permissions as opposed to a full replace of all permissions for a folder",
        "operationId": "FoldersService_PatchFolderPermissions",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderPermissionsPatchArgs"
              }
            }
          },
          "description": "Folder permission update options"
        },
        "responses": {
          "200": {
            "description": "Success result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderPermissionsPatchResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/folders/{id}/templates": {
      "post": {
        "tags": [
          "Folders"
        ],
        "summary": "Associate Template to Folder",
        "description": "Allow secrets based on the template to be created in the folder. If the folder has no associated templates, then any template can be used.",
        "operationId": "FoldersService_AssociateTemplateToFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Folder ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderTemplateArgs"
              }
            }
          },
          "description": "Folder template association options"
        },
        "responses": {
          "200": {
            "description": "Folder object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group",
        "description": "Get a single group by ID",
        "operationId": "GroupsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update Group",
        "description": "Update a single group by ID",
        "operationId": "GroupsService_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateArgs"
              }
            }
          },
          "description": "Group update options"
        },
        "responses": {
          "200": {
            "description": "Group object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete Group",
        "description": "Delete a group by ID",
        "operationId": "GroupsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/{id}/users/{userId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get User In Group",
        "description": "Get a user in a group",
        "operationId": "GroupsService_GetGroupUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User group membership object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove User From Group",
        "description": "Remove a user from a group",
        "operationId": "GroupsService_RemoveUserFromGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/{id}/roles": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets roles for group",
        "description": "Gets roles for group",
        "operationId": "GroupsService_GetRoles",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfRoleSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update all roles on group",
        "description": "Update all roles on group",
        "operationId": "GroupsService_UpdateUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RoleAssignments"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add roles to existing group",
        "description": "Add roles to existing group",
        "operationId": "GroupsService_CreateUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RoleAssignments"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove roles from existing group",
        "description": "Remove roles from existing group",
        "operationId": "GroupsService_DeleteUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RoleRemovals"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Search Groups",
        "description": "Search, filter, sort, and page groups",
        "operationId": "GroupsService_Search",
        "parameters": [
          {
            "name": "filter.domainId",
            "in": "query",
            "description": "Active Directory domain ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.excludeInboxRuleIdSubscribers",
            "in": "query",
            "description": "Do not include any groups already subscribed this inbox notification rule",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive groups in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.limitToViewableGroups",
            "in": "query",
            "description": "Limit groups to groups that current user can view details of",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.platformOnly",
            "in": "query",
            "description": "Limit groups to only Platform groups",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfGroupSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create Group",
        "description": "Create a new group",
        "operationId": "GroupsService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateArgs"
              }
            }
          },
          "description": "Group creation options"
        },
        "responses": {
          "200": {
            "description": "Group object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/lookup": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Lookup Groups",
        "description": "Search, filter, sort, and page groups, returning only group ID and name",
        "operationId": "GroupsService_Lookup",
        "parameters": [
          {
            "name": "filter.domainId",
            "in": "query",
            "description": "Active Directory domain ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.excludeInboxRuleIdSubscribers",
            "in": "query",
            "description": "Do not include any groups already subscribed this inbox notification rule",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive groups in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.limitToViewableGroups",
            "in": "query",
            "description": "Limit groups to groups that current user can view details of",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.platformOnly",
            "in": "query",
            "description": "Limit groups to only Platform groups",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfGroupLookup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/stub": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Stub",
        "description": "Return the default values for a new group",
        "operationId": "GroupsService_Stub",
        "responses": {
          "200": {
            "description": "Group object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/{id}/users": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Membership",
        "description": "Get group membership will return all of the users that are assigned as members of the group",
        "operationId": "GroupsService_GetGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactiveUsersForGroup",
            "in": "query",
            "description": "Whether to include inactive users in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.userDomainId",
            "in": "query",
            "description": "Filter only users in a specific domain",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group membership results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfGroupUserSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Add User To Group",
        "description": "Add a user to a group",
        "operationId": "GroupsService_AddUserToGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUserCreateArgs"
              }
            }
          },
          "description": "Group user add options"
        },
        "responses": {
          "200": {
            "description": "User group membership object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Patch Group Membership",
        "description": "Update group memberships by sending a list of add and remove IDs",
        "operationId": "GroupsService_PatchGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMembershipPatchModel"
              }
            }
          },
          "description": "Group update options"
        },
        "responses": {
          "200": {
            "description": "Group model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembershipPatchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/audit": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get group audits",
        "description": "Audit records for group assignments",
        "operationId": "GroupsService_GetAuditGroupAssignments",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit records for group assignments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfAdminAuditItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/{id}/users-lookup": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get Group Users for display",
        "description": "Get Group Users for display by group id",
        "operationId": "GroupsService_GetGroupUsersLookup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupUsersLookupViewModel object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupUsersLookupViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/{groupId}": {
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "Patch Group",
        "description": "Patch a single group by ID",
        "operationId": "GroupsService_PatchGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupPatchArgs"
              }
            }
          },
          "description": "Group update options"
        },
        "responses": {
          "200": {
            "description": "Group object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/{groupId}/users": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update all members of a group",
        "description": "Update all members of a group",
        "operationId": "GroupsService_UpdateGroupMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMemberAssignmentRequest"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembershipAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/healthcheck": {
      "get": {
        "tags": [
          "HealthCheck"
        ],
        "summary": "Health Check",
        "description": "Returns the current health check of the system",
        "operationId": "HealthCheckService_Get",
        "responses": {
          "200": {
            "description": "The heatlth status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/hsm-configuration/audit": {
      "get": {
        "tags": [
          "HsmConfiguration"
        ],
        "summary": "Audit of hsm configuration changes",
        "description": "Audit of hsm configuration changes",
        "operationId": "HsmConfigurationService_GetHsmConfigurationAudit",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hsm Configuration audit items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfHsmConfigurationAuditViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/templates/resources/{id}": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get inbox resource",
        "description": "Get inbox resource",
        "operationId": "InboxService_GetResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Resource Data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxResourceData"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Inbox"
        ],
        "summary": "Delete inbox resource",
        "description": "Delete inbox resource",
        "operationId": "InboxService_DeleteResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxResourceDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/messages/{messageTypeId?}": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Search inbox messages",
        "description": "Search, filter, sort, and page inbox messages",
        "operationId": "InboxService_SearchInboxMessages",
        "parameters": [
          {
            "name": "messageTypeId",
            "in": "query",
            "description": "messageTypeId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "EndDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "messageDataFilters[0].displayValue",
            "in": "query",
            "description": "Search specifically display values",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageDataFilters[0].inboxDataName",
            "in": "query",
            "description": "Which field is being searched",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageDataFilters[0].valueBool",
            "in": "query",
            "description": "Search specifically for boolean values",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "messageDataFilters[0].valueDateTimeEnd",
            "in": "query",
            "description": "Search specifically for date values less than this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "messageDataFilters[0].valueDateTimeStart",
            "in": "query",
            "description": "Search specifically for date values greater than this date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "messageDataFilters[0].valueInt",
            "in": "query",
            "description": "Search specifically for int values",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "messageDataFilters[0].valueString",
            "in": "query",
            "description": "Search specifically for string values",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.messageTypeIds",
            "in": "query",
            "description": "MessageTypeIds",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.readStatusFilter",
            "in": "query",
            "description": "ReadStatusFilter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "StartDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Message results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfInboxMessageSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/message/{messageId}": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get Inbox Message by Id",
        "description": "Gets the message summary by id",
        "operationId": "InboxService_GetInboxMessage",
        "parameters": [
          {
            "name": "messageId",
            "in": "path",
            "description": "messageId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxMessageSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/data-names": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Inbox Message Type Data Names",
        "description": "Get the data names by type for inbox messages",
        "operationId": "InboxService_GetInboxMessageDataNames",
        "parameters": [
          {
            "name": "messageTypeIds",
            "in": "query",
            "description": "messageTypeIds",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Message results",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Inbox Message results",
                  "items": {
                    "$ref": "#/components/schemas/InboxData"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/templates": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get inbox templates",
        "description": "Get, sort, and page inbox templates",
        "operationId": "InboxService_GetInboxTemplates",
        "parameters": [
          {
            "name": "filter.templateType",
            "in": "query",
            "description": "Only return templates of this type.  When null returns all types",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Template results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfInboxTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Create inbox template",
        "description": "Create inbox template",
        "operationId": "InboxService_CreateInboxTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxTemplateCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Template Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/templates/{templateId}": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get inbox template",
        "description": "Get inbox template",
        "operationId": "InboxService_GetInboxTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Template Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Inbox"
        ],
        "summary": "Patch inbox template",
        "description": "Patch inbox template",
        "operationId": "InboxService_PatchInboxTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxTemplateUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Template Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/templates/{templateId}/locales/{localeId}": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get inbox template locale",
        "description": "Get inbox template locale",
        "operationId": "InboxService_GetInboxTemplateLocale",
        "parameters": [
          {
            "name": "localeId",
            "in": "path",
            "description": "localeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Template Locale",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxTemplateLocaleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Inbox"
        ],
        "summary": "Patch inbox template locale",
        "description": "Patch inbox template locale",
        "operationId": "InboxService_PatchInboxTemplateLocale",
        "parameters": [
          {
            "name": "localeId",
            "in": "path",
            "description": "localeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxTemplateLocaleUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Template Locale",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxTemplateLocaleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/message-types": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get inbox message types",
        "description": "Get inbox message types",
        "operationId": "InboxService_GetInboxMessageTypes",
        "parameters": [
          {
            "name": "includeCurrentUserMessageCounts",
            "in": "query",
            "description": "When true the number of each message type the current user has will be added to the response and only message types with a count > 0 will be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message Types",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Message Types",
                  "items": {
                    "$ref": "#/components/schemas/InboxMessageTypeSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/templates/resources": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get inbox resources",
        "description": "Get, sort, and page inbox resources",
        "operationId": "InboxService_SearchResources",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Resource Results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfInboxResourceSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Inbox"
        ],
        "summary": "Upload an embedded resource",
        "description": "Upload an embedded resource",
        "operationId": "InboxService_UploadResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxResourceUploadArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "True or an error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/notifications": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Get inbox notifications",
        "description": "Get inbox notifications",
        "operationId": "InboxService_GetNotifications",
        "parameters": [
          {
            "name": "includeArchived",
            "in": "query",
            "description": "includeArchived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "markAlertsAsViewed",
            "in": "query",
            "description": "markAlertsAsViewed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications with returned count and indication of new notifications",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertNotificationsWrapper"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/notifications/status": {
      "get": {
        "tags": [
          "Inbox"
        ],
        "summary": "Notification Status",
        "description": "Get the notification status",
        "operationId": "InboxService_GetNotificationsStatus",
        "responses": {
          "200": {
            "description": "Indication of whether the system has alerts and the last checked time",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/send-test-message": {
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Send Test Inbox Message",
        "description": "Send a test message to another user that will appear in their inbox.",
        "operationId": "InboxService_SendTestMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxTestMessageArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Success if the message was published for processing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxTestMessageResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/templates/copy": {
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Copy an  inbox template",
        "description": "Create a copy of an inbox template",
        "operationId": "InboxService_CopyInboxTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxTemplateCopyArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Template Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/templates/template-locale": {
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Create inbox template locale",
        "description": "Create inbox template locale",
        "operationId": "InboxService_CreateInboxTemplateLocale",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxTemplateLocaleCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Template Locale",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxTemplateLocaleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox/update-read": {
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Mark messages read or unread",
        "description": "Mark messages read or unread",
        "operationId": "InboxService_UpdateMessageReadStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxMessageSetMessageReadStatusArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "True or an error",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/notifications/notification-read": {
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Mark alert notification as read",
        "description": "Mark alert notification as read",
        "operationId": "InboxService_MarkAlertNotificationRead",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertNotificationReadEventArgs"
              }
            }
          },
          "description": "model"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/notifications/notification-unread": {
      "post": {
        "tags": [
          "Inbox"
        ],
        "summary": "Mark alert notification as unread",
        "description": "Mark alert notification as unread",
        "operationId": "InboxService_MarkAlertNotificationUnread",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertNotificationUnreadEventArgs"
              }
            }
          },
          "description": "model"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/{ruleId}/subscribe": {
      "post": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Subscribe Current User",
        "description": "Subscribe the current user from the rule",
        "operationId": "InboxRulesService_SubscribeCurrentUserToRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response if successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleSubscriptionUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Unsubscribe current user",
        "description": "Unsubscribe the current user from the rule",
        "operationId": "InboxRulesService_UnsubscribeCurrentUserFromRule",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response if successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleSubscriptionUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules": {
      "get": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Search inbox rules",
        "description": "Search, filter, sort, and page inbox rules",
        "operationId": "InboxRulesService_SearchInboxRules",
        "parameters": [
          {
            "name": "filter.includeCurrentUserSubscriptionStatus",
            "in": "query",
            "description": "Return the subscription status of the current user whether subscribed directly or via a group.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include inactive rules.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.isImmediate",
            "in": "query",
            "description": "Only return rules that run immediately or on a schedule, depending on value.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.messageId",
            "in": "query",
            "description": "Return all rules that will apply to this message id, does not account for time or schedule.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.messageTypeId",
            "in": "query",
            "description": "Only return rules that apply to this message type.  If a MessageId is passed then this value will be replaced with that message's MessageTypeId.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ruleConditionFilters[0].displayValue",
            "in": "query",
            "description": "Search specifically display values",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleConditionFilters[0].inboxDataId",
            "in": "query",
            "description": "Which field is being searched.  This value can be null if InboxDataName is passed instead.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ruleConditionFilters[0].inboxDataName",
            "in": "query",
            "description": "Which field is being searched.  If InboxDataId is passed this value is ignored.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ruleConditionFilters[0].valueBool",
            "in": "query",
            "description": "Search specifically for boolean values",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ruleConditionFilters[0].valueInt",
            "in": "query",
            "description": "Search specifically for int values",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ruleConditionFilters[0].valueString",
            "in": "query",
            "description": "Search specifically for string values with a partial match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Rules results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfInboxRuleSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Create Inbox Rule",
        "description": "Create a new inbox rule",
        "operationId": "InboxRulesService_CreateInboxRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxRuleCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/{id}": {
      "get": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Get Inbox Rule",
        "description": "Retrieve inbox rule by Id",
        "operationId": "InboxRulesService_GetInboxRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Patch Inbox Rule",
        "description": "Change properties of an inbox rule",
        "operationId": "InboxRulesService_PatchInboxRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxRulePatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/stub": {
      "get": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Get Inbox Rule Stub",
        "description": "Retrieve an empty inbox rule",
        "operationId": "InboxRulesService_GetInboxRuleStub",
        "responses": {
          "200": {
            "description": "Inbox Rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/conditions/{id}": {
      "get": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Get Inbox Rule Condition",
        "description": "Retrieve inbox rule condition by Id",
        "operationId": "InboxRulesService_GetInboxRuleCondition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Rule Condition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleConditionDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/{id}/conditions": {
      "get": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Search Inbox Rule Conditions",
        "description": "Search Inbox Rule Conditions",
        "operationId": "InboxRulesService_SearchInboxRuleConditions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Rule Conditions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleConditionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/{inboxRuleId}/subscribers": {
      "get": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Search inbox rule subscribers",
        "description": "Search, filter, sort, and page inbox subscribers",
        "operationId": "InboxRulesService_SearchSubscribers",
        "parameters": [
          {
            "name": "inboxRuleId",
            "in": "path",
            "description": "inboxRuleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.accountTypes",
            "in": "query",
            "description": "AccountTypes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.onlyIncludeUnsubscribableUsers",
            "in": "query",
            "description": "This will ignore most other filters and return only User accounts that belong to groups that are subscribed.  The results will not include users that are directly subscribed as they must be removed from the subscription, not unsubscribed.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text to filter users from the unsubscribable users",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.status",
            "in": "query",
            "description": "Status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Rule Subscriber results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfInboxRuleSubscriberSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/{inboxRuleId}/action-log": {
      "get": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Get Inbox Rule Logs By Inbox Rule Id",
        "description": "Get Inbox Rule Logs By Inbox Rule Id",
        "operationId": "InboxRulesService_SearchLog",
        "parameters": [
          {
            "name": "inboxRuleId",
            "in": "path",
            "description": "inboxRuleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "EndDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter.ruleActionStatus",
            "in": "query",
            "description": "RuleActionStatus",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "StartDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbox Rule Log results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfInboxRuleLogSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/{id}/actions": {
      "patch": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Patch Inbox Rule Actions",
        "description": "Change Inbox Rule Actions",
        "operationId": "InboxRulesService_PatchInboxRuleActions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxRuleActionPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/{ruleId}/subscribers": {
      "patch": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Patch Inbox Rule Subscribers",
        "description": "Add, Remove, or unsubscribe groups, users, and external emails to a specific rule",
        "operationId": "InboxRulesService_PatchInboxRuleSubscribers",
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "description": "ruleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxRuleSubscribersPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleSubscriberUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/copy": {
      "post": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Copy Inbox Rule",
        "description": "Copy an inbox rule",
        "operationId": "InboxRulesService_CopyInboxRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxRuleCopyArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/inbox-rules/{inboxRuleId}/conditions": {
      "put": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Update Inbox Rule Condition",
        "description": "Update inbox rule condition",
        "operationId": "InboxRulesService_UpdateInboxRuleCondition",
        "parameters": [
          {
            "name": "inboxRuleId",
            "in": "path",
            "description": "inboxRuleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxRuleConditionUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Rule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "InboxRules"
        ],
        "summary": "Create Inbox Rule Condition",
        "description": "Create a new inbox rule condition",
        "operationId": "InboxRulesService_CreateInboxRuleCondition",
        "parameters": [
          {
            "name": "inboxRuleId",
            "in": "path",
            "description": "inboxRuleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboxRuleConditionCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Inbox Rule Condition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboxRuleConditionDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ipaddress-restrictions/{id}": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Get IP Address restriction",
        "description": "Get a single IP Address restriction by ID",
        "operationId": "IpAddressRestrictionsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP Address restriction object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Update IP Address restriction",
        "description": "Update a new IP Address restriction",
        "operationId": "IpAddressRestrictionsService_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpAddressRestrictionUpdateArgs"
              }
            }
          },
          "description": "IP Address restriction"
        },
        "responses": {
          "200": {
            "description": "IP Address restriction object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Delete IP Address restriction",
        "description": "Delete an IP Address restriction by ID",
        "operationId": "IpAddressRestrictionsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ipaddress-restrictions/{id}/groups/{groupId}": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Get Group IP Address restriction",
        "description": "Get a single Group IP Address restriction by restriction and group ID",
        "operationId": "IpAddressRestrictionsService_GetGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group and IP Address restriction object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupIpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Delete Group IP Address restriction",
        "description": "Delete a Group IP Address restriction by ID",
        "operationId": "IpAddressRestrictionsService_DeleteGroupIpRestriction",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ipaddress-restrictions/{id}/users/{userId}": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Get User IP Address restriction",
        "description": "Get a single User IP Address restriction by restriction and user ID",
        "operationId": "IpAddressRestrictionsService_GetUserIpRestriction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User and IP Address restriction object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Delete User IP Address restriction",
        "description": "Delete a User IP Address restriction by ID",
        "operationId": "IpAddressRestrictionsService_DeleteUserIpRestriction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ipaddress-restrictions": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search IP Address restrictions",
        "description": "Search, filter, sort, and page IP Address restrictions",
        "operationId": "IpAddressRestrictionsService_Search",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IP Address restriction search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfIpAddressRestrictionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Create IP Address restriction",
        "description": "Create a new IP Address restriction",
        "operationId": "IpAddressRestrictionsService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpAddressRestrictionCreateArgs"
              }
            }
          },
          "description": "IP Address restriction"
        },
        "responses": {
          "200": {
            "description": "IP Address restriction object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ipaddress-restrictions/{id}/groups": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search groups assigned to an IP Address restriction",
        "description": "Search, filter, sort, and page groups assigned to an IP Address restriction",
        "operationId": "IpAddressRestrictionsService_SearchGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group and IP Address restriction search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfGroupIpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Create Group IP Address restriction",
        "description": "Create a new Group IP Address restriction",
        "operationId": "IpAddressRestrictionsService_CreateGroupIpRestriction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupIpAddressRestrictionCreateArgs"
              }
            }
          },
          "description": "Group IP Address restriction"
        },
        "responses": {
          "200": {
            "description": "Group IP Address restriction object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupIpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/groups/{id}/ipaddress-restrictions": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search IP Address restrictions assigned to a group",
        "description": "Search, filter, sort, and page IP Address restriction assigned to a group",
        "operationId": "IpAddressRestrictionsService_GetAllByGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group and IP Address restriction search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfGroupIpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ipaddress-restrictions/{id}/users": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search users assigned to an IP Address restriction",
        "description": "Search, filter, sort, and page users assigned to an IP Address restriction",
        "operationId": "IpAddressRestrictionsService_SearchUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User and IP Address restriction search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserIpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Create User IP Address restriction",
        "description": "Create a new User IP Address restriction",
        "operationId": "IpAddressRestrictionsService_CreateUserIpRestriction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "IP Address restriction ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserIpAddressRestrictionCreateArgs"
              }
            }
          },
          "description": "User IP Address restriction"
        },
        "responses": {
          "200": {
            "description": "User IP Address restriction object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{id}/ipaddress-restrictions": {
      "get": {
        "tags": [
          "IpAddressRestrictions"
        ],
        "summary": "Search IP Address restrictions assigned to a user",
        "description": "Search, filter, sort, and page IP Address restriction assigned to a user",
        "operationId": "IpAddressRestrictionsService_GetAllByUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User and IP Address restriction search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserIpAddressRestrictionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/jumpbox-route/{id}/level/{order}": {
      "delete": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Delete JumpboxRoute Level",
        "description": "Delete a Jumpbox Route Level on a Jumpbox Route",
        "operationId": "JumpboxRouteService_DeleteJumpboxRouteLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "order",
            "in": "path",
            "description": "order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Edit JumpboxRoute Level",
        "description": "Edit a Jumpbox Route Level",
        "operationId": "JumpboxRouteService_PatchJumpboxRouteLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "order",
            "in": "path",
            "description": "order",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JumpboxRouteLevelPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "JumpboxRouteLevel Summary Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JumpboxRouteLevelSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/jumpbox-route/search": {
      "get": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Search JumpboxRoutes",
        "description": "Search, filter, sort, and page Jumpbox routes",
        "operationId": "JumpboxRouteService_Search",
        "parameters": [
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JumpboxRoute search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfJumpboxRouteSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/jumpbox-route/user": {
      "get": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Get Jumpbox Routes visible to a user",
        "description": "Get an array of Jumpbox Routes that are visible to a specific user",
        "operationId": "JumpboxRouteService_GetAllRoutesForUser",
        "parameters": [
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jumpbox Route Summary Model paging object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfJumpboxRouteSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/jumpbox-route/{id}": {
      "get": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Find JumpboxRoute",
        "description": "Find a Jumpbox Route by Id",
        "operationId": "JumpboxRouteService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Jumpbox Route Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JumpboxRoute detail object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JumpboxRouteModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Udpate a Jumpbox Route",
        "description": "Update an existing Jumpbox Route using the existing Jumpbox Route's ID",
        "operationId": "JumpboxRouteService_UpdateJumpboxRoute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JumpboxRoutePatchArgs"
              }
            }
          },
          "description": "jumpboxRouteUpdateArgs"
        },
        "responses": {
          "200": {
            "description": "JumpboxRoute Summary Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JumpboxRouteSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/jumpbox-route/{id}/audit": {
      "get": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Get Jumpbox Route Audits",
        "description": "Retrieve audits for the Jumpbox Routes",
        "operationId": "JumpboxRouteService_GetJumpboxAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged list of audit entries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfJumpboxRouteAuditModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/jumpbox-route/{id}/level": {
      "get": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Find Levels for a Jumpbox Route",
        "description": "Find all Levels for a Jumpbox Route by Jumpbox Route Id",
        "operationId": "JumpboxRouteService_GetAllLevels",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Jumpbox Route Id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jumpbox route Level View Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfJumpboxRouteLevelViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Create JumpboxRoute Level",
        "description": "Create a new Jumpbox Route Level",
        "operationId": "JumpboxRouteService_AddJumpboxRouteLevel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JumpboxRouteLevelCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "JumpboxRouteLevel Summary Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JumpboxRouteLevelSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/jumpbox-route": {
      "post": {
        "tags": [
          "JumpboxRoute"
        ],
        "summary": "Create JumpboxRoute",
        "description": "Create a new Jumpbox Route",
        "operationId": "JumpboxRouteService_CreatejumpboxRoute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JumpboxRouteCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "JumpboxRoute Summary Object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JumpboxRouteSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/key-management": {
      "get": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Get Key Management Configuration",
        "description": "Get the current or previous Key Management configuration",
        "operationId": "KeyManagementService_Get",
        "responses": {
          "200": {
            "description": "KeyManagementConfigModel object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyManagementConfigModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Update Key Management Configuration",
        "description": "Update the Key Management configuration",
        "operationId": "KeyManagementService_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyManagementConfigUpdateArgs"
              }
            }
          },
          "description": "Key Management Config update options"
        },
        "responses": {
          "200": {
            "description": "KeyManagementConfigModel object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyManagementConfigModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/key-management/stub": {
      "get": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Get Key Management Config Stub",
        "description": "Return the default values for a new Key Management Config",
        "operationId": "KeyManagementService_Stub",
        "responses": {
          "200": {
            "description": "KeyManagementConfigModel object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyManagementConfigModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/key-management/mekrotationinfo": {
      "get": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Get Master Encryption Key Rotation Status Info",
        "description": "Gets the status of Master Encryption Key Rotation",
        "operationId": "KeyManagementService_GetMasterEncryptionKeyRotationInfo",
        "responses": {
          "200": {
            "description": "Status of Master Encryption Key Rotation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MEKRotationInfoResponseViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/key-management/audit": {
      "get": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Get a Master Encryption Key Rotation Audit List",
        "description": "Search, filter, sort, and page Master Encryption Key Rotation Audits.",
        "operationId": "KeyManagementService_SearchKeyRotationAudit",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.action",
            "in": "query",
            "description": "Action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.date",
            "in": "query",
            "description": "Date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "UserId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of Master Encryption Key Rotation Audits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfMasterEncryptionKeyRotationInfoAuditViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/key-management/audit/users": {
      "get": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Get a List of Unique Users from the Master Encryption Key Rotation Audit List",
        "description": "Get a List of Unique Users from the Master Encryption Key Rotation Audit List",
        "operationId": "KeyManagementService_GetKeyRotationAuditUsers",
        "responses": {
          "200": {
            "description": "A list of unique users from the Master Encryption Key Rotation Audits.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of unique users from the Master Encryption Key Rotation Audits.",
                  "items": {
                    "$ref": "#/components/schemas/MasterEncryptionKeyRotationInfoAuditUserViewModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/key-management/startmekrotation": {
      "put": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Rotate Master Encryption Key",
        "description": "Rotates the Master Encryption Key and marks data for rotation",
        "operationId": "KeyManagementService_StartMasterEncryptionKeyRotation",
        "responses": {
          "200": {
            "description": "Whether the Master Encryption Key was rotated and a data rotation request initiated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MEKRotationInfoResponseViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/key-management/retrymekstatus": {
      "put": {
        "tags": [
          "KeyManagement"
        ],
        "summary": "Retry Master Encryption Key Status",
        "description": "Retries Current Status of the Master Encryption Key Process",
        "operationId": "KeyManagementService_RetryMasterEncryptionKeyStatus",
        "responses": {
          "200": {
            "description": "Whether the Master Encryption Key Rotation retry request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MEKRotationInfoResponseViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launcheragents/collections": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Search Launcher Agent Collections",
        "description": "Search, filter, sort, and page Launcher Agent Collections",
        "operationId": "LauncherAgentsService_SearchCollections",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Launcher Agent Collections in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent Collection search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfLauncherAgentCollectionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Create Launcher Agent Collection",
        "description": "Create a new Launcher Agent Collection",
        "operationId": "LauncherAgentsService_CreateCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LauncherAgentCollectionCreateArgs"
              }
            }
          },
          "description": "Launcher Agent Collection creation options"
        },
        "responses": {
          "200": {
            "description": "Launcher Agent Collection object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LauncherAgentCollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launcheragents/collections/stub": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Get Launcher Agent Collection Stub",
        "description": "Return the default values for a new Launcher Agent Collection",
        "operationId": "LauncherAgentsService_Stub",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent Collection object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LauncherAgentCollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launcheragents/collections/{id}": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Get Launcher Agent Collection",
        "description": "Get a single Launcher Agent Collection by ID",
        "operationId": "LauncherAgentsService_GetByCollectionId",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive Launcher Agent Collections in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Launcher Agent Collection ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LauncherAgentCollection object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LauncherAgentCollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Update Launcher Agent Collection",
        "description": "Update a single Launcher Agent Collection by ID",
        "operationId": "LauncherAgentsService_UpdateCollection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Launcher Agent Collection ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LauncherAgentCollectionUpdateArgs"
              }
            }
          },
          "description": "Launcher Agent Collection update options"
        },
        "responses": {
          "200": {
            "description": "Launcher Agent Collection object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LauncherAgentCollectionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launcheragents/issues": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Search Launcher Agents with Issues",
        "description": "Search, filter, sort, and page Launcher Agent with issues",
        "operationId": "LauncherAgentsService_SearchAgentsWithIssues",
        "parameters": [
          {
            "name": "filter.launcherAgentCollectionId",
            "in": "query",
            "description": "LauncherAgentCollectionId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfLauncherAgentSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launcheragents": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Search Launcher Agents",
        "description": "Search, filter, sort, and page Launcher Agent s",
        "operationId": "LauncherAgentsService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.launcherAgentCollectionId",
            "in": "query",
            "description": "LauncherAgentCollectionId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.outOfDate",
            "in": "query",
            "description": "OutOfDate",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Agent  search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfLauncherAgentSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launcheragents/{id}": {
      "get": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Get Launcher Agent ",
        "description": "Get a single Launcher Agent  by ID",
        "operationId": "LauncherAgentsService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive Launcher Agents in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Launcher Agent ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "LauncherAgent object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LauncherAgentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "LauncherAgents"
        ],
        "summary": "Update Launcher Agent ",
        "description": "Update a single Launcher Agent by ID",
        "operationId": "LauncherAgentsService_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Launcher Agent ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LauncherAgentUpdateArgs"
              }
            }
          },
          "description": "Launcher Agent update options"
        },
        "responses": {
          "200": {
            "description": "Launcher Agent object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LauncherAgentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launchers": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Search Launchers",
        "description": "Search, filter, sort, and page launchers",
        "operationId": "LaunchersService_SearchLaunchers",
        "parameters": [
          {
            "name": "filter.application",
            "in": "query",
            "description": "Associated application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive launchers",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfLauncherSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launchers/lookup": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Lookup Launchers",
        "description": "Search, filter, sort, and page launchers, returning only launcher ID and name",
        "operationId": "LaunchersService_Lookup",
        "parameters": [
          {
            "name": "filter.application",
            "in": "query",
            "description": "Associated application",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive launchers",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfLauncherLookup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launchers/{id}": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Get Launcher",
        "description": "Get a single launcher by ID",
        "operationId": "LaunchersService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Launcher ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LauncherModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/launchers/secret": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Get secret launcher details.",
        "description": "Get the details and fields needed for the launchers a secret can use.",
        "operationId": "LaunchersService_SearchLauncherDetailsV2",
        "parameters": [
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "The secret to get launch information about",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret's Launcher details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfLauncherDetailsV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launchers/protocol-handler": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Triggers a download of the Protocol Handler",
        "description": "Triggers a download of the Protocol Handler",
        "operationId": "LaunchersService_TriggerDownload",
        "parameters": [
          {
            "name": "forceMsi",
            "in": "query",
            "description": "forceMsi",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is32Bit",
            "in": "query",
            "description": "is32Bit",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isRDS",
            "in": "query",
            "description": "isRDS",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launchers/prepare/{id}/result": {
      "get": {
        "tags": [
          "Launchers"
        ],
        "summary": "Get Prepare Launcher Result",
        "description": "Get result of prepare Launcher Session request.",
        "operationId": "LaunchersService_LauncherSucceeded",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prepare Launcher Query Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareLauncherQueryResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launchers/secret": {
      "post": {
        "tags": [
          "Launchers"
        ],
        "summary": "Launch a secret.",
        "description": "Launch a the secret using the provided secret id, and required fields.",
        "operationId": "LaunchersService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LaunchSecretArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Launched Secret details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LaunchedSecretModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/launchers/prepare": {
      "post": {
        "tags": [
          "Launchers"
        ],
        "summary": "Prepare Launcher Session",
        "description": "Prepare a Launcher Session.",
        "operationId": "LaunchersService_PrepareLauncher",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareLauncherArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "PrepareLauncherResult",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepareLauncherResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/license/validforconnectionmanager": {
      "get": {
        "tags": [
          "License"
        ],
        "summary": "Get Valid License",
        "description": "Get License Information",
        "operationId": "LicenseService_Get",
        "responses": {
          "200": {
            "description": "License information to determine if the license is valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidLicenseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/metadata/{itemType}/{itemId}/{metadataItemDataId}": {
      "delete": {
        "tags": [
          "Metadata"
        ],
        "summary": "Delete Metadata",
        "description": "Deletes the metadata value and all history for that item",
        "operationId": "MetadataService_DeleteMetadata",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "The item ID of the entity to which this metadata is associated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemType",
            "in": "path",
            "description": "The type of entity to which this metadata is associated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadataItemDataId",
            "in": "path",
            "description": "The sequence ID of the metadata record to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataDeleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/metadata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Search metadata",
        "description": "Search, filter, sort, and page metadata",
        "operationId": "MetadataService_SearchMetadata",
        "parameters": [
          {
            "name": "filter.itemId",
            "in": "query",
            "description": "Will only return metadata for this entity ID.  MetadataType will also be required.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.metaDataFieldId",
            "in": "query",
            "description": "Return a specific metadata field",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.metadataType",
            "in": "query",
            "description": "Will only return metadata for this type.  ItemId will also be required.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfMetadataSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/metadata/history": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Search metadata history",
        "description": "Search, filter, sort, and page metadata history",
        "operationId": "MetadataService_SearchMetadataHistory",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "Only return history metadata values that were entered before this time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter.itemId",
            "in": "query",
            "description": "Will only return metadata for this entity ID.  MetadataType will also be required.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.metaDataFieldId",
            "in": "query",
            "description": "Return a specific metadata field",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.metadataType",
            "in": "query",
            "description": "Will only return metadata for this type.  ItemId will also be required.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "Only return history metadata values that were entered after this time",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata search history results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfMetadataHistorySummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/metadata/field-sections": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Get metadata field sections",
        "description": "Return all of the metadata sections that have metadata for a specific item.",
        "operationId": "MetadataService_GetFieldSections",
        "parameters": [
          {
            "name": "filter.itemId",
            "in": "query",
            "description": "Return sections that have metadata for this specific item id.  MetadataType will be required.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.metadataSectionFilterId",
            "in": "query",
            "description": "Return a specific Metadata Section Field ID.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.metadataType",
            "in": "query",
            "description": "Only return metadata for a specific type of item.  Will also required an ItemId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata Sections that match criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfMetadataFieldSectionSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/metadata/fields": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "Get metadata fields",
        "description": "Returns a list of all of the metadata sections and fields that exist",
        "operationId": "MetadataService_GetFields",
        "responses": {
          "200": {
            "description": "Metadata Fields that exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfMetadataFieldSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/metadata/{itemType}/{itemId}": {
      "post": {
        "tags": [
          "Metadata"
        ],
        "summary": "Create Metadata",
        "description": "Create or update a metadata field for an item",
        "operationId": "MetadataService_CreateMetadata",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "The item ID of the entity to which this metadata is associated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemType",
            "in": "path",
            "description": "The type of entity to which this metadata is associated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Newly created or updated MetadataModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Metadata"
        ],
        "summary": "Update or Create Metadata",
        "description": "Update or create a metadata field for an item",
        "operationId": "MetadataService_UpdateMetadata",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "description": "The item ID of the entity to which this metadata is associated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemType",
            "in": "path",
            "description": "The type of entity to which this metadata is associated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Newly created or updated MetadataModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/metadata/field-sections/{fieldSectionId}": {
      "patch": {
        "tags": [
          "Metadata"
        ],
        "summary": "Update a metadata field section",
        "description": "Update a metadata field section",
        "operationId": "MetadataService_UpdateMetadataFieldSection",
        "parameters": [
          {
            "name": "fieldSectionId",
            "in": "path",
            "description": "The section ID of the field to which this metadata is associated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemId",
            "in": "query",
            "description": "The item ID of the entity to which this metadata is associated",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "itemType",
            "in": "query",
            "description": "The type of entity to which this metadata is associated",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetadataFieldSectionUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Updated metadata field section",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataFieldSectionSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/mobile-configuration": {
      "get": {
        "tags": [
          "Mobile"
        ],
        "summary": "Get the mobile configuration",
        "description": "Get the mobile configuration",
        "operationId": "MobileService_GetMobileConfiguration",
        "responses": {
          "200": {
            "description": "Mobile Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MobileConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/oauth-expiration": {
      "post": {
        "tags": [
          "OAuthExpiration"
        ],
        "summary": "Expire Session",
        "description": "Expire the current user session",
        "operationId": "OAuthExpirationService_ExpireSession",
        "responses": {
          "200": {
            "description": "Whether the expiration succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/one-time-password-code/{id}": {
      "get": {
        "tags": [
          "OneTimePasswordCode"
        ],
        "summary": "Get one time password code and seconds",
        "description": "Get one time password code by secret id",
        "operationId": "OneTimePasswordCodeService_Get",
        "parameters": [
          {
            "name": "numberOfCodesToGenerate",
            "in": "query",
            "description": "NumberOfCodesToGenerate",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "One time password code model",
            "content": {
              "application/json": {
                "schema": {
                  "description": "One time password code model",
                  "items": {
                    "$ref": "#/components/schemas/OneTimePasswordCodeModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/password-requirements": {
      "get": {
        "tags": [
          "PasswordRequirements"
        ],
        "summary": "Search Password Requirements",
        "description": "Search, filter, sort, and page password requirements",
        "operationId": "PasswordRequirementsService_SearchPasswordRequirements",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password requirements collection",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfPasswordRequirementsSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "PasswordRequirements"
        ],
        "summary": "Create Password Requirement",
        "description": "Create Password Requirement",
        "operationId": "PasswordRequirementsService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordRequirementCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Password requirement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordRequirementModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/password-requirements/{id}": {
      "get": {
        "tags": [
          "PasswordRequirements"
        ],
        "summary": "Get Password Requirement",
        "description": "Get password requirements",
        "operationId": "PasswordRequirementsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password requirement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordRequirementModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "PasswordRequirements"
        ],
        "summary": "PatchPasswordRequirement",
        "description": "Patch Password Requirement",
        "operationId": "PasswordRequirementsService_Patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordRequirementPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Password requirement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordRequirementModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/password-requirements/{id}/rules": {
      "put": {
        "tags": [
          "PasswordRequirements"
        ],
        "summary": "Update Password Requirement Rules",
        "description": "Update Password Requirement Rules",
        "operationId": "PasswordRequirementsService_UpdateRules",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordRequirementRuleUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Password requirement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordRequirementModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/pba-configuration": {
      "get": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Get Pba Configuration",
        "description": "Get Pba Configuration",
        "operationId": "PbaConfigurationService_GetPbaConfiguration",
        "responses": {
          "200": {
            "description": "Pba Configuration object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PbaConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Update Pba Configuration",
        "description": "Update Pba Configuration",
        "operationId": "PbaConfigurationService_UpdatePbaConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PbaConfigurationUpdateArgs"
              }
            }
          },
          "description": "Pba Configuration Update Options"
        },
        "responses": {
          "200": {
            "description": "Pba Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PbaConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/pba-configuration/get-historical-import-status": {
      "get": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Get Historical Import Status",
        "description": "Get Historical Import Status.",
        "operationId": "PbaConfigurationService_GetHistoricalImportStatus",
        "responses": {
          "200": {
            "description": "PbaHistoricalImportStatusResponseMessage object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PbaHistoricalImportStatusResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/pba-history-import": {
      "post": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Process Pba Historical Import",
        "description": "Process Pba Historical Import",
        "operationId": "PbaConfigurationService_ProcessPbaHistoryImport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PbaHistoricalImportArgs"
              }
            }
          },
          "description": "Pba Historical Import Options"
        },
        "responses": {
          "200": {
            "description": "Pba Historical Import",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PbaHistoricalImportViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/pba-test-connection": {
      "post": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Test Pba Connection",
        "description": "Test Pba Connection",
        "operationId": "PbaConfigurationService_TestPbaConnection",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/pba-confirm-pair": {
      "post": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Confirm Pba Pair",
        "description": "Confirm SS Key Pair with Pba",
        "operationId": "PbaConfigurationService_ConfirmPbaPair",
        "responses": {
          "200": {
            "description": "Pba Confirm Pair Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PbaConfirmPairModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/pba-sync-metadata": {
      "post": {
        "tags": [
          "PbaConfiguration"
        ],
        "summary": "Sync Pba Metadata",
        "description": "Sync Pba Metadata",
        "operationId": "PbaConfigurationService_SyncPbaMetadata",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/platform/group/{groupId}": {
      "delete": {
        "tags": [
          "Platform"
        ],
        "summary": "Unlink a group from Platform",
        "description": "Unlinking a group from Platform will disable the group.",
        "operationId": "PlatformService_UnlinkDomainGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success status",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/platform/groups/search-directory": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "Search in Platform for groups",
        "description": "Search in Platform for external groups using Platform credentials",
        "operationId": "PlatformService_SearchPlatformForGroups",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "Search text. Use * for wildcards, ex: Admin*. Leave empty to return all.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of groups matching search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalGroupViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/platform/synchronization": {
      "get": {
        "tags": [
          "Platform"
        ],
        "summary": "Platform Sync Status",
        "description": "Return status of platform synchronization",
        "operationId": "PlatformService_GetSynchronizationStatus",
        "responses": {
          "200": {
            "description": "Whether or not the sync has started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSynchronizationStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/platform/group": {
      "post": {
        "tags": [
          "Platform"
        ],
        "summary": "Link a group from Platform",
        "description": "Linking or adding a group with Platform will allow permissions to be added before those members log in.",
        "operationId": "PlatformService_LinkPlatformGroup",
        "requestBody": {
          "$ref": "#/components/requestBodies/LinkExternalGroupArgs"
        },
        "responses": {
          "200": {
            "description": "Success status",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/platform/synchronization-now": {
      "post": {
        "tags": [
          "Platform"
        ],
        "summary": "Synchronize Platform user properties and group memberships",
        "description": "Run synchronize to update groups and user properties for Platform users",
        "operationId": "PlatformService_SynchronizeNow",
        "responses": {
          "200": {
            "description": "True if the command was initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/ssh/client-overrides/{clientOverrideId}": {
      "delete": {
        "tags": [
          "Proxy"
        ],
        "summary": "Deletes SSH Terminal client overrides",
        "description": "Deletes SSH Terminal client overrides",
        "operationId": "ProxyService_DeleteTerminalClientOverrides",
        "parameters": [
          {
            "name": "clientOverrideId",
            "in": "path",
            "description": "clientOverrideId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Updates SSH Terminal client overrides",
        "description": "Updates SSH Terminal client overrides",
        "operationId": "ProxyService_UpdateTerminalClientOverrides",
        "parameters": [
          {
            "name": "clientOverrideId",
            "in": "path",
            "description": "clientOverrideId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ProxyClientOverrideSummary"
        },
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyClientOverrideSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/ssh/config": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get the SSH proxy configuration",
        "description": "Get the SSH proxy configuration",
        "operationId": "ProxyService_GetSshProxyConfiguration",
        "responses": {
          "200": {
            "description": "SSH Proxy Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshProxyConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update the SSH proxy configuration",
        "description": "Update the SSH proxy configuration",
        "operationId": "ProxyService_PatchSshProxyConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshProxyConfigurationViewModel"
              }
            }
          },
          "description": "viewModel"
        },
        "responses": {
          "200": {
            "description": "SSH Proxy Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshProxyConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/rdp/config": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get the RDP proxy configuration",
        "description": "Get the RDP proxy configuration",
        "operationId": "ProxyService_GetRdpProxyConfiguration",
        "responses": {
          "200": {
            "description": "RDP Proxy Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RdpProxyConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update the RDP proxy configuration",
        "description": "Update the RDP proxy configuration",
        "operationId": "ProxyService_PatchRdpProxyConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RdpProxyConfigurationViewModel"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RdpProxyConfigurationViewModel"
              }
            }
          },
          "description": "viewModel"
        },
        "responses": {
          "200": {
            "description": "RDP Proxy Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RdpProxyConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/explanation": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get Proxy Explanations",
        "description": "Get an explanation of the SSH proxy, SSH terminal, and RDP proxy features",
        "operationId": "ProxyService_GetExplanations",
        "responses": {
          "200": {
            "description": "Explanations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyExplanationsViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/audit": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get the Proxy Audit List",
        "description": "Search, filter, sort, and page Proxy Audits.",
        "operationId": "ProxyService_GetAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of Proxy Audits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfProxyAuditModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/endpoints": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get the proxy endpoints list",
        "description": "Get the proxy endpoints list",
        "operationId": "ProxyService_GetEndpoints",
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyEndpointsViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/ssh/notification": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get a notification of where the SSH proxy is running",
        "description": "Get a notification of where the SSH proxy is running",
        "operationId": "ProxyService_GetSshEndpointNotification",
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/rdp/notification": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get a notification of where the RDP proxy is running",
        "description": "Get a notification of where the RDP proxy is running",
        "operationId": "ProxyService_GetRdpEndpointNotification",
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/endpoints/notification": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get endpoint warnings",
        "description": "Get endpoint warnings",
        "operationId": "ProxyService_GetEndpointNotification",
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/ssh/clients": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get SSH Terminal clients",
        "description": "Get SSH Terminal clients",
        "operationId": "ProxyService_GetTerminalClients",
        "parameters": [
          {
            "name": "filter.ipAddress",
            "in": "query",
            "description": "IpAddress",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.terminalClientType",
            "in": "query",
            "description": "TerminalClientType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal clients",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfProxyClientSummaryAndSshProxyClientsFilterQuery"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/ssh/clienthistory": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get SSH Terminal client history",
        "description": "Get SSH Terminal client history",
        "operationId": "ProxyService_GetTerminalClientHistory",
        "parameters": [
          {
            "name": "filter.authenticateResult",
            "in": "query",
            "description": "AuthenticateResult",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "EndDate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.engineIdentityGuid",
            "in": "query",
            "description": "EngineIdentityGuid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.ipAddress",
            "in": "query",
            "description": "IpAddress",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "StartDate",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfProxyClientHistorySummaryAndSshProxyClientHistoryFilterQuery"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/ssh/client-overrides": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get SSH Terminal client overrides",
        "description": "Get SSH Terminal client overrides",
        "operationId": "ProxyService_GetTerminalClientOverrides",
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of SSH Terminal client overrides",
                  "items": {
                    "$ref": "#/components/schemas/ProxyClientOverrideSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Proxy"
        ],
        "summary": "Creates SSH Terminal client overrides",
        "description": "Creates SSH Terminal client overrides",
        "operationId": "ProxyService_CreateTerminalClientOverrides",
        "requestBody": {
          "$ref": "#/components/requestBodies/ProxyClientOverrideSummary"
        },
        "responses": {
          "200": {
            "description": "A list of SSH Terminal client overrides",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyClientOverrideSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/state": {
      "get": {
        "tags": [
          "Proxy"
        ],
        "summary": "Get proxy state",
        "description": "Get proxy state",
        "operationId": "ProxyService_GetProxyingState",
        "responses": {
          "200": {
            "description": "Proxy state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyingStateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/endpoints/nodes/{id}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update a node proxy configuration",
        "description": "Update a node proxy configuration",
        "operationId": "ProxyService_PatchNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyNodeViewModel"
              }
            }
          },
          "description": "node"
        },
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyEndpointsViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/endpoints/sites/{id}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update a site proxy configuration",
        "description": "Update a site proxy configuration",
        "operationId": "ProxyService_PatchSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxySiteViewModel"
              }
            }
          },
          "description": "site"
        },
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyEndpointsViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/endpoints/engines/{id}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Update an engine proxy configuration",
        "description": "Update an engine proxy configuration",
        "operationId": "ProxyService_PatchEngine",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyEngineViewModel"
              }
            }
          },
          "description": "engine"
        },
        "responses": {
          "200": {
            "description": "A list of nodes, sites, and engines with proxy configurations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyEndpointsViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/ssh/clients/{clientId}": {
      "patch": {
        "tags": [
          "Proxy"
        ],
        "summary": "Updates a SSH Terminal client type",
        "description": "Updates a SSH Terminal client type",
        "operationId": "ProxyService_UpdateTerminalClientType",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "clientId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyClientSummary"
              }
            }
          },
          "description": "client"
        },
        "responses": {
          "200": {
            "description": "A list of SSH Terminal clients",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/ssh/generate-key": {
      "post": {
        "tags": [
          "Proxy"
        ],
        "summary": "Generate SSH Host Key",
        "description": "Generates a new SSH host key and returns the SSH configuration with the updated host key",
        "operationId": "ProxyService_GenerateSshHostKey",
        "responses": {
          "200": {
            "description": "SSH Proxy Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshProxyConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/proxy/rdp/generate-certificate": {
      "post": {
        "tags": [
          "Proxy"
        ],
        "summary": "Generate RDP server certificate",
        "description": "Generates a new RDP server certificate and returns the RDP configuration with the updated server certificate",
        "operationId": "ProxyService_GenerateRdpProxyCertificate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateRdpCertificateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "RDP Proxy Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RdpProxyConfigurationViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/remote-password-changing/password-types/{id}": {
      "get": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Password Type By Id",
        "description": "Gets Password Type By Id",
        "operationId": "RemotePasswordChangingService_GetPasswordType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Password Type Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PasswordType",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordTypeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Update Password Type",
        "description": "Update a Password Type",
        "operationId": "RemotePasswordChangingService_UpdatePasswordType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Password Type Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordTypeUpdateArgs"
              }
            }
          },
          "description": "Password Type update options"
        },
        "responses": {
          "200": {
            "description": "Updated Password Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordTypeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Delete Password Type",
        "description": "Delete a Password Type",
        "operationId": "RemotePasswordChangingService_DeletePasswordType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Password Type Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Password Type Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/remote-password-changing/custom-commands/{id}": {
      "get": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Custom Command List",
        "description": "Lists Available Custom Command for Password Type",
        "operationId": "RemotePasswordChangingService_GetCustomCommands",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Password Type Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.commandTypeCode",
            "in": "query",
            "description": "CommandTypeCode",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Custom Command List result for Password Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCustomCommandModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Update Custom Command",
        "description": "Update a Custom Command",
        "operationId": "RemotePasswordChangingService_UpdateCustomCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Custom Command Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomCommandUpdateArgs"
              }
            }
          },
          "description": "Custom Command update options"
        },
        "responses": {
          "200": {
            "description": "Updated Custom Command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomCommandModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Delete Custom Command",
        "description": "Delete a Custom Command",
        "operationId": "RemotePasswordChangingService_DeleteCustomCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Custom Command Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete Password Custom Command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/remote-password-changing/password-types": {
      "get": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Password Type List",
        "description": "Lists Available Password Types",
        "operationId": "RemotePasswordChangingService_GetPasswordTypeList",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Password Types in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PasswordType List result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfPasswordTypeSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Create Password Type",
        "description": "Create a New Password Type",
        "operationId": "RemotePasswordChangingService_CreatePasswordType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordTypeCreateArgs"
              }
            }
          },
          "description": "Password Type creation options"
        },
        "responses": {
          "200": {
            "description": "Created Password Type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordTypeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/remote-password-changing/custom-commands": {
      "post": {
        "tags": [
          "RemotePasswordChanging"
        ],
        "summary": "Create Custom Command",
        "description": "Create a New Custom Command",
        "operationId": "RemotePasswordChangingService_CreateCustomCommand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomCommandCreateArgs"
              }
            }
          },
          "description": "Custom Command creation options"
        },
        "responses": {
          "200": {
            "description": "Created Custom Command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomCommandModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report",
        "description": "Gets a Report and returns the Report Model",
        "operationId": "ReportsService_GetReportDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Report",
        "description": "Updates a Report and returns the report",
        "operationId": "ReportsService_UpdateReport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportUpdateArgs"
              }
            }
          },
          "description": "Report update options"
        },
        "responses": {
          "200": {
            "description": "Report object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report",
        "description": "Delete a report by ID",
        "operationId": "ReportsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/reports/{id}": {
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report",
        "description": "Delete a report by ID",
        "operationId": "ReportsService_DeleteV2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/categories/{reportCategoryId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Category",
        "description": "Get Report Category",
        "operationId": "ReportsService_GetReportCategory",
        "parameters": [
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCategoryDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report Category",
        "description": "This will delete the report category and all assigned reports will be set inactive",
        "operationId": "ReportsService_DeleteReportCategory",
        "parameters": [
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "true if success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Report Category",
        "description": "Update Report Category",
        "operationId": "ReportsService_UpdateReportCategory",
        "parameters": [
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCategoryUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Report Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCategoryDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/reports/categories/{reportCategoryId}": {
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report Category",
        "description": "This will delete the report category and all assigned reports will be set inactive",
        "operationId": "ReportsService_DeleteReportCategoryV2",
        "parameters": [
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/schedules/{reportScheduleId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Schedule",
        "description": "Get Report Schedule",
        "operationId": "ReportsService_GetReportSchedule",
        "parameters": [
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportScheduleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report Schedule",
        "description": "Delete Report Schedule",
        "operationId": "ReportsService_DeleteReportSchedule",
        "parameters": [
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Report Schedule",
        "description": "Update Report Schedule",
        "operationId": "ReportsService_UpdateReportSchedule",
        "parameters": [
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportScheduleUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Report Schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportScheduleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/reports/schedules/{reportScheduleId}": {
      "delete": {
        "tags": [
          "Reports"
        ],
        "summary": "Delete Report Schedule",
        "description": "Delete Report Schedule",
        "operationId": "ReportsService_DeleteReportScheduleV2",
        "parameters": [
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/{id}/audits": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Audits",
        "description": "Get report audits by report Id",
        "operationId": "ReportsService_GetReportAuditsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Audit Summaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfReportAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/audits": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get All Report Audits",
        "description": "Get all report audits",
        "operationId": "ReportsService_GetReportAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Audit Summaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfReportAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Search Reports",
        "description": "Search, filter, sort, and page reports",
        "operationId": "ReportsService_SearchReportSummary",
        "parameters": [
          {
            "name": "filter.categoryId",
            "in": "query",
            "description": "Category ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Reports in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.reportName",
            "in": "query",
            "description": "Report Name - Searching by report name ignores other filters",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfReportSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create Report",
        "description": "Creates a new Report and returns the report",
        "operationId": "ReportsService_CreateReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCreateArgs"
              }
            }
          },
          "description": "Report create options"
        },
        "responses": {
          "200": {
            "description": "Report object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/lookup": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Lookup Reports",
        "description": "Search, filter, sort, and page reports, returning only group ID and name",
        "operationId": "ReportsService_Lookup",
        "parameters": [
          {
            "name": "filter.categoryId",
            "in": "query",
            "description": "Category ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Reports in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.reportName",
            "in": "query",
            "description": "Report Name - Searching by report name ignores other filters",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reports search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfReportLookup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/categories": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List Report Categories",
        "description": "List the report categories",
        "operationId": "ReportsService_GetCategories",
        "responses": {
          "200": {
            "description": "Report categories array",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Report categories array",
                  "items": {
                    "$ref": "#/components/schemas/ReportCategory"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create Report Category",
        "description": "Create Report Category",
        "operationId": "ReportsService_CreateReportCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCategoryCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Report Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportCategoryDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/charttypes": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "List Report Chart Types",
        "description": "List the report chart types",
        "operationId": "ReportsService_GetChartTypes",
        "responses": {
          "200": {
            "description": "Report chart types array",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Report chart types array",
                  "items": {
                    "$ref": "#/components/schemas/ReportChartType"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/{id}/defaultparameters": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Report Parameters",
        "description": "Gets the default parameters for the specified report",
        "operationId": "ReportsService_GetDefaultParameters",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDefaultParams"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/schedules": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Search Report Schedules",
        "description": "Search Report Schedules",
        "operationId": "ReportsService_SearchReportSchedules",
        "parameters": [
          {
            "name": "filter.includeDeleted",
            "in": "query",
            "description": "When set, deleted reports will be included",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.reportId",
            "in": "query",
            "description": "Report Id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedules that matched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfReportScheduleSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create Report Schedule",
        "description": "Create Report Schedule",
        "operationId": "ReportsService_CreateReportSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportScheduleCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Report Schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportScheduleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/schedules/stub/{reportId}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Stub Report Schedule",
        "description": "Stub Report Schedule",
        "operationId": "ReportsService_StubReportSchedule",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportScheduleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/schedules/{reportScheduleId}/history/search": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Search Report Schedule History",
        "description": "Search Report Schedule History",
        "operationId": "ReportsService_SearchReportScheduleHistory",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule History for a particular Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfReportScheduleHistorySummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/schedules/{reportScheduleHistoryId}/history": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Schedule History",
        "description": "Get a Report Schedule History",
        "operationId": "ReportsService_GetReportScheduleHistory",
        "parameters": [
          {
            "name": "reportScheduleHistoryId",
            "in": "path",
            "description": "reportScheduleHistoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Schedule History for a ScheduleReportHistoryId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfReportScheduleHistorySummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/{reportId}/permissions": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a Report's Permissions",
        "description": "Get a Report's Permissions",
        "operationId": "ReportsService_GetReportPermissions",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Permissions for a Report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfReportPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Report Permissions",
        "description": "Update Report Permissions",
        "operationId": "ReportsService_UpdateReportPermissions",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPermissionsUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Report Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfReportPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/{reportCategoryId}/permissions-from-category": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a Report's Permissions from a Report Category",
        "description": "Get a Report's Permissions from a Report Category",
        "operationId": "ReportsService_GetReportPermissionsFromCategory",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Permissions for a Report from a Report Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfReportPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/categories/{reportCategoryId}/permissions": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get a Report Category's Permissions",
        "description": "Get a Report Category's Permissions",
        "operationId": "ReportsService_GetReportCategoryPermissions",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report Category Permissions for a Report Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfReportCategoryPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Reports"
        ],
        "summary": "Update Category Report Permissions",
        "description": "Update Category Report Permissions",
        "operationId": "ReportsService_UpdateReportCategoryPermissions",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reportCategoryId",
            "in": "path",
            "description": "reportCategoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportCategoryPermissionsUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Report Category Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfReportCategoryPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/permissions/options": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Permission Options",
        "description": "Get Report Permission Options",
        "operationId": "ReportsService_GetReportPermissionOptions",
        "responses": {
          "200": {
            "description": "Report Permissions Options",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Report Permissions Options",
                  "items": {
                    "$ref": "#/components/schemas/ReportPermissionOptionModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/categories/permissions/options": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Report Category Permission Options",
        "description": "Get Report Category Permission Options",
        "operationId": "ReportsService_GetReportCategoryPermissionOptions",
        "responses": {
          "200": {
            "description": "Report Category Permissions Options",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Report Category Permissions Options",
                  "items": {
                    "$ref": "#/components/schemas/ReportCategoryPermissionOptionModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/export": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Export Report",
        "description": "Exports a Report and returns the results",
        "operationId": "ReportsService_Export",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportExportArgs"
              }
            }
          },
          "description": "Report execute options"
        },
        "responses": {
          "200": {
            "description": "Report object",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/execute": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Execute Report",
        "description": "Executes a Report and returns the results",
        "operationId": "ReportsService_Execute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportExecuteArgs"
              }
            }
          },
          "description": "Report execute options"
        },
        "responses": {
          "200": {
            "description": "Report object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportExecuteModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/{id}/email": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Email Report",
        "description": "Email a report",
        "operationId": "ReportsService_Email",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportEmailArgs"
              }
            }
          },
          "description": "Report email options"
        },
        "responses": {
          "200": {
            "description": "Object email result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportEmailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/schedules/{reportScheduleHistoryId}/history/download": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Download Historical Report",
        "description": "Download historical report from a schedule",
        "operationId": "ReportsService_DownloadHistoricalReport",
        "parameters": [
          {
            "name": "reportScheduleHistoryId",
            "in": "path",
            "description": "reportScheduleHistoryId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpResponseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/schedules/{reportScheduleId}/undelete": {
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "Undelete Report Schedule",
        "description": "Undelete Report Schedule",
        "operationId": "ReportsService_UndeleteReportSchedule",
        "parameters": [
          {
            "name": "reportScheduleId",
            "in": "path",
            "description": "reportScheduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/reports/{reportId}/undelete": {
      "put": {
        "tags": [
          "Reports"
        ],
        "summary": "Undelete System Report",
        "description": "Allows user to undelete system reports only.  Non-system reports are required to be edited in order for the SQL to be valdiated properly.",
        "operationId": "ReportsService_UndeleteSystemReport",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns success/fail model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UndeleteReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/role-audits": {
      "get": {
        "tags": [
          "RoleAudit"
        ],
        "summary": "Search Role audits",
        "description": "Search, filter, sort, and page Role audits",
        "operationId": "RoleAuditService_GetRoleAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "path",
            "description": "isExporting",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.auditType",
            "in": "query",
            "description": "Role audit type filter",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role audit query result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfRoleAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/rolepermissions/unassigned": {
      "get": {
        "tags": [
          "RolePermissions"
        ],
        "summary": "Permissions not assigned to any Role",
        "description": "Permissions not assigned to any Role",
        "operationId": "RolePermissionsService_GetUnassigned",
        "responses": {
          "200": {
            "description": "Names of all unassigned Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnassignedPermissionsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Role",
        "description": "Get Role by Role ID",
        "operationId": "RolesService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role model result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Roles"
        ],
        "summary": "Update Role",
        "description": "Update a single Role by ID",
        "operationId": "RolesService_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePatchArgs"
              }
            }
          },
          "description": "Role update options"
        },
        "responses": {
          "200": {
            "description": "Role object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Search Roles",
        "description": "Search, filter, sort, and page Roles",
        "operationId": "RolesService_GetAll",
        "parameters": [
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Only return roles assigned to this group id.  Will be ignored if UserId is set",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive Roles in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "Only return roles assigned to this user id.  Will supercede GroupId if set",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfRoleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create Role",
        "description": "Create a new Role",
        "operationId": "RolesService_Create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Role object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/roles/{id}/groups": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Role Groups",
        "description": "Get assigned Groups by RoleId",
        "operationId": "RolesService_GetRoleGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactiveUsersForGroup",
            "in": "query",
            "description": "Whether to include inactive users in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.userDomainId",
            "in": "query",
            "description": "Filter only users in a specific domain",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role Group summary result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfRoleGroupSummaryAndGroupMembershipFilter"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/roles/{id}/permissions": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Assigned Role Permissions",
        "description": "Get Permissions assigned to a single Role by Role ID",
        "operationId": "RolesService_GetRolePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role Permission model result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfRolePermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update Role Permission Assignments",
        "description": "Update all Permissions assigned to Role",
        "operationId": "RolesService_UpdatePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RolePermissionsAssignmentRequest"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolePermissionsAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/roles/{id}/permissions/unassigned": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Unassigned Role Permissions",
        "description": "Get unassigned Role Permissions matching the type of a specific Role by Role ID",
        "operationId": "RolesService_GetAllRolePermissionsByType",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role model result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfRolePermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/roles/stub": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get Role Stub",
        "description": "Return the default values for a new Role",
        "operationId": "RolesService_Stub",
        "responses": {
          "200": {
            "description": "Role object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/roles/{roleId}/groups": {
      "patch": {
        "tags": [
          "Roles"
        ],
        "summary": "Patch Role Group Assignments",
        "description": "Update Groups assigned to a Role by sending list(s) of Group IDs to add/remove",
        "operationId": "RolesService_PatchGroups",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleGroupsPatchArgs"
              }
            }
          },
          "description": "Role Groups update options"
        },
        "responses": {
          "200": {
            "description": "Role object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleGroupsPatchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/schedules/{scheduleId}": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Recurring schedule",
        "description": "Get all the details for a recurring schedule by ID",
        "operationId": "ScheduleService_GetSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "scheduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The recurring schedule details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringScheduleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Schedule"
        ],
        "summary": "Update a Recurring Schedule",
        "description": "Update partial details for a recurring schedule or all constraints",
        "operationId": "ScheduleService_UpdateSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "description": "scheduleId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringScheduleUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The updated recurring schedule details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringScheduleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/schedules": {
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Create a Recurring Schedule",
        "description": "Create a recurring schedule and all constraints",
        "operationId": "ScheduleService_CreateSchedule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringScheduleCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The saved recurring schedule details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurringScheduleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/userscripts": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Search scripts",
        "description": "Search, filter, sort, and page scripts",
        "operationId": "ScriptService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive scripts in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search Text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "scripts search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfScriptSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Script"
        ],
        "summary": "Create Script",
        "description": "Create a new Script",
        "operationId": "ScriptService_Post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptCreateArgs"
              }
            }
          },
          "description": "Script creation options"
        },
        "responses": {
          "200": {
            "description": "Secret Template object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/userscripts/{id}": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get Script",
        "description": "Get a single script by ID",
        "operationId": "ScriptService_Load",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Script ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Script object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScriptModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-accounts": {
      "get": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Search SDK Client Accounts",
        "description": "Search, filter, sort, and page app SDK Client accounts",
        "operationId": "SdkClientAccountsService_SearchClientAccounts",
        "parameters": [
          {
            "name": "filter.operator",
            "in": "query",
            "description": "Operator",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "UserId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SDK Client Account search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSdkClientAccountSummaryAndSdkClientAccountFilter"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Create SDK Client Account",
        "description": "Create a new SDK Client account",
        "operationId": "SdkClientAccountsService_CreateClientAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SdkClientAccountCreateArgs"
              }
            }
          },
          "description": "SDK Client Account creation options"
        },
        "responses": {
          "200": {
            "description": "SdkClientAccountModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkClientAccountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-accounts/{id}": {
      "get": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Get SDK Client Account",
        "description": "Get a single SDK Client account by ID",
        "operationId": "SdkClientAccountsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Account Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientAccountModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkClientAccountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Update SDK Client Account",
        "description": "Update a single SDK Client account by ID",
        "operationId": "SdkClientAccountsService_UpdateClientAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Account Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SdkClientAccountUpdateArgs"
              }
            }
          },
          "description": "SDK Client Account update options"
        },
        "responses": {
          "200": {
            "description": "SdkClientAccountModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkClientAccountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-accounts/enabled": {
      "get": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Get Current State",
        "description": "Get the current state of SDK client account",
        "operationId": "SdkClientAccountsService_GetEnabled",
        "responses": {
          "200": {
            "description": "bool",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Toggle Current State",
        "description": "Toggle the current state of SDK client account",
        "operationId": "SdkClientAccountsService_ToggleEnabled",
        "responses": {
          "200": {
            "description": "bool",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-accounts/{id}/revoke": {
      "post": {
        "tags": [
          "SdkClientAccounts"
        ],
        "summary": "Revoke SDK Client Account",
        "description": "Revoke a single SDK Client account by ID",
        "operationId": "SdkClientAccountsService_Revoke",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Account Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "bool",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-audits": {
      "get": {
        "tags": [
          "SdkClientAudits"
        ],
        "summary": "Search SDK Client Audits",
        "description": "Search, filter, sort, and page app SDK Client audits",
        "operationId": "SdkClientAuditsService_SearchClientAudit",
        "parameters": [
          {
            "name": "filter.operator",
            "in": "query",
            "description": "Operator",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "UserId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SDK Client Audit search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSdkClientAuditSummaryAndSdkClientAuditFilter"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-rules/{id}": {
      "get": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Get SDK Client Rule",
        "description": "Get a single SDK Client rule by ID",
        "operationId": "SdkClientRulesService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Rule Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkClientRuleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Update SDK Client Rule",
        "description": "Update a single SDK Client rule by ID",
        "operationId": "SdkClientRulesService_UpdateClientRule",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Rule Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SdkClientRuleUpdateArgs"
              }
            }
          },
          "description": "SDK Client Rule update options"
        },
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkClientRuleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Delete SDK Client Rule",
        "description": "Delete a SDK Client rule by ID",
        "operationId": "SdkClientRulesService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Rule Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DeletedModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-rules": {
      "get": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Search SDK Client Rules",
        "description": "Search, filter, sort, and page app SDK Client rules",
        "operationId": "SdkClientRulesService_SearchClientRules",
        "parameters": [
          {
            "name": "filter.operator",
            "in": "query",
            "description": "Operator",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "UserId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SDK Client Rule search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSdkClientRuleSummaryAndSdkClientRuleFilter"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Create New SDK Client Rule",
        "description": "Create a new SDK Client rule",
        "operationId": "SdkClientRulesService_CreateClientRule",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SdkClientRuleCreateArgs"
              }
            }
          },
          "description": "SDK Client Rule creation options"
        },
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkClientRuleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-rules/{id}/onboarding-key": {
      "get": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Get Onboarding Key for SDK Client Rule",
        "description": "Get the onboarding key for a single SDK Client rule by ID",
        "operationId": "SdkClientRulesService_GetOnboardingKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SDK Client Rule Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sdk-client-rules/stub": {
      "get": {
        "tags": [
          "SdkClientRules"
        ],
        "summary": "Get SDK Client Rule Stub",
        "description": "Return the default values for a new SDK Client rule",
        "operationId": "SdkClientRulesService_Stub",
        "responses": {
          "200": {
            "description": "SdkClientRuleModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkClientRuleModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-access-requests": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Search Secret Access Requests by Status for Current User.",
        "description": "Search Secret Access Requests by Status for Current User.",
        "operationId": "SecretAccessRequestsService_SearchRequests",
        "parameters": [
          {
            "name": "filter.isMyRequest",
            "in": "query",
            "description": "IsMyRequest",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.status",
            "in": "query",
            "description": "Status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretAccessModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Update a Secret Access Request",
        "description": "Update the start date, end date, and status for a request.",
        "operationId": "SecretAccessRequestsService_UpdateRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretAccessUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Access Action Result Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretAccessActionResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Create a new Secret Access Request",
        "description": "Create a new Secret Access Request",
        "operationId": "SecretAccessRequestsService_CreateRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretAccessCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretAccessModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-access-requests/{id}/history": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret access request history for the user that created the request.",
        "description": "Get Secret access request history for the user that created the request.",
        "operationId": "SecretAccessRequestsService_GetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Access Request Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Request History Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretAccessRequestHistoryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-access-requests/secrets/{id}": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret Access Requests by Status for Current User.",
        "description": "Get Secret Access Requests by Status for Current User.",
        "operationId": "SecretAccessRequestsService_GetRequestsForSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretAccessModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-access-requests/{id}": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret Access Request by ID",
        "description": "Get Secret Access Request by ID",
        "operationId": "SecretAccessRequestsService_GetRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Access ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretAccessModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-access-requests/{id}/pending": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret Access Request with Current and Eligible Reviewers by ID",
        "description": "Get Secret Access Request by ID. Will also get a lists of current and eligible approvers if the request is in a Pending state",
        "operationId": "SecretAccessRequestsService_GetPendingRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Access ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretAccessPendingRequestModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-access-requests/secrets/{id}/options": {
      "get": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Get Secret Access Options by Secret ID",
        "description": "Get Secret Access Options by Secret ID",
        "operationId": "SecretAccessRequestsService_GetOptionsBySecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Access Request Options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretAccessOptionsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-access-requests/secrets/{id}/view-comment": {
      "post": {
        "tags": [
          "SecretAccessRequests"
        ],
        "summary": "Create a new View Comment on a secret.",
        "description": "Create a new View Comment on a secret.",
        "operationId": "SecretAccessRequestsService_CreateViewComment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretAccessViewCommentArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Success or Failure of the save.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-dependencies/{id}": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Secret Dependency",
        "description": "Gets a Secret Dependency and returns the Secret Dependency Model",
        "operationId": "SecretDependenciesService_GetDependency",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Dependency ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Dependency object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDependencyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Update Secret Dependency",
        "description": "Updates a Secret Dependency and returns the model",
        "operationId": "SecretDependenciesService_UpdateDependency",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Dependency ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDependencyUpdateArgs"
              }
            }
          },
          "description": "Secret Dependency update options"
        },
        "responses": {
          "200": {
            "description": "SecretDependencyModel object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDependencyUpdateArgs"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Delete Secret Dependency",
        "description": "Delete a Secret Dependency by ID",
        "operationId": "SecretDependenciesService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Dependency ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-dependencies/groups/{secretId}": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Secret Dependency Groups for a Secret",
        "description": "Get Secret Dependency Groups for a Secret",
        "operationId": "SecretDependenciesService_GetGroups",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Dependency Group array",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ILogicResultOfSecretDependencyGroupArray"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Update Secret Dependency Group",
        "description": "Update a Secret Dependency Group",
        "operationId": "SecretDependenciesService_UpdateSecretDependencyGroup",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "Id of Secret to assign to Dependency Group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSecretDependencyGroupArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "SecretDependencyGroupModel object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDependencyGroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Create Secret Dependency Group",
        "description": "Creates a new Secret Dependency Group and returns the model",
        "operationId": "SecretDependenciesService_CreateDependencyGroup",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDependencyGroupCreateArgs"
              }
            }
          },
          "description": "Secret Dependency create options"
        },
        "responses": {
          "200": {
            "description": "Secret Dependency Group object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDependencyGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-dependencies/scripts": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Scripts that are possible to use for Dependencies",
        "description": "Get Scripts that are possible to use for Dependencies",
        "operationId": "SecretDependenciesService_GetScripts",
        "responses": {
          "200": {
            "description": "Dependency Script array",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dependency Script array",
                  "items": {
                    "$ref": "#/components/schemas/DependencyScript"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-dependencies/templates": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Dependency Templates",
        "description": "Get Dependency Templates",
        "operationId": "SecretDependenciesService_GetTemplates",
        "responses": {
          "200": {
            "description": "Dependency Template array",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Dependency Template array",
                  "items": {
                    "$ref": "#/components/schemas/DependencyTemplate"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-dependencies": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Search Secret Dependencies",
        "description": "Search, filter, sort, and page Secret Dependencies on a Secret",
        "operationId": "SecretDependenciesService_SearchDependencySummary",
        "parameters": [
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Filter by group id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether or not to include inactive Secret Depenencies",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.lastRunStatus",
            "in": "query",
            "description": "Filter by last dependency result status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search in the title / name and machine fields",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "The Secret Id to filter on",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.templateId",
            "in": "query",
            "description": "Filter by dependency template id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDependency search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretDependencySummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Create Secret Dependency",
        "description": "Creates a new Secret Dependency and returns the model",
        "operationId": "SecretDependenciesService_CreateDependency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDependencyCreateArgs"
              }
            }
          },
          "description": "Secret Dependency create options"
        },
        "responses": {
          "200": {
            "description": "Secret Dependency object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDependencyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-dependencies/run/{identifier}": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Secret Dependency run task status",
        "description": "Gets a Secret Dependency run task status",
        "operationId": "SecretDependenciesService_GetDependencyRunTaskStatus",
        "parameters": [
          {
            "name": "identifier",
            "in": "path",
            "description": "Task identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task Status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskProgress"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-dependencies/stub": {
      "get": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Get Secret Dependency Stub",
        "description": "Return the default values for a new Secret Dependency",
        "operationId": "SecretDependenciesService_Stub",
        "parameters": [
          {
            "name": "scriptId",
            "in": "query",
            "description": "The Id of the Script that this Dependency will Run.  Only provide this value if the Dependency is running a script directly, and ensure that the type of the script matches the TypeId value passed in.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretId",
            "in": "query",
            "description": "The Id of the Secret that this Dependency will appear on",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "The Id of the Dependency Template that this Dependecy will be modeled on. Only provide this value if the Dependency is based on a Template.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "The Id of the Dependency Type that this Dependecy will be modeled on. Only provide this value if the Dependency is a running a script directly and is NOT based on a Dependency Template.  Valid Values: PowershellScript = 7, SshScript = 8, SqlScript = 9",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SecretDependencyModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDependencyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-dependencies/run": {
      "post": {
        "tags": [
          "SecretDependencies"
        ],
        "summary": "Run Dependencies",
        "description": "Runs the list of dependencies and retruns an identifier that can be used to collect the status.",
        "operationId": "SecretDependenciesService_Execute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Int32[]",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": "array"
              }
            }
          },
          "description": "Dependency Id array"
        },
        "responses": {
          "200": {
            "description": "Identifier of the task",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-erase-requests/{id}/history": {
      "get": {
        "tags": [
          "SecretEraseRequests"
        ],
        "summary": "Get Secret Erase History by Secret Erase Request ID",
        "description": "Get Secret Erase History by Secret Erase Request ID",
        "operationId": "SecretEraseRequestsService_GetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Erase Request ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Erase Request Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretEraseRequestHistoryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-erase-requests/{id}": {
      "get": {
        "tags": [
          "SecretEraseRequests"
        ],
        "summary": "Get Secret Erase Request by ID",
        "description": "Get Secret Erase Request by ID",
        "operationId": "SecretEraseRequestsService_GetRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret Erase Request ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Erase Request Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretEraseRequestModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-erase-requests/secrets": {
      "get": {
        "tags": [
          "SecretEraseRequests"
        ],
        "summary": "Get Secret Erase Request Secrets by Secret Erase Request ID",
        "description": "Get Secret Erase Request Secrets by Secret Erase Request ID",
        "operationId": "SecretEraseRequestsService_GetRequestSecrets",
        "parameters": [
          {
            "name": "filter.erased",
            "in": "query",
            "description": "Erased",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.secretEraseRequestId",
            "in": "query",
            "description": "SecretEraseRequestId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Erase Request Secret Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretEraseRequestSecretModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-erase-requests/inbox": {
      "get": {
        "tags": [
          "SecretEraseRequests"
        ],
        "summary": "Get Secret Erase Requests by Status for Current User.",
        "description": "Get Secret Erase Requests by Status for Current User.",
        "operationId": "SecretEraseRequestsService_InboxSearch",
        "parameters": [
          {
            "name": "filter.isMyRequest",
            "in": "query",
            "description": "IsMyRequest",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.status",
            "in": "query",
            "description": "Status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Erase Request Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretEraseRequestModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-erase-requests/search": {
      "get": {
        "tags": [
          "SecretEraseRequests"
        ],
        "summary": "Search Secret Erase Requests by Status for Current User.",
        "description": "Search Secret Erase Requests by Status for Current User.",
        "operationId": "SecretEraseRequestsService_Search",
        "parameters": [
          {
            "name": "filter.isMyRequest",
            "in": "query",
            "description": "IsMyRequest",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "SecretId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.status",
            "in": "query",
            "description": "Status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Erase Request Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretEraseRequestModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-erase-requests/run-now": {
      "get": {
        "tags": [
          "SecretEraseRequests"
        ],
        "summary": "Process approved SecretEraseRequests whose EraseAfter time has passed.",
        "description": "Process approved SecretEraseRequests whose EraseAfter time has passed.",
        "operationId": "SecretEraseRequestsService_ProcessNow",
        "responses": {
          "200": {
            "description": "Attempt to process ready requests.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-erase-requests": {
      "put": {
        "tags": [
          "SecretEraseRequests"
        ],
        "summary": "Update a Secret Erase Request",
        "description": "Update a Secret Erase Request",
        "operationId": "SecretEraseRequestsService_UpdateRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretEraseRequestUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Erase Request Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretEraseRequestActionResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretEraseRequests"
        ],
        "summary": "Create a new Secret Erase Request",
        "description": "Create a new Secret Erase Request",
        "operationId": "SecretEraseRequestsService_CreateRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretEraseRequestCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Erase Request Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretEraseRequestActionResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-extensions/web-secret-templates": {
      "get": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Get Secret Templates",
        "description": "Get Secret Templates valid for web passwords",
        "operationId": "SecretExtensionsService_GetWebSecretTemplates",
        "responses": {
          "200": {
            "description": "List of Secret Templates",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of Secret Templates",
                  "items": {
                    "$ref": "#/components/schemas/SecretTemplateModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-extensions/search-by-url": {
      "post": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Search Secrets by Url",
        "description": "Search for Secrets that match a URL",
        "operationId": "SecretExtensionsService_Search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "String",
                "type": "string"
              }
            }
          },
          "description": "url"
        },
        "responses": {
          "200": {
            "description": "Secret search result object",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Secret search result object",
                  "items": {
                    "$ref": "#/components/schemas/SecretSearchByUrlSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-extensions/search-ad-secrets-by-domain": {
      "post": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Search Secrets by Domain",
        "description": "Search for Secrets that match a domain",
        "operationId": "SecretExtensionsService_SearchActiveDirectorySecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "String",
                "type": "string"
              }
            }
          },
          "description": "domain"
        },
        "responses": {
          "200": {
            "description": "Secret search result object",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Secret search result object",
                  "items": {
                    "$ref": "#/components/schemas/SecretExtensionSearchSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-extensions/search-windows-account-secrets-by-computer-name": {
      "post": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Search Secrets by Computer Name",
        "description": "Search for Secrets that match a computer name",
        "operationId": "SecretExtensionsService_SearchWindowsAccountSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "String",
                "type": "string"
              }
            }
          },
          "description": "computerName"
        },
        "responses": {
          "200": {
            "description": "Secret search result object",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Secret search result object",
                  "items": {
                    "$ref": "#/components/schemas/SecretExtensionSearchSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-extensions/autofill-values": {
      "post": {
        "tags": [
          "SecretExtensions"
        ],
        "summary": "Get AutoFill values for Url by SecretId",
        "description": "Get AutoFill values (username and password) for Url by SecretId",
        "operationId": "SecretExtensionsService_GetAutoFillValues",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionAutoFillValueArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Autofill values result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretExtensionAutoFillResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrethealth/exposure": {
      "get": {
        "tags": [
          "SecretHealth"
        ],
        "summary": "Check exposure of Secret since last password change",
        "description": "Check exposure of Secret since last password change",
        "operationId": "SecretHealthService_GetSecretExposure",
        "parameters": [
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "SecretId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretViewedByUserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-detail/{secretId}/hook/{secretHookId}": {
      "put": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Update Secret Hook",
        "description": "Update Secret hook",
        "operationId": "SecretHooksService_UpdateHook",
        "parameters": [
          {
            "name": "secretHookId",
            "in": "path",
            "description": "secretHookId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailHookUpdateArgs"
        },
        "responses": {
          "200": {
            "description": "Secret hook retrieved after updates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Delete Secret Hook",
        "description": "Delete Secret Hook",
        "operationId": "SecretHooksService_DeleteHook",
        "parameters": [
          {
            "name": "secretHookId",
            "in": "path",
            "description": "secretHookId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success or failure",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-detail/{secretId}/hooks": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Get Secret Hooks",
        "description": "Get all of the hooks for the specified secret",
        "operationId": "SecretHooksService_GetHooks",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A collection",
                  "items": {
                    "$ref": "#/components/schemas/SecretDetailHookSummaryViewModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-detail/{secretId}/hook/stub/{scriptId}": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Stub Hook",
        "description": "Get stub for a new Secret hook",
        "operationId": "SecretHooksService_StubHook",
        "parameters": [
          {
            "name": "scriptId",
            "in": "path",
            "description": "scriptId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stub for a new Secret hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-detail/{secretId}/hook/get/{secretHookId}": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Get Secret hook details",
        "description": "Get Secret hook details",
        "operationId": "SecretHooksService_GetHook",
        "parameters": [
          {
            "name": "secretHookId",
            "in": "path",
            "description": "secretHookId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret hook details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-detail/{secretId}/hooks": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Get Secret Hooks",
        "description": "Get all of the hooks for the specified secret",
        "operationId": "SecretHooksService_GetHooksV2",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A collection",
                  "items": {
                    "$ref": "#/components/schemas/SecretDetailHookSummaryViewModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-detail/{secretId}/hook/stub/{scriptId}": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Stub Hook",
        "description": "Get stub for a new Secret hook",
        "operationId": "SecretHooksService_StubHookV2",
        "parameters": [
          {
            "name": "scriptId",
            "in": "path",
            "description": "scriptId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stub for a new Secret hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-detail/{secretId}/hook/get/{secretHookId}": {
      "get": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Get Secret hook details",
        "description": "Get Secret hook details",
        "operationId": "SecretHooksService_GetHookV2",
        "parameters": [
          {
            "name": "secretHookId",
            "in": "path",
            "description": "secretHookId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret hook details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-detail/{secretId}/hook": {
      "post": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Create Secret hook",
        "description": "Create Secret hook",
        "operationId": "SecretHooksService_CreateHook",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailHookCreateArgs"
        },
        "responses": {
          "200": {
            "description": "Newly created Secret hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-detail/{secretId}/hook": {
      "post": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Create Secret hook v2",
        "description": "Create Secret hook v2",
        "operationId": "SecretHooksService_CreateHookV2",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailHookCreateArgs"
        },
        "responses": {
          "200": {
            "description": "Newly created Secret hook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-detail/{secretId}/hook/{secretHookId}": {
      "put": {
        "tags": [
          "SecretHooks"
        ],
        "summary": "Update Secret Hook",
        "description": "Update Secret hook",
        "operationId": "SecretHooksService_UpdateHookV2",
        "parameters": [
          {
            "name": "secretHookId",
            "in": "path",
            "description": "secretHookId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailHookUpdateArgs"
        },
        "responses": {
          "200": {
            "description": "Secret hook retrieved after updates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-permissions/{id}": {
      "get": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Get Secret Permission",
        "description": "Get a single secret permission by ID",
        "operationId": "SecretPermissionsService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive permissions in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret permission ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Update Secret Permission",
        "description": "Update a single secret permission by ID",
        "operationId": "SecretPermissionsService_UpdateSecretPermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret permission ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretPermissionUpdateArgs"
              }
            }
          },
          "description": "Secret permission update options"
        },
        "responses": {
          "200": {
            "description": "Secret permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Delete Secret Permission",
        "description": "Delete a secret permission by ID",
        "operationId": "SecretPermissionsService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret permission ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-permissions": {
      "get": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Search Secret Permissions",
        "description": "Search, filter, sort, and page secret permissions",
        "operationId": "SecretPermissionsService_SearchSecretPermissions",
        "parameters": [
          {
            "name": "filter.domainName",
            "in": "query",
            "description": "DomainName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Filter by group ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.groupName",
            "in": "query",
            "description": "GroupName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "Filter by secret ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.userName",
            "in": "query",
            "description": "UserName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permissions search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretPermissionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Create Secret Permission",
        "description": "Create a new secret permission",
        "operationId": "SecretPermissionsService_AddSecretPermission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretPermissionCreateArgs"
              }
            }
          },
          "description": "Secret permission creation options"
        },
        "responses": {
          "200": {
            "description": "Secret permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-permissions/stub": {
      "get": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Get Secret Permission Stub",
        "description": "Return the default values for a new secret permission",
        "operationId": "SecretPermissionsService_Stub",
        "parameters": [
          {
            "name": "secretId",
            "in": "query",
            "description": "Options for generating a secret permission stub",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{secretId}/share": {
      "patch": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Update Secret share inherit",
        "description": "Update a single secret for share inheritance",
        "operationId": "SecretPermissionsService_UpdateSecretShare",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretShareUpdateArgs"
              }
            }
          },
          "description": "Secret share update options"
        },
        "responses": {
          "200": {
            "description": "Secret share inheritance result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretShareModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-permissions/is-current-user-secret-owner": {
      "post": {
        "tags": [
          "SecretPermissions"
        ],
        "summary": "Check Current User is Owner",
        "description": "Check if the current user is a Secret Owner using the submitted Permissions.",
        "operationId": "SecretPermissionsService_IsCurrentUserSecretOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretPermissionsIsCurrentUserSecretOwnerArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "SecretPermissionsCurrentUserIsOwnerModel object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPermissionsIsCurrentUserSecretOwnerResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-policy/search": {
      "get": {
        "tags": [
          "SecretPolicy"
        ],
        "summary": "Search Secret Policies",
        "description": "Search Secret Policies",
        "operationId": "SecretPolicyService_SearchSecretPolicies",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether or not to include inactive secret policies",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.secretPolicyName",
            "in": "query",
            "description": "Results will contain this text in the policy name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Policies that matched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfSecretPolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-policy/stub": {
      "get": {
        "tags": [
          "SecretPolicy"
        ],
        "summary": "Get Secret Policy Stub",
        "description": "Get Secret Policy",
        "operationId": "SecretPolicyService_GetSecretPolicyStubV2",
        "responses": {
          "200": {
            "description": "Stub of a Secret Policy Detail model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPolicyDetailModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-policy/{id}": {
      "get": {
        "tags": [
          "SecretPolicy"
        ],
        "summary": "Get Secret Policy",
        "description": "Get Secret Policy for passed in Id",
        "operationId": "SecretPolicyService_GetSecretPolicyV2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Policy if found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPolicyDetailModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "SecretPolicy"
        ],
        "summary": "Update a Secret Policy",
        "description": "Update a Secret Policy and return detail model",
        "operationId": "SecretPolicyService_UpdateSecretPolicyV2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretPolicyUpdateArgsV2"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Policy that was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPolicyDetailModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-policy/{id}/audit": {
      "get": {
        "tags": [
          "SecretPolicy"
        ],
        "summary": "Get Secret Policy Audits",
        "description": "Get Secret Policy Audits for passed in Id",
        "operationId": "SecretPolicyService_GetSecretPolicyAudit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Policy Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfSecretPolicyAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-policy/{id}/status": {
      "get": {
        "tags": [
          "SecretPolicy"
        ],
        "summary": "Get the Secret Policy status",
        "description": "Gets the status of what secrets and folders the policy is applied to.",
        "operationId": "SecretPolicyService_GetSecretPolicyStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Policy status for queried policy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPolicyStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-policy": {
      "post": {
        "tags": [
          "SecretPolicy"
        ],
        "summary": "Create a Secret Policy",
        "description": "Create a Secret Policy and return detail model",
        "operationId": "SecretPolicyService_CreateSecretPolicyV2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretPolicyCreateArgsV2"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Policy that was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretPolicyDetailModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret",
        "description": "Update a single secret by ID",
        "operationId": "SecretsService_UpdateSecret",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretUpdateArgs"
              }
            }
          },
          "description": "Secret update options"
        },
        "responses": {
          "200": {
            "description": "Secret object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Secrets"
        ],
        "summary": "Deactivate a Secret",
        "description": "A deactivated secret is hidden from users who do not have a role containing the View Deleted Secrets permission. Secret Server uses these \"soft deletes\" to maintain the audit history for all data. However, deactivated secrets are still accessible by administrators (like a permanent Recycle Bin) to ensure that audit history is maintained and to support recovery. A user must have the \"View Deleted Secrets\" permission in addition to Owner permission on a secret to access the secret View page for a deleted secret. To permanently remove all information on a secret, use the \"Erase Secret\" function.",
        "operationId": "SecretsService_Delete",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/fields/{slug}/listdetails": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret List Field List Data",
        "description": "Get the lists associated to a secret list data field",
        "operationId": "SecretsService_GetListFieldListDefinitions",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "The field slug name of the list field. This is the fieldSlugName property of the SecretField object. By default, it is the lower-case field name with all spaces replaced with dashes (-).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Combined summary of all lists assigned to the secret field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret List Field List Data",
        "description": "Updates the lists associated to a secret list data field",
        "operationId": "SecretsService_UpdateListFieldListDefinitions",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretListFieldListArgs"
              }
            }
          },
          "description": "Secret options"
        },
        "responses": {
          "200": {
            "description": "Combined summary of all lists assigned to the secret field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Secrets"
        ],
        "summary": "Delete Secret List Field List Data",
        "description": "Deletes the lists associated to a secret list data field",
        "operationId": "SecretsService_DeleteListFieldListDefinitions",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "listGuid",
            "in": "query",
            "description": "Secret options",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Combined summary of all lists assigned to the secret field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfCategorizedListSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secrets": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Search Secrets",
        "description": "Search, filter, sort, and page secrets",
        "operationId": "SecretsService_SearchV2",
        "parameters": [
          {
            "name": "filter.allowDoubleLocks",
            "in": "query",
            "description": "Whether to allow DoubleLocks as part of the search. True by default.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.doNotCalculateTotal",
            "in": "query",
            "description": "Whether to return the total number of secrets matching the filters. False by default. If false, the total can be retrieved separately by calling /v1/secrets/search-total with the same arguments used in the search.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.doubleLockId",
            "in": "query",
            "description": "Only include Secrets with this DoubleLock ID assigned in the search results.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.extendedFields",
            "in": "query",
            "description": "An array of names of Secret Template fields to return.  Only exposed fields can be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.extendedTypeId",
            "in": "query",
            "description": "If not null, return only secrets matching the specified extended mapping type as defined on the secret’s template.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "If not null, returns only secrets within the specified folder.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.hasLauncher",
            "in": "query",
            "description": "Whether to only return secrets with or without launchers. If null, returns secrets regardless of whether they have launchers.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.heartbeatStatus",
            "in": "query",
            "description": "If not null, returns only secrets with a certain heartbeat status.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "Whether to include active secrets in results (when excluded equals true).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in results.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeRestricted",
            "in": "query",
            "description": "Whether to include restricted secrets in results. Restricted secrets are secrets that are DoubleLocked, require approval, or require a comment to view.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeSubFolders",
            "in": "query",
            "description": "Whether to include secrets in subfolders of the specified folder.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.isExactMatch",
            "in": "query",
            "description": "Whether to do an exact match of the search text or a partial match. If an exact match, the entire secret name, field value, or list option in a list field must match the search text.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.onlyRPCEnabled",
            "in": "query",
            "description": "Whether to only include secrets whose template has Remote Password Changing enabled.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.onlySharedWithMe",
            "in": "query",
            "description": "When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.passwordTypeIds",
            "in": "query",
            "description": "If not null, returns only secrets matching the specified password types.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by List, View, Edit, or Owner permission. Default is List.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.scope",
            "in": "query",
            "description": "Specify whether to search All, Recent, or Favorites",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchField",
            "in": "query",
            "description": "If set, restricts the search to only match secrets where the value of the field specified by name contains the search text.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchFieldSlug",
            "in": "query",
            "description": "If set, restricts the search to only match secrets where the value of the field specified by the slug name contains the search text. This will override SearchField.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "The text to match in the secret name, field value, or list field contents.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.secretTemplateIds",
            "in": "query",
            "description": "If not null or empty, returns only secrets matching the specified templates.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "If not null, returns only secrets within a the specified site.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secrets/search-total": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Search Total",
        "description": "Gets the total number of secrets matching the secret search filter",
        "operationId": "SecretsService_SearchTotalV2",
        "parameters": [
          {
            "name": "filter.allowDoubleLocks",
            "in": "query",
            "description": "Whether to allow DoubleLocks as part of the search. True by default.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.doNotCalculateTotal",
            "in": "query",
            "description": "Whether to return the total number of secrets matching the filters. False by default. If false, the total can be retrieved separately by calling /v1/secrets/search-total with the same arguments used in the search.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.doubleLockId",
            "in": "query",
            "description": "Only include Secrets with this DoubleLock ID assigned in the search results.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.extendedFields",
            "in": "query",
            "description": "An array of names of Secret Template fields to return.  Only exposed fields can be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.extendedTypeId",
            "in": "query",
            "description": "If not null, return only secrets matching the specified extended mapping type as defined on the secret’s template.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "If not null, returns only secrets within the specified folder.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.hasLauncher",
            "in": "query",
            "description": "Whether to only return secrets with or without launchers. If null, returns secrets regardless of whether they have launchers.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.heartbeatStatus",
            "in": "query",
            "description": "If not null, returns only secrets with a certain heartbeat status.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "Whether to include active secrets in results (when excluded equals true).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in results.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeRestricted",
            "in": "query",
            "description": "Whether to include restricted secrets in results. Restricted secrets are secrets that are DoubleLocked, require approval, or require a comment to view.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeSubFolders",
            "in": "query",
            "description": "Whether to include secrets in subfolders of the specified folder.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.isExactMatch",
            "in": "query",
            "description": "Whether to do an exact match of the search text or a partial match. If an exact match, the entire secret name, field value, or list option in a list field must match the search text.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.onlyRPCEnabled",
            "in": "query",
            "description": "Whether to only include secrets whose template has Remote Password Changing enabled.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.onlySharedWithMe",
            "in": "query",
            "description": "When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.passwordTypeIds",
            "in": "query",
            "description": "If not null, returns only secrets matching the specified password types.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by List, View, Edit, or Owner permission. Default is List.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.scope",
            "in": "query",
            "description": "Specify whether to search All, Recent, or Favorites",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchField",
            "in": "query",
            "description": "If set, restricts the search to only match secrets where the value of the field specified by name contains the search text.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchFieldSlug",
            "in": "query",
            "description": "If set, restricts the search to only match secrets where the value of the field specified by the slug name contains the search text. This will override SearchField.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "The text to match in the secret name, field value, or list field contents.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.secretTemplateIds",
            "in": "query",
            "description": "If not null or empty, returns only secrets matching the specified templates.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "If not null, returns only secrets within a the specified site.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Integer number of matching secrets",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Int32",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/lookup": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Lookup Secrets with Search",
        "description": "Search, filter, sort, and page secrets, returning only secret ID and name",
        "operationId": "SecretsService_SearchSecretLookup",
        "parameters": [
          {
            "name": "filter.allowDoubleLocks",
            "in": "query",
            "description": "Whether to allow DoubleLocks as part of the search. True by default.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.doNotCalculateTotal",
            "in": "query",
            "description": "Whether to return the total number of secrets matching the filters. False by default. If false, the total can be retrieved separately by calling /v1/secrets/search-total with the same arguments used in the search.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.doubleLockId",
            "in": "query",
            "description": "Only include Secrets with this DoubleLock ID assigned in the search results.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.extendedFields",
            "in": "query",
            "description": "An array of names of Secret Template fields to return.  Only exposed fields can be returned.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.extendedTypeId",
            "in": "query",
            "description": "If not null, return only secrets matching the specified extended mapping type as defined on the secret’s template.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "If not null, returns only secrets within the specified folder.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.heartbeatStatus",
            "in": "query",
            "description": "If not null, returns only secrets with a certain heartbeat status.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "Whether to include active secrets in results (when excluded equals true).",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in results.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeRestricted",
            "in": "query",
            "description": "Whether to include restricted secrets in results. Restricted secrets are secrets that are DoubleLocked, require approval, or require a comment to view.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeSubFolders",
            "in": "query",
            "description": "Whether to include secrets in subfolders of the specified folder.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.isExactMatch",
            "in": "query",
            "description": "Whether to do an exact match of the search text or a partial match. If an exact match, the entire secret name, field value, or list option in a list field must match the search text.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.onlyRPCEnabled",
            "in": "query",
            "description": "Whether to only include secrets whose template has Remote Password Changing enabled.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.onlySharedWithMe",
            "in": "query",
            "description": "When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.passwordTypeIds",
            "in": "query",
            "description": "If not null, returns only secrets matching the specified password types.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.permissionRequired",
            "in": "query",
            "description": "Specify whether to filter by List, View, Edit, or Owner permission. Default is List.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.scope",
            "in": "query",
            "description": "Specify whether to search All, Recent, or Favorites",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchField",
            "in": "query",
            "description": "If set, restricts the search to only match secrets where the value of the field specified by name contains the search text.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchFieldSlug",
            "in": "query",
            "description": "If set, restricts the search to only match secrets where the value of the field specified by the slug name contains the search text. This will override SearchField.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "The text to match in the secret name, field value, or list field contents.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.secretTemplateId",
            "in": "query",
            "description": "If not null, returns only secrets matching the specified template.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "If not null, returns only secrets within a the specified site.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretLookup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/lookup/{id}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Lookup Secret",
        "description": "Look up secret by ID and return secret name and ID",
        "operationId": "SecretsService_GetLookup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret lookup result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretLookup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/stub": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Stub",
        "description": "Return the default values for a new secret",
        "operationId": "SecretsService_Stub",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "description": "Containing folder ID. May be null unless secrets are required to be in folders.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "query",
            "description": "Secret template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secrets/{id}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret",
        "description": "Get a single secret by ID",
        "operationId": "SecretsService_GetSecretV2",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "noAutoCheckout",
            "in": "query",
            "description": "Don't check out the secret if needed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/preview": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Preview",
        "description": "Get a preview of an unrestricted secret by ID. Restricted secrets will return an AccessDeniedException.",
        "operationId": "SecretsService_GetSecretPreview",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Preview object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardViewSecret"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/summary": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Summary",
        "description": "Get the summary for a secret",
        "operationId": "SecretsService_GetSummary",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret summary object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/fields/{slug}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Field",
        "description": "Get a secret data field",
        "operationId": "SecretsService_GetField",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive secrets in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "noAutoCheckout",
            "in": "query",
            "description": "Don't check out the secret if needed",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret field value. If the field is a file attachment, the content type will be `application/octet-stream` and the response body will be the file contents.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Field",
        "description": "Update a secret data field",
        "operationId": "SecretsService_PutField",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretItemUpdateArgs"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SecretItemUpdateArgs"
              }
            }
          },
          "description": "Secret options"
        },
        "responses": {
          "200": {
            "description": "The updated value, or 'true' if the field is a file attachment",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/fields/{slug}/list": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret List Field",
        "description": "Get the items associated to a secret list data field",
        "operationId": "SecretsService_GetListField",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Combined contents of all lists assigned to the secret field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategorizedListItemValueResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/favorite": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "List a User's Favorite Secrets",
        "description": "Returns a list of secrets which the user has favorited.",
        "operationId": "SecretsService_GetFavorites",
        "responses": {
          "200": {
            "description": "Identifying information for each secret favorited",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Identifying information for each secret favorited",
                  "items": {
                    "$ref": "#/components/schemas/WidgetSecretModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/audits": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Audits by Filter",
        "description": "Get audits for a particular Secret for the given filter.",
        "operationId": "SecretsService_GetSecretAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includePasswordChangeLog",
            "in": "query",
            "description": "Whether or not to include password changes in data",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Audit Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretAuditModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/state": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret State",
        "description": "Retrieve state about a Secret such as whether it requires approval, doublelock, checkout, or other restricted actions to be performed before calling the get the secret.",
        "operationId": "SecretsService_GetSecretState",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Detail State View Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailStateViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/secret-detail/{id}/general/{isEditMode?}/{loadReadOnlyFlags?}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Detail General",
        "description": "Retrieve details about a secret.",
        "operationId": "SecretsService_GetGeneral",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isEditMode",
            "in": "query",
            "description": "isEditMode",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadReadOnlyFlags",
            "in": "query",
            "description": "loadReadOnlyFlags",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Detail State View Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailGeneralModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/settings": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Settings",
        "description": "Get Secret Settings",
        "operationId": "SecretsService_GetSecretSettings",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/launcher-sessions": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Secret Launcher Sessions By Id",
        "description": "Get secret launcher sessions",
        "operationId": "SecretsService_GetActiveSecretSessions",
        "parameters": [
          {
            "name": "filter.secretId",
            "in": "query",
            "description": "The Id of the associated Secret.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Launcher Sessions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretLauncherSessionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Launcher Sessions",
        "description": "Update or Terminate Secret Launcher Sessions",
        "operationId": "SecretsService_UpdateSecretSession",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretLauncherSessionArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Result of the update Secret Launcher Session Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretLauncherSessionActionResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/ssh-restricted-commands": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get SSH Command Restrictions on a Secret",
        "description": "Gets the SSH command restrictions for a Secret",
        "operationId": "SecretsService_GetSshRestrictedCommands",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of restricted commands",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailRestrictedSshCommandViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/general": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret General Information",
        "description": "Update Secret General Information",
        "operationId": "SecretsService_UpdateGeneral",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailUpdateGeneralArgs"
        },
        "responses": {
          "200": {
            "description": "Secret General Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailGeneralViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/email": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update User Secret Email Settings",
        "description": "Update User Secret Email Settings",
        "operationId": "SecretsService_UpdateEmail",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailUpdateEmailArgs"
        },
        "responses": {
          "200": {
            "description": "SecretDetailSettingsViewModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/security-general": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Security General Options",
        "description": "Update Secret Security General Options",
        "operationId": "SecretsService_UpdateSecurity",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailUpdateSecurityGeneralArgs"
        },
        "responses": {
          "200": {
            "description": "SecretDetailSecurityViewModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailSecurityViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secrets/{id}/general": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret General Information",
        "description": "Update Secret General Information",
        "operationId": "SecretsService_UpdateGeneralV2",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailUpdateGeneralArgs"
        },
        "responses": {
          "200": {
            "description": "Secret General Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailGeneralModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secrets/{id}/email": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update User Secret Email Settings",
        "description": "Update User Secret Email Settings",
        "operationId": "SecretsService_UpdateEmailV2",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailUpdateEmailArgs"
        },
        "responses": {
          "200": {
            "description": "SecretDetailSettingsViewModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v3/secrets/{id}/security-checkout": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Security Checkout Options",
        "description": "Update Secret Security Checkout Options",
        "operationId": "SecretsService_UpdateSecurityCheckoutV3",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDetailUpdateSecurityCheckoutArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "A model with the updated security options if available and a success code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSecurityUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secrets/{id}/security-general": {
      "patch": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Security General Options",
        "description": "Update Secret Security General Options",
        "operationId": "SecretsService_UpdateSecurityV2",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailUpdateSecurityGeneralArgs"
        },
        "responses": {
          "200": {
            "description": "SecretDetailSecurityViewModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailSecurityModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/extended-search-details": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Secret Search Extended Details",
        "description": "Pass an array of secret IDs, presumably the results of a secret search and get extended details such as has launchers or is favorite.",
        "operationId": "SecretsService_GetSecretExtendedSearchDetails",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretSearchExtendedArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret search extended details",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Secret search extended details",
                  "items": {
                    "$ref": "#/components/schemas/SecretSearchExtendedSummary"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/restricted": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Restricted Secret",
        "description": "Get a restricted secret",
        "operationId": "SecretsService_GetRestricted",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretRestrictedArgs"
        },
        "responses": {
          "200": {
            "description": "Secret object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Create Secret",
        "description": "Create a new secret",
        "operationId": "SecretsService_CreateSecret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretCreateArgs"
              }
            }
          },
          "description": "Secret creation options"
        },
        "responses": {
          "200": {
            "description": "Secret object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/heartbeat": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Run Secret Heartbeat",
        "description": "Check if secret is still valid",
        "operationId": "SecretsService_RunHeartBeat",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret summary object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/expire": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Expire Secret",
        "description": "Expire a secret",
        "operationId": "SecretsService_Expire",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretRestrictedArgs"
        },
        "responses": {
          "200": {
            "description": "Secret summary object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/change-password": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Change Secret Password",
        "description": "Change a secret's password",
        "operationId": "SecretsService_ChangePassword",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretChangePasswordArgs"
              }
            }
          },
          "description": "Secret options"
        },
        "responses": {
          "200": {
            "description": "Secret summary object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/check-in": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Check In Secret",
        "description": "Check in a secret. Checking a secret ends exclusive access to the secret and allows other users to check-out and view or edit it.",
        "operationId": "SecretsService_CheckIn",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretRestrictedArgs"
        },
        "responses": {
          "200": {
            "description": "Secret summary object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/check-out": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Check Out Secret",
        "description": "Check Out a secret",
        "operationId": "SecretsService_CheckOut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Response Code Model object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretResponseCodeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/extend-check-out": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Extend Check Out",
        "description": "Extend remaining check out time.",
        "operationId": "SecretsService_ExtendCheckOut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretCheckOutExtensionArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Check Out Extension Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretCheckOutExtensionResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/restricted/fields/{slug}": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get Restricted Secret Field",
        "description": "Get a restricted secret data field",
        "operationId": "SecretsService_RestrictedField",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Secret ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "description": "Secret field name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretRestrictedArgs"
        },
        "responses": {
          "200": {
            "description": "Secret field value. If the field is a file attachment, the content type will be `application/octet-stream` and the response body will be the file contents.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/rdpproxy": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get RDP Proxy Information",
        "description": "Get RDP Proxy Information",
        "operationId": "SecretsService_GetSecretRdpProxyInfo",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretProxyArgs"
        },
        "responses": {
          "200": {
            "description": "RDP Proxy Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretRdpProxyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/sshproxy": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get SSH Proxy Information",
        "description": "Get SSH Proxy Information",
        "operationId": "SecretsService_GetSecretSshProxyInfo",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretProxyArgs"
        },
        "responses": {
          "200": {
            "description": "SSH Proxy Information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSshProxyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/sshterminal": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Get SSH Terminal Details",
        "description": "Get SSH Terminal Details",
        "operationId": "SecretsService_GetSecretSshTerminalDetails",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretSshTerminalArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "SSH Terminal Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSshTerminalModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{secretId}/favorite": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Favorite a Secret",
        "description": "Used to favorite or unfavorite an individual Secret",
        "operationId": "SecretsService_Favorite",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "The secret to favorite or unfavorite.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteSecretArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Whether or not the secret is now favorited by the user.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/stop-password-change": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Attempt to stop a password change",
        "description": "Attempt to stop a password change",
        "operationId": "SecretsService_StopPasswordChange",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attempt to stop a password change",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailStopPasswordResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/convert-template": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Convert template",
        "description": "Convert template",
        "operationId": "SecretsService_ConvertTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDetailConvertTemplateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Convert template result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailConvertTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/get-convert-info": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Convert template",
        "description": "Convert template",
        "operationId": "SecretsService_GetConvertInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDetailConvertTemplateInfoArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Convert template result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConvertTemplateDetailsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/export": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Export Secrets",
        "description": "Exports secrets",
        "operationId": "SecretsService_ExportSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretsExportArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Exported secrets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretsExportResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/rpc-script-secrets": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update which Secrets are available for RPC scripts",
        "description": "Update which Secrets are available for RPC scripts",
        "operationId": "SecretsService_UpdateRpcScriptSecrets",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailUpdateRpcScriptSecretsArgs"
        },
        "responses": {
          "200": {
            "description": "SecretDetailRpcViewModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailRpcModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/activate": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Undelete a Secret",
        "description": "Undelete a Secret",
        "operationId": "SecretsService_UndeleteSecret",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailGeneralModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secrets/{id}/rpc-script-secrets": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update which Secrets are available for RPC scripts",
        "description": "Update which Secrets are available for RPC scripts",
        "operationId": "SecretsService_UpdateRpcScriptSecretsV2",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SecretDetailUpdateRpcScriptSecretsArgs"
        },
        "responses": {
          "200": {
            "description": "SecretDetailRpcViewModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailRpcModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v3/secrets/{id}/security-approval": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Secret Security Approval Options",
        "description": "Update Secret Security Approval Options",
        "operationId": "SecretsService_UpdateSecurityApprovalV3",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDetailUpdateSecurityApprovalArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "SecretDetailSecurityViewModel",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSecurityUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secrets/{id}/activate": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Undelete a Secret",
        "description": "Undelete a Secret",
        "operationId": "SecretsService_UndeleteSecretV2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailGeneralModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{id}/expiration": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update a Secret expiration",
        "description": "Update a Secret expiration",
        "operationId": "SecretsService_UpdateExpiration",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretPath",
            "in": "query",
            "description": "A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDetailUpdateExpirationArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Updated secret settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretDetailSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secrets/{secretId}/update-ssh-restricted-commands": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Restricted SSH Commands on a Secret",
        "description": "Update the restricted SSH commands configured on a Secret",
        "operationId": "SecretsService_UpdateSshRestrictedCommands",
        "parameters": [
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Automatically check in a secret after finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoCheckout",
            "in": "query",
            "description": "Automatically check out secret before finding or updating.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "autoComment",
            "in": "query",
            "description": "Leave a comment when checking in or out.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "forceCheckIn",
            "in": "query",
            "description": "If secret is checked out, then force a check in.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDetailSshRestrictedCommandUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-detail/{secretId}/jumpbox-route-selection": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "summary": "Update Jumpbox Route Selection",
        "description": "Update Jumpbox Route Selection",
        "operationId": "SecretsService_UpdateJumpboxRouteSelection",
        "parameters": [
          {
            "name": "secretId",
            "in": "path",
            "description": "secretId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretDetailJumpboxUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Jumpbox Route View Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JumpboxRouteSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secretserversettings/export": {
      "get": {
        "tags": [
          "SecretServerSettings"
        ],
        "summary": "Get Secret Server Settings",
        "description": "Get Secret Server Settings",
        "operationId": "SecretServerSettingsService_GetExport",
        "parameters": [
          {
            "name": "loadAdvancedSettings",
            "in": "query",
            "description": "LoadAdvancedSettings",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadAll",
            "in": "query",
            "description": "LoadAll",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadApplicationSettings",
            "in": "query",
            "description": "LoadApplicationSettings",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadEmail",
            "in": "query",
            "description": "LoadEmail",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadFolderSettings",
            "in": "query",
            "description": "LoadFolderSettings",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadLauncherSettings",
            "in": "query",
            "description": "LoadLauncherSettings",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadLicenses",
            "in": "query",
            "description": "LoadLicenses",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadLocalUserPasswords",
            "in": "query",
            "description": "LoadLocalUserPasswords",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadLogin",
            "in": "query",
            "description": "LoadLogin",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadPermissionOptions",
            "in": "query",
            "description": "LoadPermissionOptions",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadProtocolHandlerSettings",
            "in": "query",
            "description": "LoadProtocolHandlerSettings",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadSaml",
            "in": "query",
            "description": "LoadSaml",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadSecurity",
            "in": "query",
            "description": "LoadSecurity",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadSessionRecording",
            "in": "query",
            "description": "LoadSessionRecording",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadSshCommands",
            "in": "query",
            "description": "LoadSshCommands",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadTicketSystem",
            "in": "query",
            "description": "LoadTicketSystem",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadUserExperience",
            "in": "query",
            "description": "LoadUserExperience",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loadUserInterface",
            "in": "query",
            "description": "LoadUserInterface",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Server Settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretServerSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secretserversettings/export/stub": {
      "get": {
        "tags": [
          "SecretServerSettings"
        ],
        "summary": "Stub an empty Secret Server Settings export",
        "description": "Returns an empty Secret Server Settings export to be filled out.",
        "operationId": "SecretServerSettingsService_GetExportStub",
        "responses": {
          "200": {
            "description": "An empty Secret Server Settings export",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretServerSettingsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secretserversettings/capabilities": {
      "post": {
        "tags": [
          "SecretServerSettings"
        ],
        "summary": "Get Import/Export Capabilities",
        "description": "Returns model indicating what the user can import and export.",
        "operationId": "SecretServerSettingsService_GetExportImportCapabilities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretServerSettingsImportCapabilitiesArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Capability model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretServerSettingsImportCapabilityModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secretserversettings/import": {
      "post": {
        "tags": [
          "SecretServerSettings"
        ],
        "summary": "Import Secret Server Settings",
        "description": "Apply a set of Secret Server Settings via a JSON upload.",
        "operationId": "SecretServerSettingsService_ImportSetting",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretServerSettingsImportArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The now active configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretServerSettingsImportResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/recorded-sessions": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Search Recorded Sessions",
        "description": "Search, filter, sort, and page recorded sessions",
        "operationId": "SecretSessionsService_SearchSessions",
        "parameters": [
          {
            "name": "filter.active",
            "in": "query",
            "description": "Filter by active or inactive status",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.dateRange",
            "in": "query",
            "description": "Return sessions within a certain number of days",
            "required": false,
            "schema": {
              "type": "string",
              "format": "time-span"
            }
          },
          {
            "name": "filter.endDate",
            "in": "query",
            "description": "EndDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter.endTime",
            "in": "query",
            "description": "EndTime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.folderId",
            "in": "query",
            "description": "Filter by folder",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.groupIds",
            "in": "query",
            "description": "Return sessions for specific groups",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.includeNonSecretServerSessions",
            "in": "query",
            "description": "IncludeNonSecretServerSessions",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeOnlyLaunchedSuccessfully",
            "in": "query",
            "description": "Return only sessions that launched successfully",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeRestricted",
            "in": "query",
            "description": "Whether to include restricted secret sessions",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeSubFolders",
            "in": "query",
            "description": "Whether to include subfolders in a folder search",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.launcherTypeId",
            "in": "query",
            "description": "Filter by launcher type",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchTypes",
            "in": "query",
            "description": "Specifies the sources of information you want to search across, can be many of (SecretItems, Username, Hostname, Domain, RdpKeystroke, RdpApplication, ProxyClient)",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.secretIds",
            "in": "query",
            "description": "Return sessions for specific secrets",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.siteId",
            "in": "query",
            "description": "SiteId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.startDate",
            "in": "query",
            "description": "StartDate",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter.startTime",
            "in": "query",
            "description": "StartTime",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.userIds",
            "in": "query",
            "description": "Return sessions for specific users",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretSessionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/recorded-sessions/{id}": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Get Recorded Session",
        "description": "Get a single recorded session by ID",
        "operationId": "SecretSessionsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSessionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/recorded-sessions/{id}/summary": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Recorded Session Summary",
        "description": "Get the summary for a recorded session",
        "operationId": "SecretSessionsService_GetSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretSessionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/recorded-sessions/{id}/points-of-interest": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Recorded Session Points of Interest",
        "description": "Get the points of interest for a recorded session",
        "operationId": "SecretSessionsService_SearchPointsOfInterest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session points of interest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretSessionPointOfInterestModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/recorded-sessions/{id}/points-of-interest-summary": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Recorded Session Points of Interest Summary",
        "description": "Get the points of interest summary for a recorded session",
        "operationId": "SecretSessionsService_SearchPointsOfInterestSummary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session points of interest summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfISecretSessionPointOfInterestSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/recorded-sessions/{id}/session-recordings": {
      "get": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Recorded Session Video Stream",
        "description": "Get the video stream for a recorded session",
        "operationId": "SecretSessionsService_GetSessionRecording",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recorded session video stream",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StreamContentResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/recorded-sessions/{id}/request-processing": {
      "post": {
        "tags": [
          "SecretSessions"
        ],
        "summary": "Request Immediate Session Processing",
        "description": "Issues a request for the immediate processing of a session video",
        "operationId": "SecretSessionsService_ProcessSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Recorded session ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-template-permissions/grouped": {
      "get": {
        "tags": [
          "SecretTemplatePermissions"
        ],
        "summary": "Get Secret Template Permissions",
        "description": "Get Secret Template Permissions",
        "operationId": "SecretTemplatePermissionsService_SearchTemplatePermissions",
        "parameters": [
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Will only return permissions that apply to this group",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.templateId",
            "in": "query",
            "description": "Will only return permissions that apply to this template",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "Will only return permissions that apply to this user",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template Permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretTemplateGroupedPermissionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-template-permissions": {
      "get": {
        "tags": [
          "SecretTemplatePermissions"
        ],
        "summary": "Search Secret Template Permissions",
        "description": "Search, filter, sort, and page secret template permissions",
        "operationId": "SecretTemplatePermissionsService_Search",
        "parameters": [
          {
            "name": "filter.groupId",
            "in": "query",
            "description": "Group Id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.secretTypeId",
            "in": "query",
            "description": "Secret type (template) Id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template permission search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretTemplateGroupSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SecretTemplatePermissions"
        ],
        "summary": "Update Secret Templates Permissions",
        "description": "Change permissions",
        "operationId": "SecretTemplatePermissionsService_Update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplatePermissionsUpdateArgs"
              }
            }
          },
          "description": "Secret permission creation options"
        },
        "responses": {
          "200": {
            "description": "Secret permission object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplatePermissionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-template-permissions/roles": {
      "get": {
        "tags": [
          "SecretTemplatePermissions"
        ],
        "summary": "Get Secret Template Permission Roles",
        "description": "Get Secret Template Permission Roles",
        "operationId": "SecretTemplatePermissionsService_GetTemplatePermissionRoles",
        "responses": {
          "200": {
            "description": "Secret Template Permission Role",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Secret Template Permission Role",
                  "items": {
                    "$ref": "#/components/schemas/SecretTemplatePermissionRole"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-template-permissions/{secretTypeId}": {
      "put": {
        "tags": [
          "SecretTemplatePermissions"
        ],
        "summary": "Update Secret Template Type Permissions",
        "description": "Update all the permissions for a single Secret template",
        "operationId": "SecretTemplatePermissionsService_UpdateTemplatePermissions",
        "parameters": [
          {
            "name": "secretTypeId",
            "in": "path",
            "description": "secretTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateTypePermissionsUpdateArgs"
              }
            }
          },
          "description": "Secret permission update options"
        },
        "responses": {
          "200": {
            "description": "Update permissions status response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateTypePermissionsUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/fields/{templateFieldId}": {
      "delete": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Disable a Secret Template Field For Template",
        "description": "Disable a Secret Template Field For Template",
        "operationId": "SecretTemplatesService_DisableField",
        "parameters": [
          {
            "name": "templateFieldId",
            "in": "path",
            "description": "Secret Template Field to disable",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template Field object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateField"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/password-requirements/password-dictionaries/{id}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Gets password dictionary items by ID",
        "description": "Returns a file containing the items of a specific custom password dictionary.",
        "operationId": "SecretTemplatesService_GetPasswordDictionary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Deletes a specific password dictionary by ID",
        "description": "Deletes a specific custom password dictionary with the contents.",
        "operationId": "SecretTemplatesService_DeletePasswordDictionary",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "true",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{secretTemplateId}/extended-mappings/{extendedTypeId}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get a single Secret Template Extended Mappings",
        "description": "Get an extended mapping for a Secret Template",
        "operationId": "SecretTemplatesService_GetSecretTemplateExtendedMapping",
        "parameters": [
          {
            "name": "extendedTypeId",
            "in": "path",
            "description": "extendedTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Extended Mapping Detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateExtendedMappingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Create a Secret Template Extended Mapping",
        "description": "Create an extended mappings for a Secret Template",
        "operationId": "SecretTemplatesService_CreateSecretTemplateExtendedMapping",
        "parameters": [
          {
            "name": "extendedTypeId",
            "in": "path",
            "description": "extendedTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateExtendedMappingCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Created extended mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateExtendedMappingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Delete Extended Mapping",
        "description": "Delete an extended mapping",
        "operationId": "SecretTemplatesService_DeleteExtendedMapping",
        "parameters": [
          {
            "name": "extendedTypeId",
            "in": "path",
            "description": "extendedTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success message",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateExtendedMappingDeleteResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Update a Secret Template Extended Mapping",
        "description": "Update extended mappings for a Secret Template",
        "operationId": "SecretTemplatesService_UpdateSecretTemplateExtendedMapping",
        "parameters": [
          {
            "name": "extendedTypeId",
            "in": "path",
            "description": "extendedTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateExtendedMappingUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "List of extended mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateExtendedMappingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{secretTemplateId}/launchers/{launcherTypeId}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get a Secret Template Launcher",
        "description": "Get launcher detail for a Secret Template",
        "operationId": "SecretTemplatesService_GetSecretTemplateLauncher",
        "parameters": [
          {
            "name": "launcherTypeId",
            "in": "path",
            "description": "launcherTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Launcher Detail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateLauncherModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Create a Secret Template Launcher",
        "description": "Create a Launcher for a Secret Template",
        "operationId": "SecretTemplatesService_CreateSecretTemplateLauncher",
        "parameters": [
          {
            "name": "launcherTypeId",
            "in": "path",
            "description": "launcherTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateLauncherCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "List of Launchers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateLauncherModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Delete Secret Template Launcher",
        "description": "Delete or remove the mapping of a specific launcher type from a specific Secret template",
        "operationId": "SecretTemplatesService_DeleteSecretTemplateLauncher",
        "parameters": [
          {
            "name": "launcherTypeId",
            "in": "path",
            "description": "launcherTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateLauncherDeleteResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Update a Secret Template Launcher",
        "description": "Update a Launchers for a Secret Template",
        "operationId": "SecretTemplatesService_UpdateSecretTemplateLauncher",
        "parameters": [
          {
            "name": "launcherTypeId",
            "in": "path",
            "description": "launcherTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateLauncherUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "List of Launchers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateLauncherModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Search Secret Templates",
        "description": "Search, filter, sort, and page secret templates",
        "operationId": "SecretTemplatesService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secret templates in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeSecretCount",
            "in": "query",
            "description": "Whether to populate Secret count in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.passwordTypeIds",
            "in": "query",
            "description": "List of Password Type Ids",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretTemplateSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Create Secret Template",
        "description": "Create a new Secret Template",
        "operationId": "SecretTemplatesService_CreateTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateCreateArgs"
              }
            }
          },
          "description": "Secret Template creation options"
        },
        "responses": {
          "200": {
            "description": "Secret Template object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{id}/export": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Export Secret Template",
        "description": "Export a single secret template by ID",
        "operationId": "SecretTemplatesService_Export",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template export data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateExportModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/password-requirements/password-dictionaries": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get password dictionaries",
        "description": "Returns the list of custom password dictionaries.",
        "operationId": "SecretTemplatesService_GetPasswordDictionaries",
        "responses": {
          "200": {
            "description": "A list of password dictionary ID and names.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "A list of password dictionary ID and names.",
                  "items": {
                    "$ref": "#/components/schemas/PasswordDictionaryModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Updates a new password dictionary",
        "description": "Updates password dictionary",
        "operationId": "SecretTemplatesService_UpdatePasswordDictionary",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordDictionaryArgs"
              }
            }
          },
          "description": "The file of words"
        },
        "responses": {
          "200": {
            "description": "True",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Creates new password dictionary",
        "description": "Add new password dictionary",
        "operationId": "SecretTemplatesService_AddPasswordDictionary",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AddPasswordDictionaryArgs"
              }
            }
          },
          "description": "The file of words"
        },
        "responses": {
          "200": {
            "description": "True",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/extended-types": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Template Extended Types",
        "description": "Get all of the extended types",
        "operationId": "SecretTemplatesService_SearchSecretTemplateExtendedTypes",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of extended types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretTemplateExtendedTypeSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/extended-mappings": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Template Extended Mappings",
        "description": "Get all of the extended mappings for a Secret Template",
        "operationId": "SecretTemplatesService_SearchSecretTemplateExtendedMappings",
        "parameters": [
          {
            "name": "filter.secretTemplateId",
            "in": "query",
            "description": "SecretTemplateId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of extended mappings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretTemplateExtendedMappingSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{secretTemplateId}/extended-mappings/{extendedTypeId}/stub": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Stub a Secret Template Extended Mappings",
        "description": "Gets a stub that can be used to create an extended mapping",
        "operationId": "SecretTemplatesService_StubSecretTemplateExtendedMapping",
        "parameters": [
          {
            "name": "extendedTypeId",
            "in": "path",
            "description": "extendedTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stub of extended mapping",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateExtendedMappingModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/launcher-types": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Launcher Types",
        "description": "Get a paged list of all of the Launcher Types that exist",
        "operationId": "SecretTemplatesService_SearchLauncherTypes",
        "parameters": [
          {
            "name": "filter.applicationName",
            "in": "query",
            "description": "Application name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include inactive launcher types",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeSystemLaunchers",
            "in": "query",
            "description": "Include system launcher types",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of launcher types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfLauncherTypeSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/launchers": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Template Launchers",
        "description": "Get all of the Launchers for a Secret Template",
        "operationId": "SecretTemplatesService_SearchSecretTemplateLaunchers",
        "parameters": [
          {
            "name": "filter.secretTemplateId",
            "in": "query",
            "description": "SecretTemplateId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Launchers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretTemplateLauncherSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{secretTemplateId}/launchers/{launcherTypeId}/stub": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Stub a Secret Template Launchers",
        "description": "Gets a stub that can be used to create an launcher",
        "operationId": "SecretTemplatesService_StubSecretTemplateLauncher",
        "parameters": [
          {
            "name": "launcherTypeId",
            "in": "path",
            "description": "launcherTypeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stub of template launcher",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateLauncherModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{secretTemplateId}/password-type": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Template Password Changer",
        "description": "Get the password changer for a secret template if defined",
        "operationId": "SecretTemplatesService_GetSecretTemplatePasswordType",
        "parameters": [
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template Password Changer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplatePasswordTypeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Patch Secret Template password type",
        "description": "Create or assign password type settings on a secret template",
        "operationId": "SecretTemplatesService_PatchSecretTemplatePasswordChanger",
        "parameters": [
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplatePasswordTypePatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Updated secret template password type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplatePasswordTypeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/templates/{folderId?}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Templates ",
        "description": "Get Secret Templates with optional folderId",
        "operationId": "SecretTemplatesService_GetTemplates",
        "parameters": [
          {
            "name": "folderId",
            "in": "query",
            "description": "folderId",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/secret-templates/{secretTemplateId}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Template Details",
        "description": "Get a single secret template details by Id",
        "operationId": "SecretTemplatesService_GetV2",
        "parameters": [
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Patch Secret Template V2",
        "description": "Patch secret template details",
        "operationId": "SecretTemplatesService_PatchTemplateV2",
        "parameters": [
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateDetailPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Template Details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/fields/search": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Search Secret Template Fields",
        "description": "Search, filter, sort, and page secret template fields",
        "operationId": "SecretTemplatesService_SearchTemplateFields",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive secret template fields in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.secretTemplateId",
            "in": "query",
            "description": "Secret Template Id to filter by",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret template field summary result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecretTemplateFieldSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/fields/stub": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Stub Secret Template Field",
        "description": "Retrieve an empty secret template field",
        "operationId": "SecretTemplatesService_StubTemplateField",
        "responses": {
          "200": {
            "description": "Secret Template Field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateFieldModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/fields/{secretFieldId}": {
      "get": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Get Secret Template Field",
        "description": "Retrieve a secret template field",
        "operationId": "SecretTemplatesService_GetTemplateField",
        "parameters": [
          {
            "name": "secretFieldId",
            "in": "path",
            "description": "secretFieldId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secret Template Field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateFieldModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/fields/{secretTemplateFieldId}": {
      "patch": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Patch Secret Template Field",
        "description": "Patch a secret template field",
        "operationId": "SecretTemplatesService_PatchTemplateField",
        "parameters": [
          {
            "name": "secretTemplateFieldId",
            "in": "path",
            "description": "secretTemplateFieldId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretFieldPatchArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Template Field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateFieldModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{id}/copy": {
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Copy Secret Template",
        "description": "Copy a single secret template by ID",
        "operationId": "SecretTemplatesService_Copy",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Secret template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateCopyArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret template data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{templateId}": {
      "put": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Update Secret Template Field",
        "description": "Update a Secret Template Field",
        "operationId": "SecretTemplatesService_Put",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "Secret Template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateFieldUpdateArgs"
              }
            }
          },
          "description": "Secret Template Options"
        },
        "responses": {
          "200": {
            "description": "Secret Template Field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateField"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Create Secret Template Field For Template",
        "description": "Create a new Secret Template Field For Template",
        "operationId": "SecretTemplatesService_CreateField",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateFieldCreateArgs"
              }
            }
          },
          "description": "Secret Template Field creation options"
        },
        "responses": {
          "200": {
            "description": "Secret Template Field object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateField"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/generate-password/{secretfieldId}": {
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Generate Password",
        "description": "Generates a new password matching the Secret Field requirements",
        "operationId": "SecretTemplatesService_GeneratePassword",
        "parameters": [
          {
            "name": "secretfieldId",
            "in": "path",
            "description": "Secret field Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Generate Password result",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/import": {
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Import Secret Template",
        "description": "Imports a secret template from xml",
        "operationId": "SecretTemplatesService_ImportSecretTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateImportArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "The imported template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{secretTemplateId}/fields": {
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Create Secret Template Field",
        "description": "Create a secret template field",
        "operationId": "SecretTemplatesService_CreateTemplateField",
        "parameters": [
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretFieldCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret Template Field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateFieldModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/{secretTemplateId}/fields/sort": {
      "post": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Sort Secret Template Fields",
        "description": "Sort secret template fields for a secret template",
        "operationId": "SecretTemplatesService_SortTemplateFields",
        "parameters": [
          {
            "name": "secretTemplateId",
            "in": "path",
            "description": "secretTemplateId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplateFieldSortArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateFieldSortResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/secret-templates/password-type/{templateId}": {
      "put": {
        "tags": [
          "SecretTemplates"
        ],
        "summary": "Update Secret Templates Password Type",
        "description": "Update A Secret template Password Type Options and Fields",
        "operationId": "SecretTemplatesService_UpdateSecretTemplatePasswordType",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "Secret template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecretTemplatePasswordTypeUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Secret template object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecretTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/security-audit-logs": {
      "get": {
        "tags": [
          "SecurityAuditLogs"
        ],
        "summary": "Search Security Audit Logs",
        "description": "Search, filter, sort, and page security audit logs",
        "operationId": "SecurityAuditLogsService_SearchLogs",
        "parameters": [
          {
            "name": "filter.isExporting",
            "in": "query",
            "description": "IsExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "SearchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security audit log search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSecurityAuditLogSummaryAndSecurityAuditLogFilter"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/nodes": {
      "get": {
        "tags": [
          "ServerNodes"
        ],
        "summary": "Get Server Nodes",
        "description": "Get Server Nodes",
        "operationId": "ServerNodesService_GetList",
        "responses": {
          "200": {
            "description": "Server Node List",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Server Node List",
                  "items": {
                    "$ref": "#/components/schemas/ServerNodeModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/nodes/{nodeId}": {
      "get": {
        "tags": [
          "ServerNodes"
        ],
        "summary": "Get Server Node",
        "description": "Get Server Node",
        "operationId": "ServerNodesService_Get",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "nodeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Server Node List",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerNodeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/nodes/{nodeId}/configuration": {
      "post": {
        "tags": [
          "ServerNodes"
        ],
        "summary": "Update Server Node Configuration",
        "description": "Update Server Node Configuration",
        "operationId": "ServerNodesService_UpdateNodeConfiguration",
        "parameters": [
          {
            "name": "nodeId",
            "in": "path",
            "description": "nodeId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerNodeConfigurationModel"
              }
            }
          },
          "description": "nodeConfiguration"
        },
        "responses": {
          "200": {
            "description": "Unknown or empty response"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/sites": {
      "get": {
        "tags": [
          "Sites"
        ],
        "summary": "Get Sites",
        "description": "Get a list of Sites",
        "operationId": "SitesService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Sites",
            "content": {
              "application/json": {
                "schema": {
                  "description": "List of Sites",
                  "items": {
                    "$ref": "#/components/schemas/SiteModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v3/slack-configuration": {
      "get": {
        "tags": [
          "Slack"
        ],
        "summary": "Get Slack Configuration",
        "description": "Fetches the Slack configuration",
        "operationId": "SlackService_GetConfigurationV3",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlackConfigurationModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Slack"
        ],
        "summary": "Slack Configuration",
        "description": "Updates the Slack configuration",
        "operationId": "SlackService_UpdateConfigurationV3",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SlackConfigurationUpdateArgsV2"
              }
            }
          },
          "description": "Slack Configuration Update Options"
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlackConfigurationModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/slack-test": {
      "get": {
        "tags": [
          "Slack"
        ],
        "summary": "Test Slack Configuration",
        "description": "Sends a test Slack message to test the Slack configuration",
        "operationId": "SlackService_SendTestSlackMessage",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlackConfigurationTestResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/slack/event": {
      "post": {
        "tags": [
          "Slack"
        ],
        "summary": "Slack Event",
        "description": "Slack event endpoint that only Slack can call, does source validation",
        "operationId": "SlackService_HandleEvent",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlackResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/slack/interaction": {
      "post": {
        "tags": [
          "Slack"
        ],
        "summary": "Slack Interaction",
        "description": "Slack interation endpoint that only Slack can call, does source validation",
        "operationId": "SlackService_HandleInteraction",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SlackResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-blocklist/{id}": {
      "get": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Get an SSH Command Blocklist",
        "description": "Returns the SSH Command Blocklist for the provided ID",
        "operationId": "SshCommandBlocklistService_GetSshCommandBlocklist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SSH Command Blocklist ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The SSH Command Blocklist View",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandBlocklistModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-blocklist/list": {
      "get": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Get a list of SSH Command Blocklist",
        "description": "Returns a list of SSH Command Blocklists that meet the paging/searching critera",
        "operationId": "SshCommandBlocklistService_GetSshCommandBlocklists",
        "parameters": [
          {
            "name": "filter.includeActive",
            "in": "query",
            "description": "IncludeActive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.name",
            "in": "query",
            "description": "Name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of SSH Command Blocklists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSshCommandBlocklistSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-blocklist/stub": {
      "get": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Stub an empty SSH Command Blocklist",
        "description": "Returns an empty SSH Command Blocklist to be filled out.",
        "operationId": "SshCommandBlocklistService_GetSshCommandBlocklistStub",
        "responses": {
          "200": {
            "description": "An empty SSH Command Blocklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandBlocklistDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-blocklist/policies": {
      "get": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Get a list of Secret Policies that use the given blocklist",
        "description": "Returns a list of Secret Policies that meet the paging/searching critera",
        "operationId": "SshCommandBlocklistService_GetSshCommandBlocklistPolicies",
        "parameters": [
          {
            "name": "filter.sshCommandBlocklistId",
            "in": "query",
            "description": "Results will be associated to the provided blocklist id",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of Secret Policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfBlocklistSecretPolicySummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-blocklist/{sshCommandBlocklistId}": {
      "patch": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Update an SSH Command Blocklist",
        "description": "Update an SSH Command Blocklist",
        "operationId": "SshCommandBlocklistService_PatchSshCommandBlocklist",
        "parameters": [
          {
            "name": "sshCommandBlocklistId",
            "in": "path",
            "description": "sshCommandBlocklistId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshCommandBlocklistPatchArgs"
              }
            }
          },
          "description": "SSH Command Blocklist Update Options"
        },
        "responses": {
          "200": {
            "description": "SSH Command Blocklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandBlocklistModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-blocklist": {
      "post": {
        "tags": [
          "SshCommandBlocklist"
        ],
        "summary": "Add an SSH Command Blocklist",
        "description": "Add an SSH Command Blocklist",
        "operationId": "SshCommandBlocklistService_CreateSshCommandBlocklist",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshCommandBlocklistCreateArgs"
              }
            }
          },
          "description": "SSH Command Blocklist add options"
        },
        "responses": {
          "200": {
            "description": "SSH Command Blocklist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandBlocklistModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command/{id}": {
      "get": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Get an SSH Command",
        "description": "Returns the SSH Command for the provided ID",
        "operationId": "SshCommandService_GetSshCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "SSH Command ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The SSH Command View",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command/list": {
      "get": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Get a list of SSH Commands",
        "description": "Returns a list of SSH Commands that meet the paging/searching critera",
        "operationId": "SshCommandService_GetSshCommands",
        "parameters": [
          {
            "name": "filter.commandPermissionType",
            "in": "query",
            "description": "CommandPermissionType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.nameOrCommand",
            "in": "query",
            "description": "NameOrCommand",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of SSH Commands",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSshCommandSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command/stub": {
      "get": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Stub an empty SSH Command",
        "description": "Returns an empty SSH Command to be filled out.",
        "operationId": "SshCommandService_GetSshCommandStub",
        "responses": {
          "200": {
            "description": "An empty SSH Command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command/{sshCommandId}": {
      "patch": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Update an SSH Command",
        "description": "Update an SSH Command",
        "operationId": "SshCommandService_UpdateSshCommand",
        "parameters": [
          {
            "name": "sshCommandId",
            "in": "path",
            "description": "sshCommandId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshCommandPatchArgs"
              }
            }
          },
          "description": "SSH Command Update Options"
        },
        "responses": {
          "200": {
            "description": "SSH Command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command": {
      "post": {
        "tags": [
          "SshCommand"
        ],
        "summary": "Add an SSH Command",
        "description": "Add an SSH Command",
        "operationId": "SshCommandService_CreateSshCommand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshCommandCreateArgs"
              }
            }
          },
          "description": "SSH Command add options"
        },
        "responses": {
          "200": {
            "description": "SSH Command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-menu/search": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Search SSH Commands",
        "description": "Search, filter, sort, and page SSH Commands",
        "operationId": "SshCommandMenuService_SearchSshCommandMenu",
        "parameters": [
          {
            "name": "filter.includeDisabled",
            "in": "query",
            "description": "IncludeDisabled",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command Menu search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSshCommandMenuSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-menu/audit/search": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Search Menu Audits",
        "description": "Search, filter, sort, and page audits",
        "operationId": "SshCommandMenuService_SearchAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.sshCommandMenuName",
            "in": "query",
            "description": "SshCommandMenuName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu audit search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSshCommandMenuAuditSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-item/audit/search": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Search SSH Command, Blocklist, and Menu Audits for audit item",
        "description": "Search, filter, sort, and page audits for audit item",
        "operationId": "SshCommandMenuService_SearchItemAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.sshCommandItemNameOrNotes",
            "in": "query",
            "description": "SshCommandItemNameOrNotes",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command, Blocklist, and Menu search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSshCommandItemAuditSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-menu/{sshCommandMenuId}": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Get SSH Command Menu",
        "description": "Return details for a specific SSH Command Menu item",
        "operationId": "SshCommandMenuService_GetSshCommandMenu",
        "parameters": [
          {
            "name": "sshCommandMenuId",
            "in": "path",
            "description": "sshCommandMenuId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SSH Command Menu",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandMenuModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Update an SSH Command Menu",
        "description": "Update an SSH Command Menu",
        "operationId": "SshCommandMenuService_PatchSshCommandMenu",
        "parameters": [
          {
            "name": "sshCommandMenuId",
            "in": "path",
            "description": "sshCommandMenuId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshCommandMenuPatchArgs"
              }
            }
          },
          "description": "SSH Command Menu Update Options"
        },
        "responses": {
          "200": {
            "description": "SSH Command Menu",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandMenuModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-menu/state": {
      "get": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Get user actions for SSH Commands",
        "description": "Available user actions for commands",
        "operationId": "SshCommandMenuService_GetSshCommandState",
        "responses": {
          "200": {
            "description": "The list of actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandMenuStateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ssh-command-menu": {
      "post": {
        "tags": [
          "SshCommandMenu"
        ],
        "summary": "Add an SSH Command Menu",
        "description": "Create a new SSH Command Menu item",
        "operationId": "SshCommandMenuService_AddSshCommandMenu",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshCommandMenuCreateArgs"
              }
            }
          },
          "description": "SSH Command create options"
        },
        "responses": {
          "200": {
            "description": "SSH Command Menu",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SshCommandMenuModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Search Teams",
        "description": "Search, filter, sort, and page teams",
        "operationId": "TeamsService_Search",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include Inactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "Search Term",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfTeamDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create Team",
        "description": "Create a new team",
        "operationId": "TeamsService_CreateTeam",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCreateArgs"
              }
            }
          },
          "description": "Team creation options"
        },
        "responses": {
          "200": {
            "description": "New Team Id",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Int32",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/teams/stub": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Team Stub",
        "description": "Return the default values for a new team",
        "operationId": "TeamsService_Stub",
        "responses": {
          "200": {
            "description": "Team object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Team",
        "description": "Get a single team by ID",
        "operationId": "TeamsService_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update Team",
        "description": "Update a single team by ID",
        "operationId": "TeamsService_UpdateTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamDetailUpdateModel"
              }
            }
          },
          "description": "Team update options"
        },
        "responses": {
          "200": {
            "description": "Team object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/teams/{id}/audits": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Team Audits",
        "description": "Search, filter, sort, and page team audits",
        "operationId": "TeamsService_GetTeamAudits",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Team Audit search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfTeamAuditModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/teams/{id}/members": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Users In Team",
        "description": "Get members in a team",
        "operationId": "TeamsService_GetTeamMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
                  "items": {
                    "$ref": "#/components/schemas/TeamGroupMembershipModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Update Team Members",
        "description": "Save members of the team by GroupId",
        "operationId": "TeamsService_AddTeamMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamMemberUpdateArgs"
              }
            }
          },
          "description": "Team user add options"
        },
        "responses": {
          "200": {
            "description": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
                  "items": {
                    "$ref": "#/components/schemas/TeamGroupMembershipModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/teams/{id}/sites": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Sites for a Team",
        "description": "Get sites a team has associated",
        "operationId": "TeamsService_GetTeamSites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get Team Sites.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Get Team Sites.",
                  "items": {
                    "$ref": "#/components/schemas/TeamSiteMap"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Update Team Sites",
        "description": "Save sites of the team by SiteId",
        "operationId": "TeamsService_AddTeamSite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamSiteUpdateArgs"
              }
            }
          },
          "description": "Team site add options"
        },
        "responses": {
          "200": {
            "description": "Get Team Sites.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Get Team Sites.",
                  "items": {
                    "$ref": "#/components/schemas/TeamSiteMap"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/teams/{id}/lists": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a Team's Lists",
        "description": "Get the lists of the Team by TeamId",
        "operationId": "TeamsService_GetTeamLists",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Summary of a Team's Lists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamCategorizedListSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Update Team Lists",
        "description": "Save lists of the Team by ListId",
        "operationId": "TeamsService_AddListsToTeam",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamCategorizedListUpdateArgs"
              }
            }
          },
          "description": "Team list"
        },
        "responses": {
          "200": {
            "description": "Summary a Team's Lists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamCategorizedListSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ticket-systems": {
      "get": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Gets all ticket systems",
        "description": "Gets all ticket systems.",
        "operationId": "TicketSystemsService_GetTicketSystems",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Models",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Ticket System Models",
                  "items": {
                    "$ref": "#/components/schemas/TicketSystemModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Creates a Ticket System",
        "description": "Creates a Ticket System",
        "operationId": "TicketSystemsService_CreateTicketSystem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketSystemCreateArgs"
              }
            }
          },
          "description": "Ticket System Create Args"
        },
        "responses": {
          "200": {
            "description": "Ticket System Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketSystemModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/ticket-systems/{id}": {
      "get": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Gets a ticket system by ID",
        "description": "Gets a ticket system by ID.",
        "operationId": "TicketSystemsService_GetTicketSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ticket System ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketSystemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Updates a Ticket System",
        "description": "Updates a Ticket System",
        "operationId": "TicketSystemsService_UpdateTicketSystem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketSystemPatchArgs"
              }
            }
          },
          "description": "Ticket System Patch Args"
        },
        "responses": {
          "200": {
            "description": "Ticket System Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketSystemModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/ticket-systems": {
      "get": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Gets all ticket systems",
        "description": "Gets all ticket systems.",
        "operationId": "TicketSystemsService_GetTicketSystemsV2",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "includeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Summaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfTicketSystemSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/ticket-systems/{id}": {
      "get": {
        "tags": [
          "TicketSystems"
        ],
        "summary": "Gets a ticket system by ID",
        "description": "Gets a ticket system by ID.",
        "operationId": "TicketSystemsService_GetTicketSystemV2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Ticket System ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket System Model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketSystemModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User",
        "description": "Get a single user by ID",
        "operationId": "UsersService_Get",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether to include inactive users in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User",
        "description": "Update a single user by ID",
        "operationId": "UsersService_UpdateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateArgs"
              }
            }
          },
          "description": "User update options"
        },
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete User",
        "description": "Delete a user by ID",
        "operationId": "UsersService_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update included properties for user by Id",
        "description": "Update included properties for user by Id",
        "operationId": "UsersService_PatchUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchUserModel"
              }
            }
          },
          "description": "patchModel"
        },
        "responses": {
          "200": {
            "description": "User Configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{id}/owners/{ownerId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Owner",
        "description": "Get a single owner for a user",
        "operationId": "UsersService_GetUserOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ownerId",
            "in": "path",
            "description": "Owner ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User owner object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOwnerModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove User Owner",
        "description": "Remove an owner from a single user",
        "operationId": "UsersService_DeleteUserOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ownerId",
            "in": "path",
            "description": "Owner ID is the unique sequence for this specific owner.  This is returned as ID on UserOwnerModel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Object deletion result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{id}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets roles for user",
        "description": "Gets roles for user",
        "operationId": "UsersService_GetRoles",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfRoleSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update all roles on user",
        "description": "Update all roles on user",
        "operationId": "UsersService_UpdateUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RoleAssignments"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add roles to existing user",
        "description": "Add roles to existing user",
        "operationId": "UsersService_CreateUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RoleAssignments"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove roles from existing user",
        "description": "Remove roles from existing user",
        "operationId": "UsersService_DeleteUserRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RoleRemovals"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{id}/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Groups",
        "description": "Get the groups for a user by ID",
        "operationId": "UsersService_GetUserGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group membership results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfGroupUserSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update all groups on user",
        "description": "Update all groups on user",
        "operationId": "UsersService_UpdateUserGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GroupAssignments"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add groups to existing user",
        "description": "Add groups to existing user",
        "operationId": "UsersService_AddUserToGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GroupAssignments"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove groups from existing user",
        "description": "Remove groups from existing user",
        "operationId": "UsersService_RemoveUserGroups",
        "parameters": [
          {
            "name": "groupIds",
            "in": "query",
            "description": "groupIds",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupChangeStatusModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Search Users",
        "description": "Search, filter, sort, and page users",
        "operationId": "UsersService_SearchUsers",
        "parameters": [
          {
            "name": "filter.domainId",
            "in": "query",
            "description": "If not null, filters users by Active Directory domain.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.excludeInboxRuleIdSubscribers",
            "in": "query",
            "description": "When set all subscribers not subscribed directly to this inbox notification rule will be excluded.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive users in the results.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchFields",
            "in": "query",
            "description": "User fields to search.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "The text to match in the username, display name, or email address.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.userIds",
            "in": "query",
            "description": "User Ids to search.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create User",
        "description": "Create a new user",
        "operationId": "UsersService_CreateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateArgs"
              }
            }
          },
          "description": "User creation options"
        },
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Current User",
        "description": "Gets the current user",
        "operationId": "UsersService_GetCurrentUser",
        "responses": {
          "200": {
            "description": "Current user result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/lookup": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Lookup Users",
        "description": "Search, filter, sort, and page users, returning only user ID and name",
        "operationId": "UsersService_Lookup",
        "parameters": [
          {
            "name": "filter.domainId",
            "in": "query",
            "description": "If not null, filters users by Active Directory domain.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.excludeInboxRuleIdSubscribers",
            "in": "query",
            "description": "When set all subscribers not subscribed directly to this inbox notification rule will be excluded.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive users in the results.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchFields",
            "in": "query",
            "description": "User fields to search.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "The text to match in the username, display name, or email address.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.userIds",
            "in": "query",
            "description": "User Ids to search.",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User search result object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserLookup"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/stub": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Stub",
        "description": "Return the default values for a new user",
        "operationId": "UsersService_Stub",
        "responses": {
          "200": {
            "description": "Default User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/public-ssh-keys": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Public Ssh Keys",
        "description": "Get the public ssh keys for a user by ID",
        "operationId": "UsersService_GetUserPublicSshKeys",
        "parameters": [
          {
            "name": "filter.includeExpired",
            "in": "query",
            "description": "Whether to include expired user public ssh keys in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Whether to include inactive user public ssh keys in the results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchText",
            "in": "query",
            "description": "Search text",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.userId",
            "in": "query",
            "description": "An optional ID for a specific user's public ssh keys",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public ssh key results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserPublicSshKeySummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a User Ssh Key",
        "description": "Create the public ssh keys for the current user",
        "operationId": "UsersService_CreateUserPublicSshKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPublicSshKeyCreateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Private ssh key result",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{id}/owners": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Owners",
        "description": "Get the owners for a user by ID",
        "operationId": "UsersService_SearchUserOwners",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User owner results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserOwnerSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add User Owner",
        "description": "Add an owner to a single user",
        "operationId": "UsersService_AddUserOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOwnerCreateArgs"
              }
            }
          },
          "description": "User owner add options"
        },
        "responses": {
          "200": {
            "description": "User owner object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOwnerModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Add and remove the owners on the user",
        "description": "Add and remove the owners on the user",
        "operationId": "UsersService_PatchUserOwners",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOwnerPatchUserModel"
              }
            }
          },
          "description": "patchModel"
        },
        "responses": {
          "200": {
            "description": "A list of all user owner objects for the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOwnerPatchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/domains": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Domains",
        "description": "Get Domains",
        "operationId": "UsersService_GetDomains",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain summary list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfDomainSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{userId}/roles-assigned": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Roles",
        "description": "Get the roles for a user by ID",
        "operationId": "UsersService_GetUserRoles",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User role summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserRoleSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{userId}/audit": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Audits",
        "description": "Get all of the audits for a user",
        "operationId": "UsersService_GetSiteAudits",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/action/audit": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Audits by Action",
        "description": "Get all of the audits for users who performed the specified action",
        "operationId": "UsersService_GetUserActionAudits",
        "parameters": [
          {
            "name": "actions",
            "in": "query",
            "description": "actions",
            "required": false,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Audits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserAuditSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{userId}/teams": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Teams",
        "description": "Get all of the teams for a user",
        "operationId": "UsersService_GetUserTeams",
        "parameters": [
          {
            "name": "filter.includeGroupMemberships",
            "in": "query",
            "description": "Include Group Memberships",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "Include Inactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "Search Term",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Team Summaries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfUserTeamSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/preference": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get Preference",
        "description": "Get a Preference for the current user",
        "operationId": "UsersService_GetPreference",
        "parameters": [
          {
            "name": "isLegacy",
            "in": "query",
            "description": "Is Legacy",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "settingCode",
            "in": "query",
            "description": "Setting Code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settingName",
            "in": "query",
            "description": "Setting Name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update Preference",
        "description": "Update a Preference for the current user",
        "operationId": "UsersService_UpdatePreference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestPreferenceUpdateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Preference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/sessions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User Sessions",
        "description": "Get sessions for current user",
        "operationId": "UsersService_GetCurrentUserSessions",
        "parameters": [
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged List of Sessions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfSessionSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/public-ssh-keys/{id}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Deactivate SSH Key",
        "description": "Deactivate a User's Public SSH Key by specifying the key's ID",
        "operationId": "UsersService_DeactivateUserPublicSshKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Public SSH Key ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ID if the key deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Int32",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/change-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Change User Password",
        "description": "Change a user's password",
        "operationId": "UsersService_ChangePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChangePasswordArgs"
              }
            }
          },
          "description": "User password change options"
        },
        "responses": {
          "200": {
            "description": "User object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/verify-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify the Current User Password",
        "description": "Verify the current user's password",
        "operationId": "UsersService_VerifyPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordVerifyArgs"
              }
            }
          },
          "description": "User password verification options"
        },
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{userId}/reset-two-factor": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset 2FA",
        "description": "Reset 2FA for a specific user.  After the reset they will need to update their 2FA on next login",
        "operationId": "UsersService_ResetTwoFactor",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetTwoFactorArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Result of 2FA reset",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetTwoFactorResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{userId}/password-reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset a user password as an admin",
        "description": "The password reset command",
        "operationId": "UsersService_ResetUserPassword",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Password Reset Result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/delete-pii/{id}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user's personally identifiable info",
        "description": "Delete a user's personally identifiable info",
        "operationId": "UsersService_UserPersonalInfoDeleteCommand",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success / Fail",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/{userId}/lock-out": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Lock Out",
        "description": "Lock Out a specific user.",
        "operationId": "UsersService_LockOut",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LockOutArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Result of Lock Out",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LockOutResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/sessions/terminate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Terminate Current User Sessions",
        "description": "Terminate sessions of the current user",
        "operationId": "UsersService_TerminateCurrentUserSessions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionTerminateArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Result of Session Termination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTerminateResponseModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/users/doublelock-password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update Users Doublelock Password",
        "description": "Update the doublelock password of a user",
        "operationId": "UsersService_SetUserDoubleLockPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoubleLockSetUserPasswordArgs"
              }
            }
          },
          "description": "args"
        },
        "responses": {
          "200": {
            "description": "Result of the doublelock password change",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Boolean",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Secret Server Version",
        "description": "Retrieve Secret Server Version",
        "operationId": "VersionService_Get",
        "responses": {
          "200": {
            "description": "Version Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/instances/template/{id}": {
      "get": {
        "tags": [
          "WorkflowInstances"
        ],
        "summary": "Get Workflow Instances By Workflow Template Id.",
        "description": "Get active workflow instances that use the given workflow template",
        "operationId": "WorkflowInstancesService_GetByTemplateId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The active workflow instances that use the Workflow Template",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The active workflow instances that use the Workflow Template",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowInstanceDto"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates/{id}/steps": {
      "get": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Get Workflow Template Steps",
        "description": "Get all the steps for a workflow template",
        "operationId": "WorkflowStepTemplatesService_GetTemplateSteps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of workflow step models",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfWorkflowStepTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Update Workflow Template Steps",
        "description": "Update the steps for a workflow template",
        "operationId": "WorkflowStepTemplatesService_UpdateStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowStepTemplateUpdateArgs"
              }
            }
          },
          "description": "Workflow Template Steps creation options"
        },
        "responses": {
          "200": {
            "description": "The workflow template steps",
            "content": {
              "application/json": {
                "schema": {
                  "description": "The workflow template steps",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowStepTemplateDetailModel"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Create Workflow Step",
        "description": "Create a step for a Workflow Template",
        "operationId": "WorkflowStepTemplatesService_CreateStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowStepTemplateCreateArgs"
              }
            }
          },
          "description": "Workflow Template Step creation options"
        },
        "responses": {
          "200": {
            "description": "New Workflow Template Steps ID",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Int32",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates/steps/stub": {
      "get": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Get a Workflow Template Step Stub",
        "description": "Get an empty Workflow Template Step",
        "operationId": "WorkflowStepTemplatesService_Stub",
        "responses": {
          "200": {
            "description": "An empty workflow step",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates/{id}/steps/{stepNum}": {
      "get": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Get a Workflow Template Step",
        "description": "Get a step for a workflow template",
        "operationId": "WorkflowStepTemplatesService_GetTemplateStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stepNum",
            "in": "path",
            "description": "Workflow Step Number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A workflow step model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "WorkflowStepTemplates"
        ],
        "summary": "Update a Workflow Template Step",
        "description": "Updates a single Workflow Template Step by ID",
        "operationId": "WorkflowStepTemplatesService_UpdateStepModel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stepNum",
            "in": "path",
            "description": "Workflow Step Number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowStepTemplateUpdateModel"
              }
            }
          },
          "description": "Workflow Template update options"
        },
        "responses": {
          "200": {
            "description": "Workflow Template Step",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowStepTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Search Workflow Templates",
        "description": "Search, filter, sort, and page Workflow Templates.",
        "operationId": "WorkflowTemplatesService_SearchWorkflowTemplates",
        "parameters": [
          {
            "name": "filter.includeInactive",
            "in": "query",
            "description": "IncludeInactive",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "filter.workflowType",
            "in": "query",
            "description": "WorkflowType",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of Workflow Templates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfWorkflowTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Create a Workflow Template",
        "description": "Create a new Workflow Template.",
        "operationId": "WorkflowTemplatesService_CreateWorkflowTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTemplateCreateArgs"
              }
            }
          },
          "description": "Workflow Template creation options"
        },
        "responses": {
          "200": {
            "description": "The new Workflow Template's ID.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Int32",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates/stub": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Get a Workflow Template Stub",
        "description": "Get an empty Workflow Template.",
        "operationId": "WorkflowTemplatesService_StubWorkflowTemplate",
        "responses": {
          "200": {
            "description": "An Workflow Template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates/{id}": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Get a Workflow Template",
        "description": "Request a specific Workflow Template by ID.",
        "operationId": "WorkflowTemplatesService_GetTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Workflow Template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Update a Workflow Template",
        "description": "Update a single Workflow Template by ID.",
        "operationId": "WorkflowTemplatesService_UpdateWorkflowTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowTemplateUpdateModel"
              }
            }
          },
          "description": "Workflow Template update options"
        },
        "responses": {
          "200": {
            "description": "The updated Workflow Template.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowTemplateDetailModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates/{id}/audits": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Get a Workflow Template Audit List",
        "description": "Search, filter, sort, and page Workflow Template Audits.",
        "operationId": "WorkflowTemplatesService_SearchTemplateAudit",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isExporting",
            "in": "query",
            "description": "isExporting",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of Workflow Template Audits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagingOfWorkflowTemplateAuditModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates/{id}/entities/{includeAll}": {
      "get": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Count of Entities using a Workflow Template",
        "description": "Request the number of entities that use the Workflow Template.",
        "operationId": "WorkflowTemplatesService_GetWorkflowEntities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeAll",
            "in": "path",
            "description": "includeAll",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The number of entities that use the workflow template.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Int32",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v1/workflows/templates/{id}/cancel-requests": {
      "post": {
        "tags": [
          "WorkflowTemplates"
        ],
        "summary": "Cancel Workflow Requests",
        "description": "Cancel all Workflow Requests that are using the provided Workflow Template.",
        "operationId": "WorkflowTemplatesService_CancelRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Workflow Template Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Confirmation of cancellation.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "String",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/diagnostics/system-logs": {
      "get": {
        "tags": [
          "DiagnosticsV2"
        ],
        "summary": "Search system log",
        "description": "Search system log",
        "operationId": "DiagnosticsV2Service_SearchSystemLog",
        "parameters": [
          {
            "name": "filter.logLevel",
            "in": "query",
            "description": "LogLevel",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter.searchTerm",
            "in": "query",
            "description": "SearchTerm",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "Number of records to skip before taking results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy[0].direction",
            "in": "query",
            "description": "Sort direction",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].name",
            "in": "query",
            "description": "Sort field name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy[0].priority",
            "in": "query",
            "description": "Priority index. Sorts with lower values are executed earlier",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Maximum number of records to include in results",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System log messages that match",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IPagingOfSystemLogSummaryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "403": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationFailedResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "security": [
    {
      "BearerToken": []
    }
  ],
  "tags": [
    {
      "name": "Activations",
      "description": "Activate Licenses"
    },
    {
      "name": "ActiveDirectory",
      "description": "View and maintain Active Directory"
    },
    {
      "name": "ApiToken",
      "description": "API Token Generation"
    },
    {
      "name": "AppClients",
      "description": "View and maintain app clients"
    },
    {
      "name": "ApplicationAccounts",
      "description": "View and maintain users"
    },
    {
      "name": "ApplicationRequest",
      "description": "ApplicationRequestController"
    },
    {
      "name": "BulkOperations",
      "description": "View Bulk Operations"
    },
    {
      "name": "BulkSecretOperations",
      "description": "Create Bulk Secret Operations"
    },
    {
      "name": "BulkUserOperations",
      "description": "Create Bulk User Operations"
    },
    {
      "name": "CategorizedLists",
      "description": "View and maintain lists of options"
    },
    {
      "name": "CharacterSets",
      "description": "Character Sets used in password requirements"
    },
    {
      "name": "Configuration",
      "description": "Secret Server Configuration"
    },
    {
      "name": "ConnectionManagerSettings",
      "description": "ConnectionManagerSettingsController"
    },
    {
      "name": "DevOpsSecretsVaultSync",
      "description": "Manage secrets that are synced to DSV Tenants."
    },
    {
      "name": "DevOpsSecretsVaultTenant",
      "description": "Manage the tenants SS can communicate with in DevOps Secrets Vault."
    },
    {
      "name": "Diagnostics",
      "description": "View diagnostics information"
    },
    {
      "name": "DiagnosticsV2",
      "description": "View diagnostics information"
    },
    {
      "name": "DirectoryServices",
      "description": "View and maintain Directory Services integrations"
    },
    {
      "name": "DisasterRecovery",
      "description": "Disaster Recovery"
    },
    {
      "name": "Discovery",
      "description": "DiscoveryController"
    },
    {
      "name": "DistributedEngine",
      "description": "View and maintain Distributed Engine integrations"
    },
    {
      "name": "DomainNameIndex",
      "description": "DomainNameIndexController"
    },
    {
      "name": "DualControls",
      "description": "View and maintain dual controls"
    },
    {
      "name": "Enterprise",
      "description": "View enterprise related data"
    },
    {
      "name": "EventPipeline",
      "description": "EventPipelineController"
    },
    {
      "name": "EventPipelineAudit",
      "description": "EventPipelineAuditController"
    },
    {
      "name": "EventPipelinePolicy",
      "description": "EventPipelinePolicyController"
    },
    {
      "name": "EventPipelineSettings",
      "description": "EventPipelineSettingsController"
    },
    {
      "name": "EventPipelineTrigger",
      "description": "EventPipelineTriggerController"
    },
    {
      "name": "EventSubscriptions",
      "description": "EventSubscriptionsController"
    },
    {
      "name": "ExtendedFields",
      "description": "Extended Fields provider"
    },
    {
      "name": "FolderPermissions",
      "description": "View and maintain secret folder permissions"
    },
    {
      "name": "Folders",
      "description": "View and maintain secret folders"
    },
    {
      "name": "Groups",
      "description": "View and maintain user security groups"
    },
    {
      "name": "HealthCheck",
      "description": "HealthCheckController"
    },
    {
      "name": "HsmConfiguration",
      "description": "Secret Server HSM Configuration"
    },
    {
      "name": "Inbox",
      "description": "InboxController"
    },
    {
      "name": "InboxRules",
      "description": "InboxRulesController"
    },
    {
      "name": "IpAddressRestrictions",
      "description": "View and maintain IP Address restrictions"
    },
    {
      "name": "JumpboxRoute",
      "description": "JumpboxRouteController"
    },
    {
      "name": "KeyManagement",
      "description": "View and configure Key Management settings"
    },
    {
      "name": "LauncherAgents",
      "description": "Manage Launcher Agents and Launcher Agent Collections for Advanced Session Recording"
    },
    {
      "name": "Launchers",
      "description": "View available application launchers"
    },
    {
      "name": "License",
      "description": "LicenseController"
    },
    {
      "name": "Metadata",
      "description": "MetadataController"
    },
    {
      "name": "Mobile",
      "description": "MobileController"
    },
    {
      "name": "OAuthExpiration",
      "description": "Expire the current user session"
    },
    {
      "name": "OneTimePasswordCode",
      "description": "View and maintain one time passwords"
    },
    {
      "name": "PasswordRequirements",
      "description": "Password Requirements"
    },
    {
      "name": "PbaConfiguration",
      "description": "View and configure Privilege Behavior Analytics"
    },
    {
      "name": "Platform",
      "description": "View and maintain Platform integration"
    },
    {
      "name": "Proxy",
      "description": "Retrieve and update SSH and RDP proxy configurations"
    },
    {
      "name": "RemotePasswordChanging",
      "description": "View Password Changing Settings "
    },
    {
      "name": "Reports",
      "description": "View and maintain Reports"
    },
    {
      "name": "RoleAudit",
      "description": "View User Role Audits"
    },
    {
      "name": "RolePermissions",
      "description": "RolePermissionsController"
    },
    {
      "name": "Roles",
      "description": "View and maintain User Roles"
    },
    {
      "name": "Schedule",
      "description": "ScheduleController"
    },
    {
      "name": "Script",
      "description": "View Scripts"
    },
    {
      "name": "SdkClientAccounts",
      "description": "View and maintain SDK Client Accounts"
    },
    {
      "name": "SdkClientAudits",
      "description": "View SDK Client Audits"
    },
    {
      "name": "SdkClientRules",
      "description": "View and maintain SDK Client Rules"
    },
    {
      "name": "SecretAccessRequests",
      "description": "SecretAccessRequestsController"
    },
    {
      "name": "SecretDependencies",
      "description": "View and maintain Secret Dependencies"
    },
    {
      "name": "SecretEraseRequests",
      "description": "SecretEraseRequestsController"
    },
    {
      "name": "SecretExtensions",
      "description": "Specialized calls for Thycotic Secret Server Extensions. \r\n                   Thycotic may change the functionality or signatures under the secret-extensions route.\r\n                   Use at your own risk."
    },
    {
      "name": "SecretHealth",
      "description": "SecretHealthController"
    },
    {
      "name": "SecretHooks",
      "description": "View and maintain Secret hooks"
    },
    {
      "name": "SecretPermissions",
      "description": "View and maintain secret permissions"
    },
    {
      "name": "SecretPolicy",
      "description": "Retrieve and update Secret Policies"
    },
    {
      "name": "Secrets",
      "description": "View and maintain Secrets"
    },
    {
      "name": "SecretServerSettings",
      "description": "Secret Server Settings"
    },
    {
      "name": "SecretSessions",
      "description": "View recorded sessions"
    },
    {
      "name": "SecretTemplatePermissions",
      "description": "Secret Template Permissions"
    },
    {
      "name": "SecretTemplates",
      "description": "View secret templates"
    },
    {
      "name": "SecurityAuditLogs",
      "description": "View Security Audit Logs"
    },
    {
      "name": "ServerNodes",
      "description": "View nodes and update roles or readonly mode"
    },
    {
      "name": "Sites",
      "description": "SitesController"
    },
    {
      "name": "Slack",
      "description": "SlackController"
    },
    {
      "name": "SshCommand",
      "description": "View and maintain SSH Commands"
    },
    {
      "name": "SshCommandBlocklist",
      "description": "View and maintain SSH Command Blocklists"
    },
    {
      "name": "SshCommandMenu",
      "description": "View and maintain SSH Command Menus"
    },
    {
      "name": "Teams",
      "description": "View and maintain user security teams"
    },
    {
      "name": "TicketSystems",
      "description": "TicketSystemsController"
    },
    {
      "name": "Users",
      "description": "View and maintain users"
    },
    {
      "name": "Version",
      "description": "Secret Server Version"
    },
    {
      "name": "WorkflowInstances",
      "description": "View and maintain Workflow Instances"
    },
    {
      "name": "WorkflowStepTemplates",
      "description": "View and maintain Workflow Template Steps"
    },
    {
      "name": "WorkflowTemplates",
      "description": "View and maintain Workflow Templates"
    }
  ],
  "servers": [
    {
      "url": "https://integrations.secretservercloud.com/api"
    }
  ],
  "components": {
    "responses": {
      "400": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestResponse"
            }
          }
        }
      },
      "403": {
        "description": "Authentication failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AuthenticationFailedResponse"
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "requestBodies": {
      "RoleRemovals": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RoleRemovals"
            }
          }
        },
        "description": "args"
      },
      "DevOpsSecretsVaultCreateSyncArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DevOpsSecretsVaultCreateSyncArgs"
            }
          }
        },
        "description": "args"
      },
      "SecretDetailHookUpdateArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SecretDetailHookUpdateArgs"
            }
          }
        },
        "description": "args"
      },
      "EventPipelinePolicyImportArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EventPipelinePolicyImportArgs"
            }
          }
        },
        "description": "importPolicy"
      },
      "SecretDetailUpdateGeneralArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SecretDetailUpdateGeneralArgs"
            }
          }
        },
        "description": "args"
      },
      "LinkExternalGroupArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LinkExternalGroupArgs"
            }
          }
        },
        "description": "args"
      },
      "CategorizedListItemCreateArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CategorizedListItemCreateArgs"
            }
          }
        },
        "description": "List options to be added"
      },
      "SecretDetailUpdateEmailArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SecretDetailUpdateEmailArgs"
            }
          }
        },
        "description": "args"
      },
      "SecretProxyArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SecretProxyArgs"
            }
          }
        },
        "description": "args"
      },
      "DisasterRecoveryDataReplicaToDataSourceArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DisasterRecoveryDataReplicaToDataSourceArgs"
            }
          }
        },
        "description": "Disaster Recovery Data Replica to Data Source request encrypted using the symmetric key from the data replica."
      },
      "EngineSettingsUpdateArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EngineSettingsUpdateArgs"
            }
          }
        },
        "description": "args"
      },
      "RoleAssignments": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RoleAssignments"
            }
          }
        },
        "description": "args"
      },
      "ProxyClientOverrideSummary": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ProxyClientOverrideSummary"
            }
          }
        },
        "description": "clientOverride"
      },
      "SecretDetailHookCreateArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SecretDetailHookCreateArgs"
            }
          }
        },
        "description": "args"
      },
      "SecretDetailUpdateSecurityGeneralArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SecretDetailUpdateSecurityGeneralArgs"
            }
          }
        },
        "description": "args"
      },
      "SecretRestrictedArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SecretRestrictedArgs"
            }
          }
        },
        "description": "Secret options"
      },
      "SecretDetailUpdateRpcScriptSecretsArgs": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SecretDetailUpdateRpcScriptSecretsArgs"
            }
          }
        },
        "description": "args"
      },
      "GroupAssignments": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GroupAssignments"
            }
          }
        },
        "description": "args"
      }
    },
    "securitySchemes": {
      "BearerToken": {
        "type": "apiKey",
        "description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "AuthenticationFailedResponse": {
        "description": "Response object for authentication failures",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "description": "Error message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BadRequestResponse": {
        "description": "Response object for invalid requests",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "messageDetail": {
            "description": "Error message detail",
            "type": "string"
          },
          "errorCode": {
            "description": "Error message code",
            "type": "string"
          },
          "modelState": {
            "description": "An object describing validation errors",
            "type": "object"
          }
        },
        "type": "object"
      },
      "InternalServerErrorResponse": {
        "description": "Response object for internal server errors",
        "required": [
          "message",
          "exceptionMessage",
          "exceptionType",
          "stackTrace"
        ],
        "properties": {
          "message": {
            "description": "Error message",
            "type": "string"
          },
          "exceptionMessage": {
            "description": "Error message from exception",
            "type": "string"
          },
          "exceptionType": {
            "description": "Exception type",
            "type": "string"
          },
          "stackTrace": {
            "description": "Exception stack trace",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OnlineActivationArgs": {
        "description": "Online Secret Server Activation Arguments",
        "required": [
          "name",
          "phoneNumber",
          "email"
        ],
        "properties": {
          "email": {
            "description": "Email of person performing activation",
            "type": "string"
          },
          "name": {
            "description": "Name of person performing activation",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Phone Number of person performing activation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTokenViewModel": {
        "description": "ApiTokenViewModel",
        "properties": {
          "generatedToken": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfString": {
        "description": "GeneratedToken",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldLink": {
        "description": "AdditionalLinks",
        "properties": {
          "isExternal": {
            "description": "IsExternal",
            "type": "boolean"
          },
          "linkText": {
            "description": "LinkText",
            "type": "string"
          },
          "url": {
            "description": "Url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppClientModel": {
        "description": "App client",
        "properties": {
          "clientId": {
            "description": "App client unique identifier",
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "description": "App client ID",
            "type": "integer",
            "format": "int32"
          },
          "redirectUri": {
            "description": "Authorized redirect URI for this app client",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AppClientUpdateArgs": {
        "description": "App client update options",
        "required": [
          "id",
          "redirectUri"
        ],
        "properties": {
          "id": {
            "description": "App client ID. Must match ID in path",
            "type": "integer",
            "format": "int32"
          },
          "redirectUri": {
            "description": "Authorized redirect URI for this app client",
            "type": "string",
            "maxLength": 1000
          }
        },
        "type": "object"
      },
      "DeletedModel": {
        "description": "Information about an object that was deleted",
        "properties": {
          "id": {
            "description": "ID of the deleted object",
            "type": "integer",
            "format": "int32"
          },
          "objectType": {
            "description": "Type of the deleted object",
            "type": "string"
          },
          "responseCodes": {
            "description": "List of response codes from the delete operation",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AppClientCreateArgs": {
        "description": "App client creation options",
        "properties": {
          "redirectUri": {
            "description": "Authorized redirect URI for this app client",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfUserLookup": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/UserLookup"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserLookup": {
        "description": "Simple user representation",
        "properties": {
          "id": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "User name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Severity": {
        "description": "Error severity level",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "Retry",
          "Warn",
          "Critical",
          "Fatal"
        ]
      },
      "Sort": {
        "description": "Sort options. Multiple sort options can be provided in the query string.",
        "required": [
          "name",
          "direction"
        ],
        "properties": {
          "direction": {
            "$ref": "#/components/schemas/SortDirection"
          },
          "name": {
            "description": "Sort field name",
            "type": "string"
          },
          "priority": {
            "description": "Priority index. Sorts with lower values are executed earlier",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SortDirection": {
        "description": "Sort direction",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "Asc",
          "Desc"
        ]
      },
      "PagingOfApplicationAccessRequestViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ApplicationAccessRequestViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ApplicationAccessRequestViewModel": {
        "description": "Query results",
        "properties": {
          "createdDate": {
            "description": "CreatedDate",
            "type": "string",
            "format": "date-time"
          },
          "deviceId": {
            "description": "DeviceId",
            "type": "integer",
            "format": "int32"
          },
          "requestingApplicationUsername": {
            "description": "RequestingApplicationUsername",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ApplicationAccessStatusRequestType"
          }
        },
        "type": "object"
      },
      "ApplicationAccessStatusRequestType": {
        "description": "Status",
        "properties": {},
        "type": "string",
        "enum": [
          "Approved",
          "Pending",
          "Denied"
        ]
      },
      "ApplicationAccessRequestUpdateArgs": {
        "description": "ApplicationAccessRequestUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApplicationAccessRequestUpdateModel"
          }
        },
        "type": "object"
      },
      "ApplicationAccessRequestUpdateModel": {
        "description": "Data",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/UpdateFieldValueOfApplicationAccessStatusRequestType"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfApplicationAccessStatusRequestType": {
        "description": "Application Access Status",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/ApplicationAccessStatusRequestType"
          }
        },
        "type": "object"
      },
      "PagingOfApplicationAccessRequestAuditViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ApplicationAccessRequestAuditViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ApplicationAccessRequestAuditViewModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "databaseName": {
            "description": "DatabaseName",
            "type": "string"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkOperationProgressModel": {
        "description": "BulkOperationProgressModel",
        "properties": {
          "errors": {
            "description": "A list of errors related to this Bulk Operation.",
            "items": {
              "$ref": "#/components/schemas/BulkOperationErrorModel"
            },
            "type": "array"
          },
          "identifier": {
            "description": "The identifier of the Bulk Operation.",
            "type": "string"
          },
          "isComplete": {
            "description": "Indicates if the Bulk Operation has completed.",
            "type": "boolean"
          },
          "percentageComplete": {
            "description": "The percentage of items the Bulk Operation has completed processing.",
            "type": "integer",
            "format": "int32"
          },
          "statusMessage": {
            "description": "A message describing the Bulk Operation's current status.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkOperationErrorModel": {
        "description": "A list of errors related to this Bulk Operation.",
        "properties": {
          "errorMessage": {
            "description": "A message describing the error that occurred.",
            "type": "string"
          },
          "itemName": {
            "description": "The name of the item that the error relates to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddSharePermissionArgs": {
        "description": "AddSharePermissionArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddSharePermissionModel"
          }
        },
        "type": "object"
      },
      "AddSharePermissionModel": {
        "description": "Data",
        "properties": {
          "permissions": {
            "description": "Permissions to add for each shared Secret.",
            "items": {
              "$ref": "#/components/schemas/BulkOperationPermissionModel"
            },
            "type": "array"
          },
          "secretIds": {
            "description": "Ids of Secrets to add share permissions to.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BulkOperationPermissionModel": {
        "description": "Permissions to add for each shared Secret.",
        "properties": {
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "isPersonal": {
            "description": "IsPersonal",
            "type": "boolean"
          },
          "secretAccessRoleId": {
            "description": "SecretAccessRoleId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "BulkOperationResponseMessage": {
        "description": "BulkOperationResponseMessage",
        "properties": {
          "bulkOperationId": {
            "description": "BulkOperationId",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AssignSecretsToSiteArgs": {
        "description": "AssignSecretsToSiteArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssignSecretsToSiteModel"
          }
        },
        "type": "object"
      },
      "AssignSecretsToSiteModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to assign to supplied site.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "siteId": {
            "description": "Site Id to assign secrets to.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AssignSecretsToJumpboxRouteArgs": {
        "description": "AssignSecretsToJumpboxRouteArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssignSecretsToJumpboxRouteModel"
          }
        },
        "type": "object"
      },
      "AssignSecretsToJumpboxRouteModel": {
        "description": "Data",
        "properties": {
          "jumpboxRouteId": {
            "description": "JumpboxRoute Id to assign secrets to.",
            "type": "string",
            "format": "uuid"
          },
          "secretIds": {
            "description": "Ids of Secrets to assign to the supplied Jumpbox Route.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AssignSecretsToSecretPolicyArgs": {
        "description": "AssignSecretsToSecretPolicyArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AssignSecretsToSecretPolicyModel"
          }
        },
        "type": "object"
      },
      "AssignSecretsToSecretPolicyModel": {
        "description": "Data",
        "properties": {
          "inheritSecretPolicy": {
            "description": "Set if Secrets should inherit from the Secret Policy.",
            "type": "boolean"
          },
          "secretIds": {
            "description": "Ids of Secrets to assign to the supplied Secret Policy.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "secretPolicyId": {
            "description": "Secret Policy Id to assign secrets to.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ChangeSecretsPasswordsRemotelyArgs": {
        "description": "ChangeSecretsPasswordsRemotelyArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChangeSecretsPasswordsRemotelyModel"
          }
        },
        "type": "object"
      },
      "ChangeSecretsPasswordsRemotelyModel": {
        "description": "Data",
        "properties": {
          "forceNextKeyReset": {
            "description": "Set if the next key reset is forced.",
            "type": "boolean"
          },
          "generateSSHKey": {
            "description": "Set if a SSH Key should be generated.",
            "type": "boolean"
          },
          "nextPassphrase": {
            "description": "Next passphrase to change secrets to.",
            "type": "string"
          },
          "nextPassword": {
            "description": "Next password to change secrets to.",
            "type": "string"
          },
          "nextPrivateKey": {
            "description": "Next private key to change secrets to.",
            "type": "string"
          },
          "secretIds": {
            "description": "Ids of Secrets to change password remotely.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConvertSecretsSecretTypeArgs": {
        "description": "ConvertSecretsSecretTypeArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConvertSecretsSecretTypeModel"
          }
        },
        "type": "object"
      },
      "ConvertSecretsSecretTypeModel": {
        "description": "Data",
        "properties": {
          "destinationSecretFieldsIds": {
            "description": "Destination Type Secret Field Ids to map to Source Field Ids. Nulls indicate the corresponding Source Fields should be removed.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "destinationSecretTypeId": {
            "description": "Secret Type Id to convert to.",
            "type": "integer",
            "format": "int32"
          },
          "secretIds": {
            "description": "Ids of Secrets to convert to supplied Secret Type.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "sourceSecretFieldsIds": {
            "description": "Secret Field Ids from the source type to map to the destination fields.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "sourceSecretTypeId": {
            "description": "Secret Type Id to convert from.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DeactivateSecretsArgs": {
        "description": "DeactivateSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeactivateSecretsModel"
          }
        },
        "type": "object"
      },
      "DeactivateSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to deactivate.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableAutoChangeSecretsArgs": {
        "description": "DisableAutoChangeSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableAutoChangeSecretsModel"
          }
        },
        "type": "object"
      },
      "DisableAutoChangeSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set AutoChange to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableCheckoutSecretsArgs": {
        "description": "DisableCheckoutSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableCheckoutSecretsModel"
          }
        },
        "type": "object"
      },
      "DisableCheckoutSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Checkout to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableHeartbeatSecretsArgs": {
        "description": "DisableHeartbeatSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableHeartbeatSecretsModel"
          }
        },
        "type": "object"
      },
      "DisableHeartbeatSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Heartbeat to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableRequireViewCommentSecretsArgs": {
        "description": "DisableRequireViewCommentSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableRequireViewCommentSecretsModel"
          }
        },
        "type": "object"
      },
      "DisableRequireViewCommentSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Require View Comment to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableAutoChangeSecretsArgs": {
        "description": "EnableAutoChangeSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableAutoChangeSecretsModel"
          }
        },
        "type": "object"
      },
      "EnableAutoChangeSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set AutoChange to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableCheckoutSecretsArgs": {
        "description": "EnableCheckoutSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableCheckoutSecretsModel"
          }
        },
        "type": "object"
      },
      "EnableCheckoutSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Checkout to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RequestEraseSecretsArgs": {
        "description": "RequestEraseSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RequestEraseSecretsModel"
          }
        },
        "type": "object"
      },
      "RequestEraseSecretsModel": {
        "description": "Data",
        "properties": {
          "eraseAfter": {
            "description": "The date and time after which the Erase Request should take effect.",
            "type": "string",
            "format": "date-time"
          },
          "requestComment": {
            "description": "Comment to include as part of the Erase Request.",
            "type": "string"
          },
          "secretIds": {
            "description": "Ids of Secrets to request erase for.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ChangeSecurityOptionsSecretsArgs": {
        "description": "ChangeSecurityOptionsSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChangeSecurityOptionsSecretsModel"
          }
        },
        "type": "object"
      },
      "ChangeSecurityOptionsSecretsModel": {
        "description": "Data",
        "properties": {
          "enableCheckout": {
            "description": "Set if Checkout is enabled.",
            "type": "boolean"
          },
          "hidePassword": {
            "description": "Set if Hide Password is enabled.",
            "type": "boolean"
          },
          "requireViewComment": {
            "description": "Set if Require View Comment is enabled.",
            "type": "boolean"
          },
          "secretIds": {
            "description": "Ids of Secrets to apply security changes to.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableRequireViewCommentSecretsArgs": {
        "description": "EnableRequireViewCommentSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableRequireViewCommentSecretsModel"
          }
        },
        "type": "object"
      },
      "EnableRequireViewCommentSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Require View Comment to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableHeartbeatSecretsArgs": {
        "description": "EnableHeartbeatSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableHeartbeatSecretsModel"
          }
        },
        "type": "object"
      },
      "EnableHeartbeatSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Heartbeat to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EditSharePermissionsSecretsArgs": {
        "description": "EditSharePermissionsSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EditSharePermissionsSecretsModel"
          }
        },
        "type": "object"
      },
      "EditSharePermissionsSecretsModel": {
        "description": "Data",
        "properties": {
          "permissions": {
            "description": "Permissions to apply for each shared Secret.",
            "items": {
              "$ref": "#/components/schemas/BulkOperationPermissionModel"
            },
            "type": "array"
          },
          "secretIds": {
            "description": "Ids of Secrets to edit share permissions on.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableHideLauncherPasswordSecretsArgs": {
        "description": "EnableHideLauncherPasswordSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableHideLauncherPasswordSecretsModel"
          }
        },
        "type": "object"
      },
      "EnableHideLauncherPasswordSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Hide Launcher Password to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableInheritPermissionsSecretsArgs": {
        "description": "EnableInheritPermissionsSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableInheritPermissionsSecretsModel"
          }
        },
        "type": "object"
      },
      "EnableInheritPermissionsSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Inherit Permissions to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MoveSecretsToFolderArgs": {
        "description": "MoveSecretsToFolderArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MoveSecretsToFolderModel"
          }
        },
        "type": "object"
      },
      "MoveSecretsToFolderModel": {
        "description": "Data",
        "properties": {
          "folderId": {
            "description": "Folder Id to move selected secrets to.",
            "type": "integer",
            "format": "int32"
          },
          "secretIds": {
            "description": "Ids of Secrets to move to selected Folder.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RunHeartbeatForSecretsArgs": {
        "description": "RunHeartbeatForSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RunHeartbeatForSecretsModel"
          }
        },
        "type": "object"
      },
      "RunHeartbeatForSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to run Heartbeat for.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SetPrivilegedAccountForSecretsArgs": {
        "description": "SetPrivilegedAccountForSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SetPrivilegedAccountForSecretsModel"
          }
        },
        "type": "object"
      },
      "SetPrivilegedAccountForSecretsModel": {
        "description": "Data",
        "properties": {
          "privilegedAccountSecretId": {
            "description": "Id of the Secret that contains the privileged account information.  Set to null to use the credentials on the secret.",
            "type": "integer",
            "format": "int32"
          },
          "secretIds": {
            "description": "Ids of Secrets to set the privileged account on.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateAssociatedSecretsArgs": {
        "description": "UpdateAssociatedSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UpdateAssociatedSecretsModel"
          }
        },
        "type": "object"
      },
      "UpdateAssociatedSecretsModel": {
        "description": "Data",
        "properties": {
          "associatedSecretIds": {
            "description": "Ids of Secrets to associate with each Secret.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "secretIds": {
            "description": "Ids of Secrets to update associations.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SetDependencyPasswordArgs": {
        "description": "SetDependencyPasswordArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SetDependencyPasswordModel"
          }
        },
        "type": "object"
      },
      "SetDependencyPasswordModel": {
        "description": "Data",
        "properties": {
          "dependencyIds": {
            "description": "Dependency Ids for password to set for each Secret.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "secretIds": {
            "description": "Ids of Secrets to set password dependencies on.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableDependenciesArgs": {
        "description": "EnableDependenciesArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableDependenciesModel"
          }
        },
        "type": "object"
      },
      "EnableDependenciesModel": {
        "description": "Data",
        "properties": {
          "dependencyIds": {
            "description": "Dependecy Ids to be enabled for each Secret.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "secretIds": {
            "description": "Ids of Secrets to enable dependencies on.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeleteDependenciesArgs": {
        "description": "DeleteDependenciesArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeleteDependenciesModel"
          }
        },
        "type": "object"
      },
      "DeleteDependenciesModel": {
        "description": "Data",
        "properties": {
          "dependencyIds": {
            "description": "Dependecy Ids to be deleted for each Secret.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "secretIds": {
            "description": "Ids of Secrets to delete dependencies on.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableDependenciesArgs": {
        "description": "DisableDependenciesArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableDependenciesModel"
          }
        },
        "type": "object"
      },
      "DisableDependenciesModel": {
        "description": "Data",
        "properties": {
          "dependencyIds": {
            "description": "Dependecy Ids to be disabled for each Secret.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "secretIds": {
            "description": "Ids of Secrets to disable dependencies on.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ActivateSecretsArgs": {
        "description": "ActivateSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ActivateSecretsModel"
          }
        },
        "type": "object"
      },
      "ActivateSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to activate.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableHideLauncherPasswordForSecretsArgs": {
        "description": "DisableHideLauncherPasswordForSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableHideLauncherPasswordForSecretsModel"
          }
        },
        "type": "object"
      },
      "DisableHideLauncherPasswordForSecretsModel": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Ids of Secrets to set Hide Launcher Password to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableUsersArgs": {
        "description": "EnableUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableUsersModel"
          }
        },
        "type": "object"
      },
      "EnableUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "Ids of Users to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableUsersArgs": {
        "description": "DisableUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableUsersModel"
          }
        },
        "type": "object"
      },
      "DisableUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to disable.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableEmailTwoFactorForUsersArgs": {
        "description": "EnableEmailTwoFactorForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableEmailTwoFactorForUsersModel"
          }
        },
        "type": "object"
      },
      "EnableEmailTwoFactorForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set Email Two Factor to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableEmailTwoFactorForUsersArgs": {
        "description": "DisableEmailTwoFactorForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableEmailTwoFactorForUsersModel"
          }
        },
        "type": "object"
      },
      "DisableEmailTwoFactorForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set Email Two Factor to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableRadiusTwoFactorForUsersArgs": {
        "description": "EnableRadiusTwoFactorForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableRadiusTwoFactorForUsersModel"
          }
        },
        "type": "object"
      },
      "EnableRadiusTwoFactorForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set Radius Two Factor to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableRadiusTwoFactorForUsersArgs": {
        "description": "DisableRadiusTwoFactorForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableRadiusTwoFactorForUsersModel"
          }
        },
        "type": "object"
      },
      "DisableRadiusTwoFactorForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set Radius Two Factor to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableTOTPAuthForUsersArgs": {
        "description": "EnableTOTPAuthForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableTOTPAuthForUsersModel"
          }
        },
        "type": "object"
      },
      "EnableTOTPAuthForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set TOTP Auth to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableTOTPAuthForUsersArgs": {
        "description": "DisableTOTPAuthForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableTOTPAuthForUsersModel"
          }
        },
        "type": "object"
      },
      "DisableTOTPAuthForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set TOTP Auth to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResetTOTPAuthForUsersArgs": {
        "description": "ResetTOTPAuthForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ResetTOTPAuthForUsersModel"
          }
        },
        "type": "object"
      },
      "ResetTOTPAuthForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to reset TOTP Auth for.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableDuoAuthForUsersArgs": {
        "description": "EnableDuoAuthForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableDuoAuthForUsersModel"
          }
        },
        "type": "object"
      },
      "EnableDuoAuthForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set Duo Auth to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableDuoAuthForUsersArgs": {
        "description": "DisableDuoAuthForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableDuoAuthForUsersModel"
          }
        },
        "type": "object"
      },
      "DisableDuoAuthForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set Duo Auth to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnableFido2TwoFactorForUsersArgs": {
        "description": "EnableFido2TwoFactorForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnableFido2TwoFactorForUsersModel"
          }
        },
        "type": "object"
      },
      "EnableFido2TwoFactorForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set Fido2 Two Factor to enabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisableFido2TwoFactorForUsersArgs": {
        "description": "DisableFido2TwoFactorForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisableFido2TwoFactorForUsersModel"
          }
        },
        "type": "object"
      },
      "DisableFido2TwoFactorForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to set Fido2 Two Factor to disabled.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResetFido2TwoFactorForUsersArgs": {
        "description": "ResetFido2TwoFactorForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ResetFido2TwoFactorForUsersModel"
          }
        },
        "type": "object"
      },
      "ResetFido2TwoFactorForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to reset Fido2 Two Factor for.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ForceLogoutForUsersArgs": {
        "description": "ForceLogoutForUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ForceLogoutForUsersModel"
          }
        },
        "type": "object"
      },
      "ForceLogoutForUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to force logout.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LockUsersArgs": {
        "description": "LockUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LockUsersModel"
          }
        },
        "type": "object"
      },
      "LockUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to lock.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UnlockUsersArgs": {
        "description": "UnlockUsersArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UnlockUsersModel"
          }
        },
        "type": "object"
      },
      "UnlockUsersModel": {
        "description": "Data",
        "properties": {
          "userIds": {
            "description": "User Ids to unlock.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AddUsersToGroupArgs": {
        "description": "AddUsersToGroupArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddUsersToGroupModel"
          }
        },
        "type": "object"
      },
      "AddUsersToGroupModel": {
        "description": "Data",
        "properties": {
          "groupId": {
            "description": "Id of Group to add selected users to.",
            "type": "integer",
            "format": "int32"
          },
          "userIds": {
            "description": "User Ids to add to selected Group.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RemoveUsersFromGroupArgs": {
        "description": "RemoveUsersFromGroupArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RemoveUsersFromGroupModel"
          }
        },
        "type": "object"
      },
      "RemoveUsersFromGroupModel": {
        "description": "Data",
        "properties": {
          "groupId": {
            "description": "Id of Group to remove selected users from.",
            "type": "integer",
            "format": "int32"
          },
          "userIds": {
            "description": "User Ids to remove from selected Group.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AddUsersToTeamArgs": {
        "description": "AddUsersToTeamArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddUsersToTeamModel"
          }
        },
        "type": "object"
      },
      "AddUsersToTeamModel": {
        "description": "Data",
        "properties": {
          "teamId": {
            "description": "Id of Team to add selected users to.",
            "type": "integer",
            "format": "int32"
          },
          "userIds": {
            "description": "User Ids to add to selected Team.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RemoveUsersFromTeamArgs": {
        "description": "RemoveUsersFromTeamArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RemoveUsersFromTeamModel"
          }
        },
        "type": "object"
      },
      "RemoveUsersFromTeamModel": {
        "description": "Data",
        "properties": {
          "teamId": {
            "description": "Id of Team to remove selected users from.",
            "type": "integer",
            "format": "int32"
          },
          "userIds": {
            "description": "User Ids to remove from selected Team.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CategorizedListModel": {
        "description": "CategorizedListModel",
        "properties": {
          "active": {
            "description": "Whether or not the list is active",
            "type": "boolean"
          },
          "categorizedListId": {
            "description": "List Id",
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "description": "Description of the list",
            "type": "string"
          },
          "name": {
            "description": "Name of the list",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CategorizedListUpdateArgs": {
        "description": "CategorizedListUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CategorizedListUpdateModel"
          }
        },
        "type": "object"
      },
      "CategorizedListUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfBoolean": {
        "description": "Active",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfString": {
        "description": "Description",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CategorizedListDeleteModel": {
        "description": "CategorizedListDeleteModel",
        "properties": {
          "id": {
            "description": "Id",
            "type": "string",
            "format": "uuid"
          },
          "objectType": {
            "description": "ObjectType",
            "type": "string"
          },
          "responseCodes": {
            "description": "ResponseCodes",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PagingOfCategorizedListItemModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/CategorizedListItemModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CategorizedListItemModel": {
        "description": "Query results",
        "properties": {
          "categorizedListId": {
            "description": "Categorized List Id",
            "type": "string",
            "format": "uuid"
          },
          "categorizedListItemId": {
            "description": "Categorized List Item Id",
            "type": "string",
            "format": "uuid"
          },
          "category": {
            "description": "Categorized List Item Category",
            "type": "string"
          },
          "value": {
            "description": "Categorized List Item Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CategorizedListItemCreateArgs": {
        "description": "List Option Create Argument",
        "properties": {
          "data": {
            "description": "Value(s) of the list options to add",
            "items": {
              "$ref": "#/components/schemas/CategorizedListItemCreateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CategorizedListItemCreateModel": {
        "description": "Value(s) of the list options to add",
        "properties": {
          "category": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "value": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "PagingOfCategorizedListItemViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/CategorizedListItemViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CategorizedListItemViewModel": {
        "description": "Query results",
        "properties": {
          "categorizedListId": {
            "description": "CategorizedListId",
            "type": "string",
            "format": "uuid"
          },
          "categorizedListItemId": {
            "description": "CategorizedListItemId",
            "type": "string",
            "format": "uuid"
          },
          "category": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "value": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          }
        },
        "type": "object"
      },
      "CategorizedListItemUpdateArgs": {
        "description": "List Option Update Argument",
        "properties": {
          "data": {
            "description": "Value(s) of the list options to update",
            "items": {
              "$ref": "#/components/schemas/CategorizedListItemUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CategorizedListItemUpdateModel": {
        "description": "Value(s) of the list options to update",
        "properties": {
          "categorizedListItemId": {
            "description": "CategorizedListItemId",
            "type": "string",
            "format": "uuid"
          },
          "category": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "value": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "CategorizedListItemDeleteModel": {
        "description": "CategorizedListItemDeleteModel",
        "properties": {
          "isDeleted": {
            "description": "IsDeleted",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfCategorizedListSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/CategorizedListSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CategorizedListSummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Whether or not the list is active",
            "type": "boolean"
          },
          "categorizedListId": {
            "description": "List Id",
            "type": "string"
          },
          "description": {
            "description": "Description of the list",
            "type": "string"
          },
          "name": {
            "description": "Name of the list",
            "type": "string"
          },
          "numOptions": {
            "description": "The number of options in the list",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CategorizedListCreateArgs": {
        "description": "CategorizedListCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CategorizedListUpdateModel"
          }
        },
        "type": "object"
      },
      "PagingOfSimpleCategorizedList": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SimpleCategorizedList"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SimpleCategorizedList": {
        "description": "Query results",
        "properties": {
          "categorizedListId": {
            "description": "List Id",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the list",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfString": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfCategorizedListAuditModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/CategorizedListAuditModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CategorizedListAuditModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "categorizedListAuditId": {
            "description": "CategorizedListAuditId",
            "type": "integer",
            "format": "int32"
          },
          "categorizedListId": {
            "description": "CategorizedListId",
            "type": "string",
            "format": "uuid"
          },
          "databaseName": {
            "description": "DatabaseName",
            "type": "string"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "delegatedUserId": {
            "description": "DelegatedUserId",
            "type": "integer",
            "format": "int32"
          },
          "delegatedUserName": {
            "description": "DelegatedUserName",
            "type": "string"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "formattedDate": {
            "description": "FormattedDate",
            "type": "string"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "machineName": {
            "description": "MachineName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "UserName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CategorizedListItemSingleCreateArgs": {
        "description": "Single List Option Create Argument",
        "properties": {
          "option": {
            "$ref": "#/components/schemas/CategorizedListItemCreateModel"
          }
        },
        "type": "object"
      },
      "CategorizedListItemSingleUpdateArgs": {
        "description": "List Option Update Argument",
        "properties": {
          "option": {
            "$ref": "#/components/schemas/CategorizedListItemUpdateModel"
          }
        },
        "type": "object"
      },
      "CategorizedListItemCreateWithFileArgs": {
        "description": "List option create argument using a file",
        "properties": {
          "delimiter": {
            "$ref": "#/components/schemas/Char"
          },
          "file": {
            "description": "Uploaded file containing list options to add",
            "type": "file"
          }
        },
        "type": "object"
      },
      "Char": {
        "description": "Delimiter used in the file",
        "properties": {},
        "type": "object"
      },
      "PagingOfCharacterSetSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/CharacterSetSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CharacterSetSummary": {
        "description": "Character Set that is used in password requirements",
        "properties": {
          "abbreviation": {
            "description": "Abbreviated view of the character set",
            "type": "string"
          },
          "active": {
            "description": "Is this character set active",
            "type": "boolean"
          },
          "characterSetId": {
            "description": "Sequence ID for character set",
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "isStandard": {
            "description": "Is this a standard character set",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "value": {
            "description": "The actual characters in the character set",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CharacterSetCreateArgs": {
        "description": "Character Set Create Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CharacterSetCreateModel"
          }
        },
        "type": "object"
      },
      "CharacterSetCreateModel": {
        "description": "Character Set Create Model",
        "properties": {
          "abbreviation": {
            "description": "Abbreviated view of the character set",
            "type": "string"
          },
          "active": {
            "description": "Is this character set active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "value": {
            "description": "The actual characters in the character set",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CharacterSetModel": {
        "description": "Character Set that is used in password requirements",
        "properties": {
          "abbreviation": {
            "description": "Abbreviated view of the character set",
            "type": "string"
          },
          "active": {
            "description": "Is this character set active",
            "type": "boolean"
          },
          "characterSetId": {
            "description": "Sequence ID for character set",
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "isStandard": {
            "description": "Is this a standard character set",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "value": {
            "description": "The actual characters in the character set",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CharacterSetPatchArgs": {
        "description": "Character Set Patch Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CharacterSetPatchModel"
          }
        },
        "type": "object"
      },
      "CharacterSetPatchModel": {
        "description": "Character Set Patch Model",
        "properties": {
          "abbreviation": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "value": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "PagingOfCharacterSetAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/CharacterSetAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CharacterSetAuditSummary": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "characterSetAuditId": {
            "description": "CharacterSetAuditId",
            "type": "integer",
            "format": "int32"
          },
          "characterSetId": {
            "description": "CharacterSetId",
            "type": "integer",
            "format": "int32"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "UserName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlIdentityProviderModel": {
        "description": "SAML Identity Provider configuration",
        "properties": {
          "active": {
            "description": "Active status of the Identity Provider. Users can only log-in via an active Identity Provider.",
            "type": "boolean"
          },
          "authnContext": {
            "description": "When specified, instructs the IDP on how to authenticate the user(optional).",
            "type": "string"
          },
          "clockSkew": {
            "description": "The allowed number of minutes of difference between Secret Server's clock and the IDP's clock.  The default is 3 minutes.",
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "description": "Description of the Identity Provider.",
            "type": "string"
          },
          "disableAssertionReplayCheck": {
            "description": "When true, SAML messages that were already received from this IDP will be allowed by Secret Server.  Otherwise, resending messages from the IDP will trigger an error.",
            "type": "boolean"
          },
          "disableAudienceRestrictionCheck": {
            "description": "A SAML assertion may include an audience restriction URI. This identifies the intended recipient of the SAML assertion. If included it should match the service provider's name.  When this setting is true, this check is skipped.",
            "type": "boolean"
          },
          "disableAuthnContextCheck": {
            "description": "Disables the authentication context check, which validates that the real authentication method matches the ExpectedAuthnContext method.",
            "type": "boolean"
          },
          "disableDestinationCheck": {
            "description": "When true, the destination URI in the SAML response will not be validated.",
            "type": "boolean"
          },
          "disableInboundLogout": {
            "description": "When true, logout requests coming from this IDP are ignored.",
            "type": "boolean"
          },
          "disableInResponseToCheck": {
            "description": "When true, the InResponseTo attribute in SAML messages is not checked.",
            "type": "boolean"
          },
          "disablePendingLogoutCheck": {
            "description": "When true, a SAML logout response will be considered legitimate even if there was no corresponding logout request.",
            "type": "boolean"
          },
          "disableRecipientCheck": {
            "description": "When true, the built-in check against the AssertionConsumerService URL will be skipped.",
            "type": "boolean"
          },
          "disableTimePeriodCheck": {
            "description": "When true, a SAML response is valid regardless of when it was sent.",
            "type": "boolean"
          },
          "displayName": {
            "description": "The Display Name for the Identity Provider.",
            "type": "string"
          },
          "domainAttribute": {
            "description": "Optional AttributeName to use for matching a Secret Server user's domain.",
            "type": "string"
          },
          "enableDetailedLog": {
            "description": "When true, a more detailed log will be generated for SAML logins and logouts.",
            "type": "boolean"
          },
          "enableSLO": {
            "description": "When true, logging out of Secret Server will log the user out of this Identity Provider.",
            "type": "boolean"
          },
          "forceAuthentication": {
            "description": "When true, the Identity Provider will be instructed to re-authenticate the user, even if they are already authenticated.",
            "type": "boolean"
          },
          "identityProviderId": {
            "description": "SAML Identity Provider Id",
            "type": "integer",
            "format": "int32"
          },
          "logoutRequestLifeTime": {
            "description": "The logout request life time.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name of the Identity Provider.",
            "type": "string"
          },
          "overridePendingAuthnRequest": {
            "description": "When true, an in-progress SP-initiated login may be interrupted by an IDP-initiated login.",
            "type": "boolean"
          },
          "publicCertificate": {
            "description": "The public certificate for the Identity Provider. Base64 encoded",
            "type": "string"
          },
          "publicCertificateThumbprint": {
            "description": "The public certificate thumbprint",
            "type": "string"
          },
          "signAuthnRequest": {
            "description": "When true, the authentication requests sent to this IDP will be signed.",
            "type": "boolean"
          },
          "signLogoutRequest": {
            "description": "When true, logout requests sent to this IDP will be signed.<",
            "type": "boolean"
          },
          "signLogoutResponse": {
            "description": "When true, logout responses sent to this IDP will be signed.",
            "type": "boolean"
          },
          "singleLogoutServiceResponseUrl": {
            "description": "The URL where Secret Server will send responses to single logout messages.",
            "type": "string"
          },
          "singleLogoutServiceUrl": {
            "description": "The URL to send the single logout message to.",
            "type": "string"
          },
          "ssoServiceBinding": {
            "description": "Method for communicating with the Identity Provider.  HTTPRedirect is recommended in most cases.",
            "type": "integer",
            "format": "int32"
          },
          "ssoServiceUrl": {
            "description": "The URL of the Identity Provider where the user will be sent to authenticate.",
            "type": "string"
          },
          "usernameAttribute": {
            "description": "Optional AttributeName to use for matching a Secret Server user.",
            "type": "string"
          },
          "wantAssertionEncrypted": {
            "description": "When true, Secret Server will expect SAML assertions from this IDP to be encrypted. Unencrypted assertions or assertions that cannot be decrypted will cause an error.",
            "type": "boolean"
          },
          "wantAssertionOrResponseSigned": {
            "description": "When true, Secret Server will expect either SAML assertions or SAML responses from this IDP to be signed. Unsigned assertions/responses and assertions/responses whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          },
          "wantAssertionSigned": {
            "description": "When true, Secret Server will expect SAML assertions from this IDP to be signed. Unsigned assertions or assertions whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          },
          "wantLogoutRequestSigned": {
            "description": "When true, Secret Server will expect logout requests from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          },
          "wantLogoutResponseSigned": {
            "description": "When true, Secret Server will expect logout responses from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          },
          "wantSAMLResponseSigned": {
            "description": "When true, Secret Server will expect SAML responses from this IDP to be signed. Unsigned responses or responses whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlIdentityProviderDeleteResultModel": {
        "description": "SAML Identity Provider Delete Result",
        "properties": {
          "success": {
            "description": "Whether or not the call to Delete was successful",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationStateModel": {
        "description": "The configuration sections avaible to the current user",
        "properties": {
          "applicationEdit": {
            "description": "ApplicationEdit",
            "type": "boolean"
          },
          "applicationView": {
            "description": "ApplicationView",
            "type": "boolean"
          },
          "backupEdit": {
            "description": "BackupEdit",
            "type": "boolean"
          },
          "backupView": {
            "description": "BackupView",
            "type": "boolean"
          },
          "databaseEdit": {
            "description": "DatabaseEdit",
            "type": "boolean"
          },
          "databaseView": {
            "description": "DatabaseView",
            "type": "boolean"
          },
          "deEdit": {
            "description": "DeEdit",
            "type": "boolean"
          },
          "deView": {
            "description": "DeView",
            "type": "boolean"
          },
          "discoverView": {
            "description": "DiscoverView",
            "type": "boolean"
          },
          "discoveryEdit": {
            "description": "DiscoveryEdit",
            "type": "boolean"
          },
          "dsEdit": {
            "description": "DsEdit",
            "type": "boolean"
          },
          "dsView": {
            "description": "DsView",
            "type": "boolean"
          },
          "duoEdit": {
            "description": "DuoEdit",
            "type": "boolean"
          },
          "duoView": {
            "description": "DuoView",
            "type": "boolean"
          },
          "emailEdit": {
            "description": "EmailEdit",
            "type": "boolean"
          },
          "emailView": {
            "description": "EmailView",
            "type": "boolean"
          },
          "folderEdit": {
            "description": "FolderEdit",
            "type": "boolean"
          },
          "folderView": {
            "description": "FolderView",
            "type": "boolean"
          },
          "internalSiteConnectorEdit": {
            "description": "InternalSiteConnectorEdit",
            "type": "boolean"
          },
          "internalSiteConnectorView": {
            "description": "InternalSiteConnectorView",
            "type": "boolean"
          },
          "launcherEdit": {
            "description": "LauncherEdit",
            "type": "boolean"
          },
          "launcherView": {
            "description": "LauncherView",
            "type": "boolean"
          },
          "localUserPasswordsEdit": {
            "description": "LocalUserPasswordsEdit",
            "type": "boolean"
          },
          "localUserPasswordsView": {
            "description": "LocalUserPasswordsView",
            "type": "boolean"
          },
          "loginEdit": {
            "description": "LoginEdit",
            "type": "boolean"
          },
          "loginPolicyEdit": {
            "description": "LoginPolicyEdit",
            "type": "boolean"
          },
          "loginPolicyView": {
            "description": "LoginPolicyView",
            "type": "boolean"
          },
          "loginView": {
            "description": "LoginView",
            "type": "boolean"
          },
          "openIdEdit": {
            "description": "OpenIdEdit",
            "type": "boolean"
          },
          "openIdView": {
            "description": "OpenIdView",
            "type": "boolean"
          },
          "permissionsEdit": {
            "description": "PermissionsEdit",
            "type": "boolean"
          },
          "permissionsView": {
            "description": "PermissionsView",
            "type": "boolean"
          },
          "protocolHandlerEdit": {
            "description": "ProtocolHandlerEdit",
            "type": "boolean"
          },
          "protocolHandlerView": {
            "description": "ProtocolHandlerView",
            "type": "boolean"
          },
          "radiusEdit": {
            "description": "RadiusEdit",
            "type": "boolean"
          },
          "radiusView": {
            "description": "RadiusView",
            "type": "boolean"
          },
          "rpcEdit": {
            "description": "RpcEdit",
            "type": "boolean"
          },
          "rpcView": {
            "description": "RpcView",
            "type": "boolean"
          },
          "secretServerEdit": {
            "description": "SecretServerEdit",
            "type": "boolean"
          },
          "secretServerView": {
            "description": "SecretServerView",
            "type": "boolean"
          },
          "securityEdit": {
            "description": "SecurityEdit",
            "type": "boolean"
          },
          "securityView": {
            "description": "SecurityView",
            "type": "boolean"
          },
          "sessionRecordingEdit": {
            "description": "SessionRecordingEdit",
            "type": "boolean"
          },
          "sessionRecordingView": {
            "description": "SessionRecordingView",
            "type": "boolean"
          },
          "slackEdit": {
            "description": "SlackEdit",
            "type": "boolean"
          },
          "slackView": {
            "description": "SlackView",
            "type": "boolean"
          },
          "unlimitedAdmin": {
            "description": "UnlimitedAdmin",
            "type": "boolean"
          },
          "userExperienceEdit": {
            "description": "UserExperienceEdit",
            "type": "boolean"
          },
          "userExperienceView": {
            "description": "UserExperienceView",
            "type": "boolean"
          },
          "userInterfaceEdit": {
            "description": "UserInterfaceEdit",
            "type": "boolean"
          },
          "userInterfaceView": {
            "description": "UserInterfaceView",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfConfigurationAuditItem": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ConfigurationAuditItem"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationAuditItem": {
        "description": "Configuration Audit Item",
        "properties": {
          "action": {
            "description": "Action that was performed",
            "type": "string"
          },
          "date": {
            "description": "Date of Action",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "Display name of user performing action",
            "type": "string"
          },
          "notes": {
            "description": "Notes on the action that was performed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationGeneralV2Model": {
        "description": "Configuration General",
        "properties": {
          "applicationSettings": {
            "$ref": "#/components/schemas/ConfigurationApplicationSettingsModel"
          },
          "email": {
            "$ref": "#/components/schemas/ConfigurationEmailModel"
          },
          "folders": {
            "$ref": "#/components/schemas/ConfigurationFoldersModel"
          },
          "launcherSettings": {
            "$ref": "#/components/schemas/ConfigurationLauncherSettingsModel"
          },
          "localUserPasswords": {
            "$ref": "#/components/schemas/ConfigurationLocalUserPasswordsModel"
          },
          "login": {
            "$ref": "#/components/schemas/ConfigurationLoginV2Model"
          },
          "permissionOptions": {
            "$ref": "#/components/schemas/ConfigurationPermissionOptionsModel"
          },
          "protocolHandlerSettings": {
            "$ref": "#/components/schemas/ConfigurationProtocolHandlerSettingsModel"
          },
          "security": {
            "$ref": "#/components/schemas/ConfigurationSecurityModel"
          },
          "sessionRecording": {
            "$ref": "#/components/schemas/ConfigurationSessionRecordingModel"
          },
          "unlimitedAdmin": {
            "$ref": "#/components/schemas/UnlimitedAdminModel"
          },
          "userExperience": {
            "$ref": "#/components/schemas/ConfigurationUserExperienceModel"
          },
          "userInterface": {
            "$ref": "#/components/schemas/ConfigurationUserInterfaceModel"
          }
        },
        "type": "object"
      },
      "ConfigurationApplicationSettingsModel": {
        "description": "Configuration Application Settings",
        "properties": {
          "allowSendTelemetry": {
            "description": "Send Anonymized System Metrics Information",
            "type": "boolean"
          },
          "allowSoftwareUpdateChecks": {
            "description": "Allow software update checks. This setting is ignored in cloud environments.",
            "type": "boolean"
          },
          "apiRefreshTokensEnabled": {
            "description": "API Refresh Tokens Enabled",
            "type": "boolean"
          },
          "apiSessionTimeoutDays": {
            "description": "API session timeout days",
            "type": "integer",
            "format": "int32"
          },
          "apiSessionTimeoutHours": {
            "description": "API session timeout hours",
            "type": "integer",
            "format": "int32"
          },
          "apiSessionTimeoutMinutes": {
            "description": "API session timeout minutes",
            "type": "integer",
            "format": "int32"
          },
          "apiSessionTimeoutUnlimited": {
            "description": "API session timeout unlimited",
            "type": "boolean"
          },
          "configurationEarlyAdopterEnabled": {
            "description": "Notify when preview releases are available. False by default",
            "type": "boolean"
          },
          "customUrl": {
            "description": "Outward accessible url to get to application. This setting is ignored in cloud environments.",
            "type": "string"
          },
          "displayDowntimeMessageToAdminsOnly": {
            "description": "Display Downtime Message To Admins Only",
            "type": "boolean"
          },
          "enableCredSsp": {
            "description": "Enable Cred SSP for win RM",
            "type": "boolean"
          },
          "enableSyslogCefLogging": {
            "description": "Enable Syslog/CEF Logging",
            "type": "boolean"
          },
          "enableWebServices": {
            "description": "Enable Web services",
            "type": "boolean"
          },
          "maximumTokenRefreshesAllowed": {
            "description": "Maximum Token Refreshes Allowed",
            "type": "integer",
            "format": "int32"
          },
          "maxSecretLogLength": {
            "description": "Maximum number of entries in secret log",
            "type": "integer",
            "format": "int32"
          },
          "mobileMaxOfflineDays": {
            "description": "The Maximum Time for Offline Access on Mobile Devices setting in Secret Server determines how long to cache secret data on the mobile device",
            "type": "integer",
            "format": "int32"
          },
          "mobileMaxOfflineHours": {
            "description": "The Maximum Time for Offline Access on Mobile Devices setting in Secret Server determines how long to cache secret data on the mobile device",
            "type": "integer",
            "format": "int32"
          },
          "obfuscatePersonallyIdentifiableInformation": {
            "description": "Should Secret Server obfuscate information that could identify a person",
            "type": "boolean"
          },
          "piiObfuscationLevel": {
            "description": "Delimit or replace personally identifiable information and automatically remove from Audit Exports ",
            "type": "string"
          },
          "preventApplicationFromSleeping": {
            "description": "A keep alive thread will run in the background pinging the web URL to make sure IIS does not stop running due to inactivity. This setting is ignored in cloud environments.",
            "type": "boolean"
          },
          "preventDirectApiAuthentication": {
            "description": "Prevent non-Application Account users from directly authenticating against the API.",
            "type": "boolean"
          },
          "syslogCefLogSite": {
            "description": "This is the site that the CEF/Syslogs will run on",
            "type": "integer",
            "format": "int32"
          },
          "syslogCefPort": {
            "description": "Syslog/CEF Protocol",
            "type": "integer",
            "format": "int32"
          },
          "syslogCefProtocol": {
            "description": "Syslog/CEF Protocol to use when sending logs",
            "type": "string"
          },
          "syslogCefServer": {
            "description": "Syslog/CEF Server Address",
            "type": "string"
          },
          "syslogCefTimeZone": {
            "description": "Time Zone to use when sending Syslog/CEF Protocol log entries",
            "type": "string"
          },
          "tmsInstallationPath": {
            "description": "If TMS is installed, the file location. This setting is ignored in cloud environments.",
            "type": "string"
          },
          "winRmEndpointUrl": {
            "description": "Win RM endpoint url",
            "type": "string"
          },
          "writeSyslogToEventLog": {
            "description": "Enable syslog events to the windows event log. This setting is ignored in cloud environments.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationEmailModel": {
        "description": "Outgoing email server configuration",
        "properties": {
          "fromEmailAddress": {
            "description": "All emails will be sent from this address",
            "type": "string"
          },
          "fromEmailName": {
            "description": "This is the 'From' friendly name for emails that are sent. It can be left empty.",
            "type": "string"
          },
          "sendLegacyEmails": {
            "description": "Send Legacy Emails",
            "type": "boolean"
          },
          "smtpCheckCertificateRevocation": {
            "description": "Check Certificate Revocation when in Implicit SSL Connection Mode",
            "type": "boolean"
          },
          "smtpDomain": {
            "description": "SMTP user domain",
            "type": "string"
          },
          "smtpPassword": {
            "description": "SMTP user password",
            "type": "string"
          },
          "smtpPort": {
            "description": "Custom port, otherwise the default",
            "type": "integer",
            "format": "int32"
          },
          "smtpServer": {
            "description": "The resolvable and reachable host name for the outgoing SMTP server",
            "type": "string"
          },
          "smtpUseCredentials": {
            "description": "true if credentials are set, false if anonymous",
            "type": "boolean"
          },
          "smtpUseImplicitSSL": {
            "description": "Implicit SSL Connection Mode",
            "type": "boolean"
          },
          "smtpUserName": {
            "description": "SMTP user name",
            "type": "string"
          },
          "smtpUseSSL": {
            "description": "Use SSL to connect",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationFoldersModel": {
        "description": "Folder Configuration",
        "properties": {
          "enablePersonalFolders": {
            "description": "Each user will have a personal folder created and assigned to them",
            "type": "boolean"
          },
          "personalFolderName": {
            "description": "The name of the root personal folder.  Each user's personal folder will be named based on the user",
            "type": "string"
          },
          "personalFolderNameOption": {
            "$ref": "#/components/schemas/PersonalFolderNameOptionType"
          },
          "personalFolderWarning": {
            "description": "Warning to be shown when creating Secrets if ShowPersonalFolderWarning is true",
            "type": "string"
          },
          "requireViewFolderPermission": {
            "description": "Users will only see folders they have View permissions on",
            "type": "boolean"
          },
          "showPersonalFolderWarning": {
            "description": "When true the PersonalFolderWarning will be shown when creating Secrets",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PersonalFolderNameOptionType": {
        "description": "The format for the personal folder name for each user",
        "properties": {},
        "type": "string",
        "enum": [
          "DisplayName",
          "UsernameAndDomain"
        ]
      },
      "ConfigurationLauncherSettingsModel": {
        "description": "Configuration Launcher Settings",
        "properties": {
          "checkInSecretOnLastLauncherClose": {
            "description": "Forces Check In of Secret when user closes their only active launcher.",
            "type": "boolean"
          },
          "closeLauncherOnCheckInSecret": {
            "description": "When Secret is Checked In, all active launchers associated with it will close.",
            "type": "boolean"
          },
          "enableDomainDownload": {
            "description": "Allow the user to download existing and tested mappings from Thycotic.com.",
            "type": "boolean"
          },
          "enableDomainUpload": {
            "description": "Allow the user to upload mappings",
            "type": "boolean"
          },
          "enableLauncher": {
            "description": "Enable Launcher",
            "type": "boolean"
          },
          "enableLauncherAutoUpdate": {
            "description": "Enable Launcher Auto Update",
            "type": "boolean"
          },
          "enableWebParsing": {
            "description": "Allow Secret Server to retrieve and parse the mapped website when using the web launcher.",
            "type": "boolean"
          },
          "launcherDeploymentType": {
            "description": "Launcher Deployment Type",
            "type": "string"
          },
          "sendSecretUrlToLauncher": {
            "description": "Send the URL that is on the Secret to the web password launcher in addition to the bookmarklet",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLocalUserPasswordsModel": {
        "description": "Configuration Section for Local User Passwords",
        "properties": {
          "allowUsersToResetForgottenPasswords": {
            "description": "Whether or not the local password can be reset by the user",
            "type": "boolean"
          },
          "enableLocalUserPasswordExpiration": {
            "description": "Indicates whether or not local users must change their password when it is reset or expires.",
            "type": "boolean"
          },
          "enableMinimumPasswordAge": {
            "description": "Local users cannot change their password until it meets this age",
            "type": "boolean"
          },
          "enablePasswordHistory": {
            "description": "Passwords cannot be reused when enabled and still in stored history",
            "type": "boolean"
          },
          "localUserPasswordExpirationDays": {
            "description": "How many days until the password expires",
            "type": "integer",
            "format": "int32"
          },
          "localUserPasswordExpirationHours": {
            "description": "How many hours until the password expires",
            "type": "integer",
            "format": "int32"
          },
          "localUserPasswordExpirationMinutes": {
            "description": "How many minutes until the password expires",
            "type": "integer",
            "format": "int32"
          },
          "minimumPasswordAgeDays": {
            "description": "How many days until password can be changed",
            "type": "integer",
            "format": "int32"
          },
          "minimumPasswordAgeHours": {
            "description": "How many hours until password can be changed",
            "type": "integer",
            "format": "int32"
          },
          "minimumPasswordAgeMinutes": {
            "description": "How many minutes until password can be changed",
            "type": "integer",
            "format": "int32"
          },
          "passwordHistoryItems": {
            "description": "How many passwords should be stored in history.",
            "type": "integer",
            "format": "int32"
          },
          "passwordHistoryItemsAll": {
            "description": "Keep all password history items.",
            "type": "boolean"
          },
          "passwordMinimumLength": {
            "description": "The minimum length required for local user passwords",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequireLowercase": {
            "description": "Whether or not the local password must include a lowercase letter",
            "type": "boolean"
          },
          "passwordRequireNumbers": {
            "description": "Whether or not the local password must include a number",
            "type": "boolean"
          },
          "passwordRequireSymbols": {
            "description": "Whether or not the local password must include a symbol",
            "type": "boolean"
          },
          "passwordRequireUppercase": {
            "description": "Whether or not the local password must include an uppercase letter",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginV2Model": {
        "description": "Login Configuration",
        "properties": {
          "allowRememberMe": {
            "description": "This option enables the \"Remember Me\" checkbox on the login screen.  When a user chooses to use \"Remember Me\", an encrypted cookie will be set in their browser.  This will enable the user to revisit Secret Server without the need to log in.  This cookie will no longer be valid when the \"Remember Me\" period has expired and they will have to log in again",
            "type": "boolean"
          },
          "cacheADCredentials": {
            "description": "Allows cached credentials to be used when Distributed Engine is unable to connect to Active Directory",
            "type": "boolean"
          },
          "defaultLoginDomain": {
            "description": "Default Login Domain",
            "type": "integer",
            "format": "int32"
          },
          "enableDomainSelector": {
            "description": "Display the domain selector at login",
            "type": "integer",
            "format": "int32"
          },
          "enableLoginFailureCAPTCHA": {
            "description": "When this option is checked, the user will only have to complete a CAPTCHA if their login credentials are entered incorrectly a certain number of times",
            "type": "boolean"
          },
          "maxConcurrentLoginsPerUser": {
            "description": "Maximum concurrent logins per user",
            "type": "integer",
            "format": "int32"
          },
          "maximumLoginFailures": {
            "description": "Set the number of login attempts allowed before a user is locked out of their account.  Once locked out, they will need a Secret Server administrator to reset their password and enable their account",
            "type": "integer",
            "format": "int32"
          },
          "maxLoginFailuresBeforeCAPTCHA": {
            "description": "Maximum Login Failures Before CAPTCHA",
            "type": "integer",
            "format": "int32"
          },
          "rememberMeTimeOutMinutes": {
            "description": "The number of minutes that you will be remembered",
            "type": "integer",
            "format": "int32"
          },
          "sshKeyIntegration": {
            "$ref": "#/components/schemas/ConfigurationLoginSshKeyIntegrationModel"
          },
          "twoFactor": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorModel"
          },
          "userLockoutTimeMinutes": {
            "description": "Number of minutes a User will be locked out for",
            "type": "integer",
            "format": "int32"
          },
          "visualEncryptedKeyboardEnabled": {
            "description": "Enable the Visual Keyboard for logins",
            "type": "boolean"
          },
          "visualEncryptedKeyboardRequired": {
            "description": "Require the Visual Keyboard for logins",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginSshKeyIntegrationModel": {
        "description": "Ssh Key Integration Configuration",
        "properties": {
          "authenticationMethod": {
            "description": "Require password only, public key only, password or public key, password and public key",
            "type": "integer",
            "format": "int32"
          },
          "enable": {
            "description": "When activated, SSH key pairs can be used for authentication in SSH Terminal",
            "type": "boolean"
          },
          "expirationInHours": {
            "description": "The number of days and hours the key will stay active",
            "type": "integer",
            "format": "int32"
          },
          "keyExpires": {
            "description": "When activated, SSH keys will expire after a specified amount of time",
            "type": "boolean"
          },
          "twoFactorBypass": {
            "description": "When activated, providing a valid SSH key (and password, if required by Unix Authentication Method) will bypass any required 2FA validation",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginTwoFactorModel": {
        "description": "Two Factor Login Configuration",
        "properties": {
          "allowTwoFactorRememberMe": {
            "description": "When this option is checked, the user will only have to provide their two factor authentication information once in that browser for set time. This is done by setting an encrypted cookie on the browser.  The cookie will no longer be valid when the Two Factor Remember Me Duration has expired",
            "type": "boolean"
          },
          "duo": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorDuoModel"
          },
          "openIdConnect": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorOpenIdConnectModel"
          },
          "radius": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorRadiusModel"
          },
          "requireTwoFactorForWebLogin": {
            "description": "Require Two Factor For Web Login",
            "type": "boolean"
          },
          "requireTwoFactorForWebServices": {
            "description": "Require Two Factor For Web Services",
            "type": "boolean"
          },
          "twoFactorRememberMeTimeOutDays": {
            "description": "The number of days that you will not be reprompted for 2FA",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginTwoFactorDuoModel": {
        "description": "Duo Two Factor Login Configuration",
        "properties": {
          "apiHostname": {
            "description": "API Hostname",
            "type": "string"
          },
          "enable": {
            "description": "Enable Duo Integration",
            "type": "boolean"
          },
          "integrationKey": {
            "description": "Integration Key",
            "type": "string"
          },
          "secretKey": {
            "description": "Secret Key",
            "type": "string"
          },
          "useRadiusUsername": {
            "description": "Use RADIUS Username for DUO",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginTwoFactorOpenIdConnectModel": {
        "description": "OpenID Connect Two Factor Login Configuration",
        "properties": {
          "addNewUsersToThycoticOne": {
            "description": "When activated, new Secret Server users will be added automatically to Thycotic One",
            "type": "boolean"
          },
          "clientId": {
            "description": "Client Id",
            "type": "string"
          },
          "clientSecret": {
            "description": "Client Secret, will only be populated for export, otherwise null",
            "type": "string"
          },
          "clientSecretExists": {
            "description": "Indicates if a Client Secret exists, since the Client Secret will only be populated for export",
            "type": "boolean"
          },
          "enable": {
            "description": "Enable OpenID Connect Integration",
            "type": "boolean"
          },
          "logoutUrl": {
            "description": "The URL users must visit to log out of their OpenID Connect account. (Optional)",
            "type": "string"
          },
          "serverUrl": {
            "description": "OpenID Connect Server URL",
            "type": "string"
          },
          "useThycoticOneAuthAsDefault": {
            "description": "When activated, passwords will be checked against Thycotic One instead of Secret Server. This affects the REST API, DoubleLock, and export functionality",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginTwoFactorRadiusModel": {
        "description": "RADIUS Two Factor Login Configuration",
        "properties": {
          "attemptUserPassword": {
            "description": "If checked, Secret Server will automatically try to authenticate to RADIUS using the user's local password after it is entered during login.\r\nIf RADIUS authentication fails, the user will be prompted for the correct RADIUS password.Please note that this is not supported when Integrated Windows\r\nAuthentication is enabled",
            "type": "boolean"
          },
          "clientPortRange": {
            "description": "RADIUS Client Port Range",
            "type": "string"
          },
          "defaultUsername": {
            "description": "RADIUS Default Username",
            "type": "string"
          },
          "disableNasIpAddressAttribute": {
            "description": "Disable Radius NAS-IP-Address Attribute",
            "type": "boolean"
          },
          "enable": {
            "description": "Enabling RADIUS integration will allow another form of two factor authentication for users",
            "type": "boolean"
          },
          "enableFailoverServer": {
            "description": "Enabling a Failover RADIUS server will allow another server to fail over to",
            "type": "boolean"
          },
          "enableRadiusNasId": {
            "description": "Configure the NAS-Identifier that will be sent with the RADIUS Access-Request",
            "type": "boolean"
          },
          "failoverServerIP": {
            "description": "The IP address of your Failover RADIUS server",
            "type": "string"
          },
          "failoverServerPort": {
            "description": "Failover RADIUS Server Port",
            "type": "integer",
            "format": "int32"
          },
          "failoverSharedSecret": {
            "description": "Failover RADIUS Shared Secret",
            "type": "string"
          },
          "failoverTimeoutSeconds": {
            "description": "Failover Time Out (seconds)",
            "type": "integer",
            "format": "int32"
          },
          "loginExplanation": {
            "description": "RADIUS Login Explanation",
            "type": "string"
          },
          "nasId": {
            "description": "The NAS-Identifier attribute value that will be sent with the RADIUS Access-Request",
            "type": "string"
          },
          "protocol": {
            "description": "Authentication Protocol",
            "type": "integer",
            "format": "int32"
          },
          "serverIP": {
            "description": "The IP address of your RADIUS server",
            "type": "string"
          },
          "serverPort": {
            "description": "RADIUS Server Port",
            "type": "integer",
            "format": "int32"
          },
          "sharedSecret": {
            "description": "RADIUS Shared Secret for All Users",
            "type": "string"
          },
          "sharedSecretSameForAllUsers": {
            "description": "Use Same RADIUS Shared Secret for All Users",
            "type": "boolean"
          },
          "timeoutSeconds": {
            "description": "Time Out (seconds)",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationPermissionOptionsModel": {
        "description": "Configuration Permission Options",
        "properties": {
          "allowDuplicateSecretNames": {
            "description": "Allow Secrets to have the same name in the same folder",
            "type": "boolean"
          },
          "allowViewUserToRetrieveAutoChangeNextPassword": {
            "description": "Users that only have secret view can see the next password",
            "type": "boolean"
          },
          "defaultSecretPermissions": {
            "$ref": "#/components/schemas/DefaultSecretPermissionsType"
          },
          "enableApprovalFromEmail": {
            "description": "Allow approval from email",
            "type": "boolean"
          },
          "forceSecretApproval": {
            "description": "Require approval for secrets",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DefaultSecretPermissionsType": {
        "description": "Default permissions to be applied when a Secret is created",
        "properties": {},
        "type": "string",
        "enum": [
          "InheritsPermissions",
          "CopyFromFolder",
          "OnlyAllowCreator"
        ]
      },
      "ConfigurationProtocolHandlerSettingsModel": {
        "description": "Configuration Protocol Handler Settings",
        "properties": {
          "protocolHandlerInstallTimeAllowedDomains": {
            "description": "Allowed Domains/IP Addresses (comma-separated)",
            "type": "string"
          },
          "protocolHandlerInstallTimeDisableAutoUpdate": {
            "description": "Disable Auto Update",
            "type": "boolean"
          },
          "protocolHandlerInstallTimeSettingsEnabled": {
            "description": "Enable Protocol Handler Install Time Settings",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSecurityModel": {
        "description": "Security Configuration",
        "properties": {
          "allowWebServiceHttpGet": {
            "description": "Allows the Http Get verb for Web Services.  This allows REST-style calls to many Web Service methods, but reduces security",
            "type": "boolean"
          },
          "auditTlsErrors": {
            "description": "When enabled, this setting will add audits for TLS certificate validation. Auditing will apply to all Active Directory domains using LDAPS and Syslog using TLS. Certificate policy options including ignoring certificate revocation failures applies to Syslog using TLS only. The default is the most strict so the certificate chain policy may need to be updated. TLS errors will be logged to Security Audit Log found on the Administration page",
            "type": "boolean"
          },
          "auditTlsErrorsDebug": {
            "description": "Enable TLS Debugging and Connection Tracking",
            "type": "boolean"
          },
          "certificateChainPolicyOptions": {
            "description": "Certificate chain policy options",
            "type": "string"
          },
          "clientCertificateIds": {
            "description": "Client Certificate Thumbprint(s)",
            "type": "string"
          },
          "databaseIntegrityMonitoringSymmetricKey": {
            "description": "The secure symmetric key to use when sending data to the separate Database Integrity Monitoring service. This can be retrieved from the configuration utility in the Database Integrity Monitoring service install location",
            "type": "string"
          },
          "enableDatabaseIntegrityMonitoring": {
            "description": "When enabled, Secret Server will communicate with the separately installed Database Integrity Monitoring service.  This service will send email alerts if it detects possible database tampering.  Access to Secret Server's database and web servers should be restricted to highly trusted individuals only",
            "type": "boolean"
          },
          "enableFileRestrictions": {
            "description": "Enable restrictions on the types or sizes of files that can be uploaded into Secret Server",
            "type": "boolean"
          },
          "enableFrameBlocking": {
            "description": "Enable Frame Blocking",
            "type": "boolean"
          },
          "enableHSTS": {
            "description": "Enable HTTP Strict Transport Security",
            "type": "boolean"
          },
          "enableSecretErase": {
            "description": "Enable secret erase functionality",
            "type": "boolean"
          },
          "fileExtensionRestrictions": {
            "description": "File Extension Restrictions",
            "type": "string"
          },
          "fipsEnabled": {
            "description": "Allow only FIPS compliant encryption schemes to be used",
            "type": "boolean"
          },
          "forceHttps": {
            "description": "By requiring HTTPS, users will not be able to access Secret Server using HTTP",
            "type": "boolean"
          },
          "hideVersionNumber": {
            "description": "This will disable the VersionGet SOAP call. It will also hide the Secret Server Version Numbers from the Headers and Footer",
            "type": "boolean"
          },
          "hstsMaxAge": {
            "description": "Maximum Age (in seconds)",
            "type": "integer",
            "format": "int32"
          },
          "ignoreCertificateRevocationFailures": {
            "description": "Indicates if X509RevocationMode.NoCheck certificate chain policy option is set",
            "type": "boolean"
          },
          "maximumFileSizeBytes": {
            "description": "Maximum File Size (bytes)",
            "type": "string"
          },
          "maximumFileSizeSupported": {
            "description": "Maximum File Size supported by ASP.NET",
            "type": "boolean"
          },
          "secretEraseWorkflow": {
            "description": "The workflow used by secret erase",
            "type": "integer",
            "format": "int32"
          },
          "webPasswordFillerRequiresFullDomainMatch": {
            "description": "When enabled, the Web Password Filler will only allow exact domain matches.  When disabled, subdomains such as https://sub.google.com will match http://google.com Secrets.  The recommended setting is enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSessionRecordingModel": {
        "description": "Session Recording Configuration",
        "properties": {
          "archiveLocationBySite": {
            "description": "If archive location changes based on site",
            "type": "boolean"
          },
          "archivePath": {
            "description": "The location of the recordings stored on disk",
            "type": "string"
          },
          "archivePathMappings": {
            "description": "A list of archive paths mapped to sites, used when ArchiveLocationBySite is true",
            "items": {
              "$ref": "#/components/schemas/ConfigurationSessionRecordingSiteArchiveSummary"
            },
            "type": "array"
          },
          "daysUntilArchive": {
            "description": "The number of days until a recording is archived",
            "type": "integer",
            "format": "int32"
          },
          "daysUntilDelete": {
            "description": "The number of days before a session recording is deleted",
            "type": "integer",
            "format": "int32"
          },
          "enableArchive": {
            "description": "If recordings should be archived",
            "type": "boolean"
          },
          "enableDelete": {
            "description": "If session recordings will be automatically deleted",
            "type": "boolean"
          },
          "enableHardwareAcceleration": {
            "description": "If hardware acceleration should be enabled",
            "type": "boolean"
          },
          "enableInactivityTimeout": {
            "description": "If sessions should end if inactive",
            "type": "boolean"
          },
          "enableOnDemandVideoProcessing": {
            "description": "If on demand video processing should be available",
            "type": "boolean"
          },
          "enableSessionRecording": {
            "description": "Whether or not Session Recording is enabled",
            "type": "boolean"
          },
          "encryptArchive": {
            "description": "If archived session recordings should be encrypted",
            "type": "boolean"
          },
          "hideRecordingIndicator": {
            "description": "If the recording indicator should be shown",
            "type": "boolean"
          },
          "inactivityTimeoutMinutes": {
            "description": "The length of inactivity before the session is ended",
            "type": "integer",
            "format": "int32"
          },
          "maxSessionLength": {
            "description": "The longest a session is allowed to be in hours",
            "type": "integer",
            "format": "int32"
          },
          "rdpProxyRecordKeyStrokes": {
            "description": "If proxied RDP sessions should have keystrokes recorded",
            "type": "boolean"
          },
          "rdpProxyRecordVideo": {
            "description": "If proxied RDP sessions should have video recorded",
            "type": "boolean"
          },
          "sshProxyRecordKeyStrokes": {
            "description": "If proxied SSH sessions should have keystrokes recorded",
            "type": "boolean"
          },
          "sshProxyRecordVideo": {
            "description": "If proxied SSH sessions should have video recorded",
            "type": "boolean"
          },
          "storeInDatabase": {
            "description": "If session recordings should be stored in the database",
            "type": "boolean"
          },
          "useTemporaryArchives": {
            "description": "If the archive location should store temporary session recording data instead of the database",
            "type": "boolean"
          },
          "videoCodecId": {
            "description": "Which video codec to use for session recordings on OSX",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationSessionRecordingSiteArchiveSummary": {
        "description": "The session recording archive locations that are mapped to specific sites",
        "properties": {
          "path": {
            "description": "Path",
            "type": "string"
          },
          "siteId": {
            "description": "SiteId",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "SiteName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UnlimitedAdminModel": {
        "description": "Unlimited Admin Configuration",
        "properties": {
          "enabled": {
            "description": "State of Unlimited Admin Mode",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationUserExperienceModel": {
        "description": "Configuration User Experience",
        "properties": {
          "applicationLanguage": {
            "description": "The default application language for users and the language for non-user specific tasks like logging when applicable",
            "type": "integer",
            "format": "int32"
          },
          "checkoutNotificationThreshold": {
            "description": "Percentage of secret checkout time elapsed when checkout notification will be sent",
            "type": "integer",
            "format": "int32"
          },
          "defaultDateFormat": {
            "description": "The default date format that everyone sees unless they override with a user preference",
            "type": "integer",
            "format": "int32"
          },
          "defaultNewUserRoleId": {
            "description": "The role that should be assigned when a new user is created",
            "type": "integer",
            "format": "int32"
          },
          "defaultTimeFormat": {
            "description": "The default time format that everyone sees unless they override with a user preference",
            "type": "integer",
            "format": "int32"
          },
          "enableSecretCheckOutExtension": {
            "description": "Enables users to extend secret check out sessions.",
            "type": "boolean"
          },
          "forceInactivityTimeout": {
            "description": "Logout users that are inactive",
            "type": "boolean"
          },
          "forceInactivityTimeoutMinutes": {
            "description": "Logout users that are inactive for this many minutes",
            "type": "integer",
            "format": "int32"
          },
          "requireFolderForSecret": {
            "description": "Secrets must be created within a folder",
            "type": "boolean"
          },
          "searchDelayMs": {
            "description": "This controls the delay, in milliseconds, until the search is executed by the global search in the header.  If set to 0, it will require the user to press enter in the search bar.",
            "type": "integer",
            "format": "int32"
          },
          "secretPasswordHistoryRestrictionAll": {
            "description": "No duplicate passwords on a Secret",
            "type": "boolean"
          },
          "secretPasswordHistoryRestrictionCount": {
            "description": "How many passwords must be unique on a Secret",
            "type": "integer",
            "format": "int32"
          },
          "secretViewIntervalMinutes": {
            "description": "How long entering comments to view a Secret last before being required again",
            "type": "integer",
            "format": "int32"
          },
          "serverTimeZoneId": {
            "description": "The timezone that the server shows by default and when job scheduling runs",
            "type": "string"
          },
          "uiInactivitySleepMinutes": {
            "description": "How long until the UI will go inactive and stop polling for updates",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationUserInterfaceModel": {
        "description": "User interface settings",
        "properties": {
          "allowUserToSelectTheme": {
            "description": "Allow users to pick their theme when in classic mode",
            "type": "boolean"
          },
          "customLogoCollapsed": {
            "description": "Custom logo when left nav is collapsed",
            "type": "string"
          },
          "customLogoFullSize": {
            "description": "Custom logo full size",
            "type": "string"
          },
          "defaultClassicTheme": {
            "description": "Default classic theme",
            "type": "string"
          },
          "disableLegacyUi": {
            "description": "When true the legacy UI cannot be used",
            "type": "boolean"
          },
          "newUiDefault": {
            "description": "New users will use the new ui by default",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLocalPasswordPatchArgs": {
        "description": "ConfigurationLocalPasswordPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationLocalPasswordPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationLocalPasswordPatchModel": {
        "description": "Update settings for local user password configuration",
        "properties": {
          "allowUsersToResetForgottenPasswords": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableLocalUserPasswordExpiration": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableMinimumPasswordAge": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enablePasswordHistory": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "localUserPasswordExpirationDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "localUserPasswordExpirationHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "localUserPasswordExpirationMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "minimumPasswordAgeDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "minimumPasswordAgeHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "minimumPasswordAgeMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "passwordHistoryItems": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "passwordHistoryItemsAll": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "passwordMinimumLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "passwordRequireLowercase": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "passwordRequireNumbers": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "passwordRequireSymbols": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "passwordRequireUppercase": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfInt32": {
        "description": "How many days until the password expires.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalInt32": {
        "description": "The minimum length required for local user passwords",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationSecurityPatchArgs": {
        "description": "ConfigurationSecurityPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationSecurityPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationSecurityPatchModel": {
        "description": "Update security configuration",
        "properties": {
          "allowWebServiceHttpGet": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "auditTlsErrors": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "auditTlsErrorsDebug": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "certificateChainPolicyOptions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "clientCertificateIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "databaseIntegrityMonitoringSymmetricKey": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "enableDatabaseIntegrityMonitoring": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableFileRestrictions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableFrameBlocking": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableHSTS": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableSecretErase": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "fileExtensionRestrictions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "fipsEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "forceHttps": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "hideVersionNumber": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "hstsMaxAge": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "ignoreCertificateRevocationFailures": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "maximumFileSizeBytes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "maximumFileSizeSupported": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "secretEraseWorkflow": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "webPasswordFillerRequiresFullDomainMatch": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginV2PatchArgs": {
        "description": "ConfigurationLoginV2PatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationLoginV2PatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginV2PatchModel": {
        "description": "Login Configuration",
        "properties": {
          "allowRememberMe": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "cacheADCredentials": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "defaultLoginDomain": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableDomainSelector": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableLoginFailureCAPTCHA": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "maxConcurrentLoginsPerUser": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "maximumLoginFailures": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "maxLoginFailuresBeforeCAPTCHA": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "rememberMeTimeOutMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "sshKeyIntegration": {
            "$ref": "#/components/schemas/ConfigurationLoginSshKeyIntegrationPatchModel"
          },
          "twoFactor": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorPatchModel"
          },
          "userLockoutTimeMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "visualEncryptedKeyboardEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "visualEncryptedKeyboardRequired": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginSshKeyIntegrationPatchModel": {
        "description": "Ssh Key Integration Configuration",
        "properties": {
          "authenticationMethod": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enable": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "expirationInHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "keyExpires": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "twoFactorBypass": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginTwoFactorPatchModel": {
        "description": "Two Factor Login Configuration",
        "properties": {
          "allowTwoFactorRememberMe": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "duo": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorDuoPatchModel"
          },
          "openIdConnect": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorOpenIdConnectPatchModel"
          },
          "radius": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorRadiusPatchModel"
          },
          "requireTwoFactorForWebLogin": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "requireTwoFactorForWebServices": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "twoFactorRememberMeTimeOutDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginTwoFactorDuoPatchModel": {
        "description": "Duo Two Factor Login Configuration",
        "properties": {
          "apiHostname": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "enable": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "integrationKey": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "secretKey": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "useRadiusUsername": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalBoolean": {
        "description": "Use RADIUS Username for DUO",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginTwoFactorOpenIdConnectPatchModel": {
        "description": "OpenID Connect Two Factor Login Configuration",
        "properties": {
          "addNewUsersToThycoticOne": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "clientId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "clientSecret": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "enable": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "logoutUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "serverUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "useThycoticOneAuthAsDefault": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginTwoFactorRadiusPatchModel": {
        "description": "RADIUS Two Factor Login Configuration",
        "properties": {
          "attemptUserPassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "clientPortRange": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "defaultUsername": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "disableNasIpAddressAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "enable": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableFailoverServer": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableRadiusNasId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "failoverServerIP": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "failoverServerPort": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "failoverSharedSecret": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "failoverTimeoutSeconds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "loginExplanation": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "nasId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "protocol": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "serverIP": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "serverPort": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "sharedSecret": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sharedSecretSameForAllUsers": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "timeoutSeconds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginPolicyModel": {
        "description": "Login Policy Configuration",
        "properties": {
          "enableLoginPolicy": {
            "description": "When true this shows the login policy on the login screen.",
            "type": "boolean"
          },
          "forceLoginPolicy": {
            "description": "When true this will force the user to check that they accept the login policy that is displayed.",
            "type": "boolean"
          },
          "loginPolicy": {
            "description": "When EnableLoginPolicy is true this text will be shown to the user on the login page.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginPolicyPatchArgs": {
        "description": "ConfigurationLoginPolicyPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationLoginPolicyPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginPolicyPatchModel": {
        "description": "Login Policy Configuration",
        "properties": {
          "enableLoginPolicy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "forceLoginPolicy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "loginPolicy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlModel": {
        "description": "SAML configuration",
        "properties": {
          "enabled": {
            "description": "Enable SAML authentication",
            "type": "boolean"
          },
          "enableLegacySLO": {
            "description": "Enable legacy SingleLogout",
            "type": "boolean"
          },
          "identityProviders": {
            "description": "List of Identity Providers",
            "items": {
              "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderModel"
            },
            "type": "array"
          },
          "legacyUsernameAttribute": {
            "description": "Optional AttributeName to use for matching a Secret Server user.",
            "type": "string"
          },
          "serviceProviderCertificate": {
            "description": "The Service Provider Certificate. Base64 encoded",
            "type": "string"
          },
          "serviceProviderCertificateExpirationDateString": {
            "description": "The expiration date of the Service Provider Certificate",
            "type": "string"
          },
          "serviceProviderCertificateFriendlyName": {
            "description": "The friendly name of the Service Provider Certificate",
            "type": "string"
          },
          "serviceProviderCertificatePassword": {
            "description": "The password for the Service Provider Certificate",
            "type": "string"
          },
          "serviceProviderCertificateSubject": {
            "description": "The subject of the Service Provider Certificate",
            "type": "string"
          },
          "serviceProviderCertificateThumbprint": {
            "description": "The thumbprint of the Service Provider Certificate",
            "type": "string"
          },
          "serviceProviderName": {
            "description": "The name of the Service Provider",
            "type": "string"
          },
          "useLegacy": {
            "description": "Use Legacy SAML",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlPatchArgs": {
        "description": "ConfigurationSamlPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationSamlPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlPatchModel": {
        "description": "SAML configuration",
        "properties": {
          "enabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableLegacySLO": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "identityProviders": {
            "description": "List of Identity Providers",
            "items": {
              "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderPatchModel"
            },
            "type": "array"
          },
          "legacyUsernameAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "serviceProviderCertificate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "serviceProviderCertificatePassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "serviceProviderName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "useLegacy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlIdentityProviderPatchModel": {
        "description": "SAML Identity Provider configuration",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "authnContext": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "clockSkew": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "disableAssertionReplayCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "disableAudienceRestrictionCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "disableAuthnContextCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "disableDestinationCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "disableInboundLogout": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "disableInResponseToCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "disablePendingLogoutCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "disableRecipientCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "disableTimePeriodCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "displayName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "domainAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "enableDetailedLog": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableSLO": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "forceAuthentication": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "identityProviderId": {
            "description": "SAML Identity Provider Id",
            "type": "integer",
            "format": "int32"
          },
          "logoutRequestLifeTime": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "overridePendingAuthnRequest": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "publicCertificate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "signAuthnRequest": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "signLogoutRequest": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "signLogoutResponse": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "singleLogoutServiceResponseUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "singleLogoutServiceUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "ssoServiceBinding": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "ssoServiceUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "usernameAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "wantAssertionEncrypted": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "wantAssertionOrResponseSigned": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "wantAssertionSigned": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "wantLogoutRequestSigned": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "wantLogoutResponseSigned": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "wantSAMLResponseSigned": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationRpcModel": {
        "description": "RPC Configuration",
        "properties": {
          "checkOutIntervalDays": {
            "description": "Check Out Interval Days",
            "type": "integer",
            "format": "int32"
          },
          "checkOutIntervalHours": {
            "description": "Check Out Interval Hours",
            "type": "integer",
            "format": "int32"
          },
          "checkOutIntervalMinutes": {
            "description": "Check Out Interval Minutes",
            "type": "integer",
            "format": "int32"
          },
          "daysToKeepLogs": {
            "description": "How many days to keep the operational logs",
            "type": "integer",
            "format": "int32"
          },
          "enableHeartbeat": {
            "description": "Whether or not heartbeat is enabled",
            "type": "boolean"
          },
          "enablePasswordChangeOnCheckIn": {
            "description": "Whether or not to allow changing the password when a Secret is checked in",
            "type": "boolean"
          },
          "enableRpc": {
            "description": "Whether or not RPC is enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationRpcPatchArgs": {
        "description": "ConfigurationRpcPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationRpcPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationRpcPatchModel": {
        "description": "Data",
        "properties": {
          "checkOutIntervalDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "checkOutIntervalHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "checkOutIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "daysToKeepLogs": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableHeartbeat": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enablePasswordChangeOnCheckIn": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableRpc": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSessionRecordingAdvancedModel": {
        "description": "Session Recording Advanced Configuration",
        "properties": {
          "agentCallbackUrl": {
            "description": "Agent Callback URL",
            "type": "string"
          },
          "enableAdvancedSessionRecording": {
            "description": "Whether or not Avanced Session Recording is enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSessionRecordingAdvancedPatchArgs": {
        "description": "ConfigurationSessionRecordingAdvancedPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationSessionRecordingAdvancedPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationSessionRecordingAdvancedPatchModel": {
        "description": "Update session recording advanced configuration",
        "properties": {
          "agentCallbackUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "enableAdvancedSessionRecording": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "SiteConnectorsSummaryModel": {
        "description": "SiteConnectorsSummaryModel[]",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "siteConnectorId": {
            "description": "SiteConnectorId",
            "type": "integer",
            "format": "int32"
          },
          "siteConnectorName": {
            "description": "SiteConnectorName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationInternalSiteConnectorModel": {
        "description": "Internal Site Connector Settings",
        "properties": {
          "siteConnectorId": {
            "description": "Site connector that is used internally by Secret Server",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationInternalSiteConnectorPatchArgs": {
        "description": "ConfigurationInternalSiteConnectorPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationInternalSiteConnectorPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationInternalSiteConnectorPatchModel": {
        "description": "Internal Site Connector Settings",
        "properties": {
          "siteConnectorId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "UnlimitedAdminUpdateArgs": {
        "description": "UnlimitedAdminUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UnlimitedAdminUpdateModel"
          }
        },
        "type": "object"
      },
      "UnlimitedAdminUpdateModel": {
        "description": "Unlimited Admin Update Model",
        "properties": {
          "enabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "notes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "SearchIndexerModel": {
        "description": "Configuration for Secret search indexer",
        "properties": {
          "daysToKeepLogs": {
            "description": "How many days to keep the logs for the search indexer",
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "description": "Whether or not the search indexer is enabled",
            "type": "boolean"
          },
          "indexingSeparators": {
            "description": "Characters that split keys to be indexed",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "indexMode": {
            "$ref": "#/components/schemas/SearchIndexMode"
          },
          "indexPercentComplete": {
            "description": "The percent of the index that is built",
            "type": "number",
            "format": "float"
          },
          "lastIndexDate": {
            "description": "The time of the last indexing",
            "type": "string",
            "format": "date-time"
          },
          "logAvailable": {
            "description": "Whether or not a log is available for the Secret Search Indexer",
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/SearchIndexStatus"
          }
        },
        "type": "object"
      },
      "SearchIndexMode": {
        "description": "The index mode: standard or extended",
        "properties": {},
        "type": "string",
        "enum": [
          "Standard",
          "Extended"
        ]
      },
      "SearchIndexStatus": {
        "description": "The current status of the search secret indexer",
        "properties": {},
        "type": "string",
        "enum": [
          "NotStarted",
          "Idle",
          "Indexing"
        ]
      },
      "SearchIndexerUpdateArgs": {
        "description": "SearchIndexerUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SearchIndexerUpdateModel"
          }
        },
        "type": "object"
      },
      "SearchIndexerUpdateModel": {
        "description": "Data",
        "properties": {
          "daysToKeepLogs": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "indexingSeparators": {
            "$ref": "#/components/schemas/UpdateFieldValueOfStringArray"
          },
          "indexMode": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSearchIndexMode"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSearchIndexMode": {
        "description": "The index mode: standard or extended",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SearchIndexMode"
          }
        },
        "type": "object"
      },
      "PlatformConfigurationModel": {
        "description": "Platform Configuration",
        "properties": {
          "createGroupsDuringSynchronization": {
            "description": "Whether groups will be created during the Platform synchronization process.",
            "type": "boolean"
          },
          "enableSynchronization": {
            "description": "Whether synchronization with Platform is enabled.",
            "type": "boolean"
          },
          "openIdConnectClientId": {
            "description": "The client ID for the OpenID Connect registered application.",
            "type": "string"
          },
          "openIdConnectClientSecret": {
            "description": "The client secret for the OpenID Connect registered application.",
            "type": "string"
          },
          "openIdConnectEnabled": {
            "description": "Whether Platform integration is enabled.",
            "type": "boolean"
          },
          "openIdConnectLoginUrl": {
            "description": "The login URL for the OpenID Connect provider.",
            "type": "string"
          },
          "openIdConnectLogoutUrl": {
            "description": "The logout URL for the OpenID Connect provider.",
            "type": "string"
          },
          "openIdConnectReplyUrl": {
            "description": "The reply URL that needs to be registered with the OpenID Connect provider.",
            "type": "string"
          },
          "synchronizationIntervalDays": {
            "description": "Synchronize days interval for users and group membership",
            "type": "integer",
            "format": "int32"
          },
          "synchronizationIntervalHours": {
            "description": "Synchronize hours interval for users and group membership",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PlatformConfigurationArgs": {
        "description": "PlatformConfigurationArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PlatformConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "PlatformConfigurationUpdateModel": {
        "description": "Data",
        "properties": {
          "createGroupsDuringSynchronization": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableSynchronization": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "openIdConnectClientId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "openIdConnectClientSecret": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "openIdConnectEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "openIdConnectLoginUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "openIdConnectLogoutUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "profileName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "synchronizationIntervalDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "synchronizationIntervalHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "PagingOfPlatformConfigurationAuditViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/PlatformConfigurationAuditViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PlatformConfigurationAuditViewModel": {
        "description": "Platform Configuration Audit",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "date": {
            "description": "Date",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutoExportConfigurationModel": {
        "description": "Automatic Export Configuration",
        "properties": {
          "enableAutoExport": {
            "description": "Whether automatic export is enabled.",
            "type": "boolean"
          },
          "exportChildFolders": {
            "description": "Whether child folders are included in the export.",
            "type": "boolean"
          },
          "exportFolderPaths": {
            "description": "Whether folder paths are included in the export.",
            "type": "boolean"
          },
          "exportPasswordSecretId": {
            "description": "The ID of the Secret whose value is used to password protect exported data.",
            "type": "integer",
            "format": "int32"
          },
          "exportPath": {
            "description": "Where the exported file is stored if on-prem.",
            "type": "string"
          },
          "exportTotpSettings": {
            "description": "Whether TOTP settings are included in the export.",
            "type": "boolean"
          },
          "folderId": {
            "description": "Which folder to automatically export, if none provided then all are exported.",
            "type": "integer",
            "format": "int32"
          },
          "frequencyDays": {
            "description": "How many days between each automatic export.",
            "type": "integer",
            "format": "int32"
          },
          "lastExported": {
            "description": "The last time the automatic export ran.",
            "type": "string",
            "format": "date-time"
          },
          "userId": {
            "description": "The user the export will be run as.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AutoExportConfigurationArgs": {
        "description": "AutoExportConfigurationArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AutoExportConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "AutoExportConfigurationUpdateModel": {
        "description": "Data",
        "properties": {
          "enableAutoExport": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "exportChildFolders": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "exportFolderPaths": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "exportPasswordSecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "exportPath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "exportTotpSettings": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "folderId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "frequencyDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "PagingOfAutoExportConfigurationAuditViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/AutoExportConfigurationAuditViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AutoExportConfigurationAuditViewModel": {
        "description": "Automatic Export Configuration Audit",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "date": {
            "description": "Date",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfAutoExportLogViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/AutoExportLogViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AutoExportLogViewModel": {
        "description": "Automatic Export Log",
        "properties": {
          "exportDate": {
            "description": "ExportDate",
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfAutoExportStorageItemViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/AutoExportStorageItemViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AutoExportStorageItemViewModel": {
        "description": "Details for an item in automatic export storage.",
        "properties": {
          "autoExportConfigurationId": {
            "description": "The ID for the configuration this item used.",
            "type": "integer",
            "format": "int32"
          },
          "canDownload": {
            "description": "Whether the user can download this item.",
            "type": "boolean"
          },
          "filename": {
            "description": "The name of the file stored.",
            "type": "string"
          },
          "id": {
            "description": "The ID for this item in storage.",
            "type": "integer",
            "format": "int32"
          },
          "storageDate": {
            "description": "The date and time this item was stored.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "StreamContent": {
        "description": "StreamContent",
        "properties": {
          "headers": {
            "$ref": "#/components/schemas/HttpContentHeaders"
          }
        },
        "type": "object"
      },
      "HttpContentHeaders": {
        "description": "Headers",
        "properties": {
          "allow": {
            "description": "Allow",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentDisposition": {
            "$ref": "#/components/schemas/ContentDispositionHeaderValue"
          },
          "contentEncoding": {
            "description": "ContentEncoding",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentLanguage": {
            "description": "ContentLanguage",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "contentLength": {
            "description": "ContentLength",
            "type": "integer",
            "format": "int64"
          },
          "contentLocation": {
            "$ref": "#/components/schemas/Uri"
          },
          "contentMD5": {
            "description": "ContentMD5",
            "type": "string",
            "format": "binary"
          },
          "contentRange": {
            "$ref": "#/components/schemas/ContentRangeHeaderValue"
          },
          "contentType": {
            "$ref": "#/components/schemas/MediaTypeHeaderValue"
          },
          "expires": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "lastModified": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          }
        },
        "type": "object"
      },
      "ContentDispositionHeaderValue": {
        "description": "ContentDisposition",
        "properties": {
          "creationDate": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "dispositionType": {
            "description": "DispositionType",
            "type": "string"
          },
          "fileName": {
            "description": "FileName",
            "type": "string"
          },
          "fileNameStar": {
            "description": "FileNameStar",
            "type": "string"
          },
          "modificationDate": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "parameters": {
            "description": "Parameters",
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            },
            "type": "array"
          },
          "readDate": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "size": {
            "description": "Size",
            "type": "integer",
            "format": "int64"
          }
        },
        "type": "object"
      },
      "OptionalDateTimeOffset": {
        "description": "CreationDate",
        "properties": {
          "date": {
            "description": "Date",
            "type": "string",
            "format": "date-time"
          },
          "dateTime": {
            "description": "DateTime",
            "type": "string",
            "format": "date-time"
          },
          "day": {
            "description": "Day",
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "dayOfYear": {
            "description": "DayOfYear",
            "type": "integer",
            "format": "int32"
          },
          "hour": {
            "description": "Hour",
            "type": "integer",
            "format": "int32"
          },
          "localDateTime": {
            "description": "LocalDateTime",
            "type": "string",
            "format": "date-time"
          },
          "millisecond": {
            "description": "Millisecond",
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "description": "Minute",
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "description": "Month",
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "description": "Offset",
            "type": "string",
            "format": "time-span"
          },
          "second": {
            "description": "Second",
            "type": "integer",
            "format": "int32"
          },
          "ticks": {
            "description": "Ticks",
            "type": "integer",
            "format": "int64"
          },
          "timeOfDay": {
            "description": "TimeOfDay",
            "type": "string",
            "format": "time-span"
          },
          "utcDateTime": {
            "description": "UtcDateTime",
            "type": "string",
            "format": "date-time"
          },
          "utcTicks": {
            "description": "UtcTicks",
            "type": "integer",
            "format": "int64"
          },
          "year": {
            "description": "Year",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DayOfWeek": {
        "description": "DayOfWeek",
        "properties": {},
        "type": "string",
        "enum": [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ]
      },
      "NameValueHeaderValue": {
        "description": "Parameters",
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Uri": {
        "description": "ContentLocation",
        "properties": {
          "absolutePath": {
            "description": "AbsolutePath",
            "type": "string"
          },
          "absoluteUri": {
            "description": "AbsoluteUri",
            "type": "string"
          },
          "authority": {
            "description": "Authority",
            "type": "string"
          },
          "dnsSafeHost": {
            "description": "DnsSafeHost",
            "type": "string"
          },
          "fragment": {
            "description": "Fragment",
            "type": "string"
          },
          "host": {
            "description": "Host",
            "type": "string"
          },
          "hostNameType": {
            "$ref": "#/components/schemas/UriHostNameType"
          },
          "idnHost": {
            "description": "IdnHost",
            "type": "string"
          },
          "isAbsoluteUri": {
            "description": "IsAbsoluteUri",
            "type": "boolean"
          },
          "isDefaultPort": {
            "description": "IsDefaultPort",
            "type": "boolean"
          },
          "isFile": {
            "description": "IsFile",
            "type": "boolean"
          },
          "isLoopback": {
            "description": "IsLoopback",
            "type": "boolean"
          },
          "isUnc": {
            "description": "IsUnc",
            "type": "boolean"
          },
          "localPath": {
            "description": "LocalPath",
            "type": "string"
          },
          "originalString": {
            "description": "OriginalString",
            "type": "string"
          },
          "pathAndQuery": {
            "description": "PathAndQuery",
            "type": "string"
          },
          "port": {
            "description": "Port",
            "type": "integer",
            "format": "int32"
          },
          "query": {
            "description": "Query",
            "type": "string"
          },
          "scheme": {
            "description": "Scheme",
            "type": "string"
          },
          "segments": {
            "description": "Segments",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userEscaped": {
            "description": "UserEscaped",
            "type": "boolean"
          },
          "userInfo": {
            "description": "UserInfo",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UriHostNameType": {
        "description": "HostNameType",
        "properties": {},
        "type": "string",
        "enum": [
          "Unknown",
          "Basic",
          "Dns",
          "IPv4",
          "IPv6"
        ]
      },
      "ContentRangeHeaderValue": {
        "description": "ContentRange",
        "properties": {
          "from": {
            "description": "From",
            "type": "integer",
            "format": "int64"
          },
          "hasLength": {
            "description": "HasLength",
            "type": "boolean"
          },
          "hasRange": {
            "description": "HasRange",
            "type": "boolean"
          },
          "length": {
            "description": "Length",
            "type": "integer",
            "format": "int64"
          },
          "to": {
            "description": "To",
            "type": "integer",
            "format": "int64"
          },
          "unit": {
            "description": "Unit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MediaTypeHeaderValue": {
        "description": "ContentType",
        "properties": {
          "charSet": {
            "description": "CharSet",
            "type": "string"
          },
          "mediaType": {
            "description": "MediaType",
            "type": "string"
          },
          "parameters": {
            "description": "Parameters",
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BackupConfigurationModel": {
        "description": "Database Backup Configuration",
        "properties": {
          "backupDatabasePath": {
            "description": "Where to backup the database",
            "type": "string"
          },
          "backupFailureNotification": {
            "description": "Whether or not to send an email if backup fails",
            "type": "boolean"
          },
          "backupPath": {
            "description": "Where to store the web application backup files",
            "type": "string"
          },
          "backupStartDateTime": {
            "description": "The next time the backup will run",
            "type": "string",
            "format": "date-time"
          },
          "configurationSqlBackupTimeoutMinutes": {
            "description": "SQL Timeout when running the backup",
            "type": "integer",
            "format": "int32"
          },
          "copyOnlyDatabaseBackup": {
            "description": "Backup type",
            "type": "boolean"
          },
          "enableDatabaseBackup": {
            "description": "Whether or not the backup the database",
            "type": "boolean"
          },
          "enableScheduledBackup": {
            "description": "Is the backup enabled",
            "type": "boolean"
          },
          "enableTmsBackup": {
            "description": "Whether or not the TMS web files are backed up",
            "type": "boolean"
          },
          "enableWebApplicationBackup": {
            "description": "Whether or not the web application is set to backup",
            "type": "boolean"
          },
          "numberOfBackupsToKeep": {
            "description": "How many backups should be kept (deletes oldest)",
            "type": "integer",
            "format": "int32"
          },
          "repeatDays": {
            "description": "How many days between backups",
            "type": "integer",
            "format": "int32"
          },
          "repeatHours": {
            "description": "How many hours between backups",
            "type": "integer",
            "format": "int32"
          },
          "repeatMinutes": {
            "description": "How many minutes between backups",
            "type": "integer",
            "format": "int32"
          },
          "tmsInstallationPath": {
            "description": "Where TMS is installed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BackupConfigurationArgs": {
        "description": "BackupConfigurationArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BackupConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "BackupConfigurationUpdateModel": {
        "description": "Data",
        "properties": {
          "backupDatabasePath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "backupFailureNotification": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "backupPath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "backupStartDateTime": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDateTime"
          },
          "configurationSqlBackupTimeoutMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "copyOnlyDatabaseBackup": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableDatabaseBackup": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableScheduledBackup": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableTmsBackup": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableWebApplicationBackup": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "numberOfBackupsToKeep": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "repeatDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "repeatHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "repeatMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "tmsInstallationPath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfDateTime": {
        "description": "BackupStartDateTime",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "IPagingOfBackupLogViewModel": {
        "description": "IPagingOfBackupLogViewModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/BackupLogViewModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BackupLogViewModel": {
        "description": "Database Backup Log",
        "properties": {
          "backupTime": {
            "description": "BackupTime",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SystemLogConfigurationViewModel": {
        "description": "System Log Configuration View Model",
        "properties": {
          "allowViewingOnline": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "enableSystemLog": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "maxLogLength": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "notifyWhenShrunk": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfBoolean": {
        "description": "When enabled, the log will be able to be viewed online",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfOptionalInt32": {
        "description": "Maximum number of messages to keep in log. When null, it is unlimited",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SystemLogConfigurationUpdateArgs": {
        "description": "SystemLogConfigurationUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SystemLogConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "SystemLogConfigurationUpdateModel": {
        "description": "System Log Configuration Update Model",
        "properties": {
          "allowViewingOnline": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableSystemLog": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "maxLogLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "notifyWhenShrunk": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "PublicSshKeyConfigurationViewModel": {
        "description": "User public ssh keys expiration",
        "properties": {
          "enabled": {
            "description": "User Public SSH Key Authentication is enabled",
            "type": "boolean"
          },
          "expirationMessage": {
            "description": "Expiration Message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationTicketSystemViewModel": {
        "description": "Ticket System Configuration",
        "properties": {
          "ticketSystemList": {
            "description": "List of Ticket Systems",
            "items": {
              "$ref": "#/components/schemas/TicketSystemViewModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TicketSystemViewModel": {
        "description": "List of Ticket Systems",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "addCommentsToTicket": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "bmcChangeManagementCommentWorkType": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBmcChangeManagementCommentWorkType"
          },
          "bmcIncidentManagementCommentWorkType": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBmcIncidentManagementCommentWorkType"
          },
          "bmcRemedyAuthentication": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "bmcRemedyUrlEndpoint": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "description": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "displayMessage": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "forceRequireTicketNumber": {
            "$ref": "#/components/schemas/ViewFieldValueOfForceRequireTicketSystemOptions"
          },
          "isDefault": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "name": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "organizationId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "powerShellAddCommentScriptArguments": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "powerShellAddCommentScriptId": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "powerShellAddTicketCommentScriptArguments": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "powerShellAddTicketCommentScriptId": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "powerShellRunAsAccountSecretId": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "powerShellTicketStatusScriptArguments": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "powerShellTicketStatusScriptId": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "serviceNowAllowedStatuses": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "serviceNowDomainName": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "siteId": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "systemCredentialSecretId": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "ticketNumberErrorMessage": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "ticketNumberValidation": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "ticketSystemId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "ticketSystemType": {
            "$ref": "#/components/schemas/ViewFieldValueOfTicketSystemTypes"
          },
          "viewTicketURL": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfOptionalBmcChangeManagementCommentWorkType": {
        "description": "BmcChangeManagementCommentWorkType",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfOptionalBmcIncidentManagementCommentWorkType": {
        "description": "BmcIncidentManagementCommentWorkType",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfForceRequireTicketSystemOptions": {
        "description": "ForceRequireTicketNumber",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ForceRequireTicketSystemOptions"
          }
        },
        "type": "object"
      },
      "ForceRequireTicketSystemOptions": {
        "description": "Value",
        "properties": {},
        "type": "string",
        "enum": [
          "ReasonOnlyRequired",
          "BothRequired",
          "TicketNumberOrReasonRequired",
          "TicketNumberOnlyRequired"
        ]
      },
      "ViewFieldValueOfInt32": {
        "description": "OrganizationId",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfTicketSystemTypes": {
        "description": "TicketSystemType",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/TicketSystemTypes"
          }
        },
        "type": "object"
      },
      "TicketSystemTypes": {
        "description": "Value",
        "properties": {},
        "type": "string",
        "enum": [
          "TicketNumberValidation",
          "BmcRemedyIncidentManagement",
          "BmcRemedyChangeManagement",
          "PowerShell",
          "ServiceNowChangeManagement",
          "ServiceNowIncidentManagement"
        ]
      },
      "ConfigurationTicketSystemArgs": {
        "description": "ConfigurationTicketSystemArgs",
        "properties": {
          "data": {
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/TicketSystemPatchModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TicketSystemPatchModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "addCommentsToTicket": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "bmcChangeManagementCommentWorkType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBmcChangeManagementCommentWorkType"
          },
          "bmcIncidentManagementCommentWorkType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBmcIncidentManagementCommentWorkType"
          },
          "bmcRemedyAuthentication": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "bmcRemedyUrlEndpoint": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "displayMessage": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "forceRequireTicketNumber": {
            "$ref": "#/components/schemas/UpdateFieldValueOfForceRequireTicketSystemOptions"
          },
          "isDefault": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "powerShellAddCommentScriptArguments": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "powerShellAddCommentScriptId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "powerShellAddTicketCommentScriptArguments": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "powerShellAddTicketCommentScriptId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "powerShellRunAsAccountSecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "powerShellTicketStatusScriptArguments": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "powerShellTicketStatusScriptId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "serviceNowAllowedStatuses": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "serviceNowDomainName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "siteId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "systemCredentialSecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "ticketNumberErrorMessage": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "ticketNumberValidation": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "ticketSystemId": {
            "description": "TicketSystemId",
            "type": "integer",
            "format": "int32"
          },
          "ticketSystemType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfTicketSystemTypes"
          },
          "viewTicketUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalBmcChangeManagementCommentWorkType": {
        "description": "BMC Remedy Change Management integration only.  Select work type for comments added.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalBmcIncidentManagementCommentWorkType": {
        "description": "BMC Remedy Incident Management integration only.  Select work type for comments added.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfForceRequireTicketSystemOptions": {
        "description": "Ticket System Comment and/or Number Requirement",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/ForceRequireTicketSystemOptions"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfTicketSystemTypes": {
        "description": "Ticket System Type",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/TicketSystemTypes"
          }
        },
        "type": "object"
      },
      "ConfigurationDatabaseModel": {
        "description": "Database Configuration",
        "properties": {
          "applicationPoolIdentity": {
            "description": "The current application pool identity.",
            "type": "string"
          },
          "authenticationType": {
            "$ref": "#/components/schemas/SqlAuthenticationType"
          },
          "connectionTimeout": {
            "description": "The network connection timeout for connecting to SQL Server (not for query execution timeouts).",
            "type": "integer",
            "format": "int32"
          },
          "databaseConfigFilePath": {
            "description": "The database configuration file path on the current server.",
            "type": "string"
          },
          "databaseName": {
            "description": "The database name.",
            "type": "string"
          },
          "enableMultiSubnetFailover": {
            "description": "When true Multi-Subnet Failover is configured.",
            "type": "boolean"
          },
          "enableSslEncryption": {
            "description": "When true ssl encryption will be enabled when communicating with sql server.",
            "type": "boolean"
          },
          "failoverPartner": {
            "description": "The current failover partner.",
            "type": "string"
          },
          "hasDiskWritePermissions": {
            "description": "When true the application pool account has disk write permissions.",
            "type": "boolean"
          },
          "isTmsInstalled": {
            "description": "When true the TMS / Privilege manager database exists.",
            "type": "boolean"
          },
          "serverName": {
            "description": "The sql server name.",
            "type": "string"
          },
          "trustServerCertificate": {
            "description": "When true the sql server ssl certificate will be trusted without validating the certificate chain.",
            "type": "boolean"
          },
          "userName": {
            "description": "The username when using sql authentication.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SqlAuthenticationType": {
        "description": "The type of authentication method used for connecting to the sql server.",
        "properties": {},
        "type": "string",
        "enum": [
          "WindowsAuth",
          "SqlAuth",
          "AADIntegrated",
          "AADSqlAuth"
        ]
      },
      "ConfigurationDatabasePatchArgs": {
        "description": "ConfigurationDatabasePatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationDatabasePatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationDatabasePatchModel": {
        "description": "Database Configuration",
        "properties": {
          "authenticationType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSqlAuthenticationType"
          },
          "connectionTimeout": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "databaseName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "enableMultiSubnetFailover": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "enableSslEncryption": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "failoverPartner": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "fileOverridePassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "fileOverrideUserName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "password": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "serverName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "trustServerCertificate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "userName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSqlAuthenticationType": {
        "description": "The type of authentication method used for connecting to the sql server.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SqlAuthenticationType"
          }
        },
        "type": "object"
      },
      "ConfigurationReadOnlyModeModel": {
        "description": "Read Only Mode Configuration",
        "properties": {
          "enabled": {
            "description": "Whether read only mode is enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationReadOnlyModeArgs": {
        "description": "ConfigurationReadOnlyModeArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationReadOnlyModeUpdateModel"
          }
        },
        "type": "object"
      },
      "ConfigurationReadOnlyModeUpdateModel": {
        "description": "Data",
        "properties": {
          "enabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "RotateSecretKeysStatusModel": {
        "description": "Rotate Secret Keys Status",
        "properties": {
          "lastRequestDate": {
            "description": "Date of the last time Rotate Secret Keys was requested. Null if never run.",
            "type": "string",
            "format": "date-time"
          },
          "lastRunDate": {
            "description": "Date of the last time Rotate Secret Keys was executed. Null if never run.",
            "type": "string",
            "format": "date-time"
          },
          "lastStatus": {
            "description": "Status of the last time Rotate Secret Keys was executed.",
            "type": "string"
          },
          "message": {
            "description": "Message about the last time Rotate Secret Keys was executed.",
            "type": "string"
          },
          "progressStatus": {
            "$ref": "#/components/schemas/RotateSecretKeysProgressModel"
          }
        },
        "type": "object"
      },
      "RotateSecretKeysProgressModel": {
        "description": "Rotate Secret Keys Progress",
        "properties": {
          "isCancelling": {
            "description": "Flag indicating if the request is being cancelled.",
            "type": "boolean"
          },
          "message": {
            "description": "Message displayed during processing.",
            "type": "string"
          },
          "secretsProcessed": {
            "description": "Number of Secrets processed thus far in the run.",
            "type": "integer",
            "format": "int32"
          },
          "totalSecretsToProcess": {
            "description": "Total number of secrets to process in the run.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationGeneralPatchArgs": {
        "description": "ConfigurationGeneralPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationGeneralUpdateModel"
          }
        },
        "type": "object"
      },
      "ConfigurationGeneralUpdateModel": {
        "description": "Update configuration, only need to send sections that should be updated",
        "properties": {
          "folders": {
            "$ref": "#/components/schemas/ConfigurationFoldersUpdateModel"
          },
          "permissionOptions": {
            "$ref": "#/components/schemas/ConfigurationPermissionOptionsUpdateModel"
          },
          "userExperience": {
            "$ref": "#/components/schemas/ConfigurationUserExperienceUpdateModel"
          }
        },
        "type": "object"
      },
      "ConfigurationFoldersUpdateModel": {
        "description": "Update folder configuration",
        "properties": {
          "enablePersonalFolders": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "personalFolderName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "personalFolderNameOption": {
            "$ref": "#/components/schemas/UpdateFieldValueOfPersonalFolderNameOptionType"
          },
          "personalFolderWarning": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "requireViewFolderPermission": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "showPersonalFolderWarning": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfPersonalFolderNameOptionType": {
        "description": "The format for the personal folder name for each user",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/PersonalFolderNameOptionType"
          }
        },
        "type": "object"
      },
      "ConfigurationPermissionOptionsUpdateModel": {
        "description": "Configuration Permission Options",
        "properties": {
          "allowDuplicateSecretNames": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "allowViewUserToRetrieveAutoChangeNextPassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "defaultSecretPermissions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDefaultSecretPermissionsType"
          },
          "enableApprovalFromEmail": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "forceSecretApproval": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalForceSecretApprovalType"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfDefaultSecretPermissionsType": {
        "description": "When a new Secret is created these permissions will be assigned",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/DefaultSecretPermissionsType"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalForceSecretApprovalType": {
        "description": "Force approval type on Secrets that have approval",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationUserExperienceUpdateModel": {
        "description": "Configuration User Experience",
        "properties": {
          "applicationLanguage": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "defaultDateFormat": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "defaultNewUserRoleId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "defaultTimeFormat": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "forceInactivityTimeout": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "forceInactivityTimeoutMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "requireFolderForSecret": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "secretPasswordHistoryRestrictionAll": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "secretPasswordHistoryRestrictionCount": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "secretViewIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "serverTimeZoneId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "uiInactivitySleepMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "ConfigurationGeneralModel": {
        "description": "Configuration General",
        "properties": {
          "applicationSettings": {
            "$ref": "#/components/schemas/ConfigurationApplicationSettingsModel"
          },
          "email": {
            "$ref": "#/components/schemas/ConfigurationEmailModel"
          },
          "folders": {
            "$ref": "#/components/schemas/ConfigurationFoldersModel"
          },
          "launcherSettings": {
            "$ref": "#/components/schemas/ConfigurationLauncherSettingsModel"
          },
          "localUserPasswords": {
            "$ref": "#/components/schemas/ConfigurationLocalUserPasswordsModel"
          },
          "login": {
            "$ref": "#/components/schemas/ConfigurationLoginModel"
          },
          "permissionOptions": {
            "$ref": "#/components/schemas/ConfigurationPermissionOptionsModel"
          },
          "protocolHandlerSettings": {
            "$ref": "#/components/schemas/ConfigurationProtocolHandlerSettingsModel"
          },
          "security": {
            "$ref": "#/components/schemas/ConfigurationSecurityModel"
          },
          "sessionRecording": {
            "$ref": "#/components/schemas/ConfigurationSessionRecordingModel"
          },
          "unlimitedAdmin": {
            "$ref": "#/components/schemas/UnlimitedAdminModel"
          },
          "userExperience": {
            "$ref": "#/components/schemas/ConfigurationUserExperienceModel"
          },
          "userInterface": {
            "$ref": "#/components/schemas/ConfigurationUserInterfaceModel"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginModel": {
        "description": "Login Configuration",
        "properties": {
          "allowAutoComplete": {
            "description": "Deprecated: AutoComplete is a feature provided by most web browsers to automatically remember and prefill forms for you.  This can be a great security concern since they typically do not save the data in a secure manner.  You can enable or disable web browser prefill on the Login screen by using this option. Will always return true.",
            "type": "boolean"
          },
          "allowRememberMe": {
            "description": "This option enables the \"Remember Me\" checkbox on the login screen.  When a user chooses to use \"Remember Me\", an encrypted cookie will be set in their browser.  This will enable the user to revisit Secret Server without the need to log in.  This cookie will no longer be valid when the \"Remember Me\" period has expired and they will have to log in again",
            "type": "boolean"
          },
          "cacheADCredentials": {
            "description": "Allows cached credentials to be used when Distributed Engine is unable to connect to Active Directory",
            "type": "boolean"
          },
          "defaultLoginDomain": {
            "description": "Default Login Domain",
            "type": "string"
          },
          "enableDomainSelector": {
            "description": "Display the domain selector at login",
            "type": "integer",
            "format": "int32"
          },
          "enableLoginFailureCAPTCHA": {
            "description": "When this option is checked, the user will only have to complete a CAPTCHA if their login credentials are entered incorrectly a certain number of times",
            "type": "boolean"
          },
          "maxConcurrentLoginsPerUser": {
            "description": "Maximum concurrent logins per user",
            "type": "integer",
            "format": "int32"
          },
          "maximumLoginFailures": {
            "description": "Set the number of login attempts allowed before a user is locked out of their account.  Once locked out, they will need a Secret Server administrator to reset their password and enable their account",
            "type": "integer",
            "format": "int32"
          },
          "maxLoginFailuresBeforeCAPTCHA": {
            "description": "Maximum Login Failures Before CAPTCHA",
            "type": "integer",
            "format": "int32"
          },
          "rememberMeTimeOutMinutes": {
            "description": "The number of minutes that you will be remembered",
            "type": "integer",
            "format": "int32"
          },
          "sshKeyIntegration": {
            "$ref": "#/components/schemas/ConfigurationLoginSshKeyIntegrationModel"
          },
          "twoFactor": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorModel"
          },
          "userLockoutTimeMinutes": {
            "description": "Number of minutes a User will be locked out for",
            "type": "integer",
            "format": "int32"
          },
          "visualEncryptedKeyboardEnabled": {
            "description": "Enable the Visual Keyboard for logins",
            "type": "boolean"
          },
          "visualEncryptedKeyboardRequired": {
            "description": "Require the Visual Keyboard for logins",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlIdentityProviderCreateArgs": {
        "description": "ConfigurationSamlIdentityProviderCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderCreateModel"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlIdentityProviderCreateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "description": "Active status of the Identity Provider. Users can only log-in via an active Identity Provider.",
            "type": "boolean"
          },
          "authnContext": {
            "description": "When specified, instructs the IDP on how to authenticate the user(optional).",
            "type": "string"
          },
          "clockSkew": {
            "description": "The allowed number of minutes of difference between Secret Server's clock and the IDP's clock.  The default is 3 minutes.",
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "description": "Description of the Identity Provider.",
            "type": "string"
          },
          "disableAssertionReplayCheck": {
            "description": "When true, SAML messages that were already received from this IDP will be allowed by Secret Server.  Otherwise, resending messages from the IDP will trigger an error.",
            "type": "boolean"
          },
          "disableAudienceRestrictionCheck": {
            "description": "A SAML assertion may include an audience restriction URI. This identifies the intended recipient of the SAML assertion. If included it should match the service provider's name.  When this setting is true, this check is skipped.",
            "type": "boolean"
          },
          "disableAuthnContextCheck": {
            "description": "Disables the authentication context check, which validates that the real authentication method matches the ExpectedAuthnContext method.",
            "type": "boolean"
          },
          "disableDestinationCheck": {
            "description": "When true, the destination URI in the SAML response will not be validated.",
            "type": "boolean"
          },
          "disableInboundLogout": {
            "description": "When true, logout requests coming from this IDP are ignored.",
            "type": "boolean"
          },
          "disableInResponseToCheck": {
            "description": "When true, the InResponseTo attribute in SAML messages is not checked.",
            "type": "boolean"
          },
          "disablePendingLogoutCheck": {
            "description": "When true, a SAML logout response will be considered legitimate even if there was no corresponding logout request.",
            "type": "boolean"
          },
          "disableRecipientCheck": {
            "description": "When true, the built-in check against the AssertionConsumerService URL will be skipped.",
            "type": "boolean"
          },
          "disableTimePeriodCheck": {
            "description": "When true, a SAML response is valid regardless of when it was sent.",
            "type": "boolean"
          },
          "displayName": {
            "description": "The Display Name for the Identity Provider.",
            "type": "string"
          },
          "domainAttribute": {
            "description": "Optional AttributeName to use for matching a Secret Server user's domain.",
            "type": "string"
          },
          "enableDetailedLog": {
            "description": "When true, a more detailed log will be generated for SAML logins and logouts.",
            "type": "boolean"
          },
          "enableSLO": {
            "description": "When true, logging out of Secret Server will log the user out of this Identity Provider.",
            "type": "boolean"
          },
          "forceAuthentication": {
            "description": "When true, the Identity Provider will be instructed to re-authenticate the user, even if they are already authenticated.",
            "type": "boolean"
          },
          "logoutRequestLifeTime": {
            "description": "The logout request life time.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name of the Identity Provider.",
            "type": "string"
          },
          "overridePendingAuthnRequest": {
            "description": "When true, an in-progress SP-initiated login may be interrupted by an IDP-initiated login.",
            "type": "boolean"
          },
          "publicCertificate": {
            "description": "The public certificate for the Identity Provider. Base64 encoded",
            "type": "string"
          },
          "signAuthnRequest": {
            "description": "When true, the authentication requests sent to this IDP will be signed.",
            "type": "boolean"
          },
          "signLogoutRequest": {
            "description": "When true, logout requests sent to this IDP will be signed.<",
            "type": "boolean"
          },
          "signLogoutResponse": {
            "description": "When true, logout responses sent to this IDP will be signed.",
            "type": "boolean"
          },
          "singleLogoutServiceResponseUrl": {
            "description": "The URL where Secret Server will send responses to single logout messages.",
            "type": "string"
          },
          "singleLogoutServiceUrl": {
            "description": "The URL to send the single logout message to.",
            "type": "string"
          },
          "ssoServiceBinding": {
            "description": "Method for communicating with the Identity Provider.  HTTPRedirect is recommended in most cases.",
            "type": "integer",
            "format": "int32"
          },
          "ssoServiceUrl": {
            "description": "The URL of the Identity Provider where the user will be sent to authenticate.",
            "type": "string"
          },
          "usernameAttribute": {
            "description": "Optional AttributeName to use for matching a Secret Server user.",
            "type": "string"
          },
          "wantAssertionEncrypted": {
            "description": "When true, Secret Server will expect SAML assertions from this IDP to be encrypted. Unencrypted assertions or assertions that cannot be decrypted will cause an error.",
            "type": "boolean"
          },
          "wantAssertionOrResponseSigned": {
            "description": "When true, Secret Server will expect either SAML assertions or SAML responses from this IDP to be signed. Unsigned assertions/responses and assertions/responses whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          },
          "wantAssertionSigned": {
            "description": "When true, Secret Server will expect SAML assertions from this IDP to be signed. Unsigned assertions or assertions whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          },
          "wantLogoutRequestSigned": {
            "description": "When true, Secret Server will expect logout requests from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          },
          "wantLogoutResponseSigned": {
            "description": "When true, Secret Server will expect logout responses from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          },
          "wantSAMLResponseSigned": {
            "description": "When true, Secret Server will expect SAML responses from this IDP to be signed. Unsigned responses or responses whose signatures cannot be verified will cause an error.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlIdentityProviderPatchArgs": {
        "description": "ConfigurationSamlIdentityProviderPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationSamlIdentityProviderPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationSessionRecordingPatchArgs": {
        "description": "ConfigurationSessionRecordingPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationSessionRecordingPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationSessionRecordingPatchModel": {
        "description": "Update session recording configuration",
        "properties": {
          "archiveLocationBySite": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "archivePath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "archivePathMappings": {
            "$ref": "#/components/schemas/UpdateFieldValueOfConfigurationSessionRecordingSiteArchiveUpdateModelArray"
          },
          "daysUntilArchive": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "daysUntilDelete": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableArchive": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableDelete": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableHardwareAcceleration": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableInactivityTimeout": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableOnDemandVideoProcessing": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableSessionRecording": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "encryptArchive": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "hideRecordingIndicator": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "inactivityTimeoutMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "maxSessionLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "rdpProxyRecordKeyStrokes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "rdpProxyRecordVideo": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "sshProxyRecordKeyStrokes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "sshProxyRecordVideo": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "storeInDatabase": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "useTemporaryArchives": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "videoCodecId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "ConfigurationSessionRecordingSiteArchiveUpdateModel": {
        "description": "Value",
        "properties": {
          "path": {
            "description": "Path",
            "type": "string"
          },
          "siteId": {
            "description": "SiteId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationFoldersPatchArgs": {
        "description": "ConfigurationFoldersPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationFoldersPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationFoldersPatchModel": {
        "description": "Update folder configuration",
        "properties": {
          "enablePersonalFolders": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "personalFolderName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "personalFolderNameOption": {
            "$ref": "#/components/schemas/UpdateFieldValueOfPersonalFolderNameOptionType"
          },
          "personalFolderWarning": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "requireViewFolderPermission": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "showPersonalFolderWarning": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationApplicationSettingsPatchArgs": {
        "description": "ConfigurationApplicationSettingsPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationApplicationSettingsPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationApplicationSettingsPatchModel": {
        "description": "Update application settings configuration",
        "properties": {
          "allowSendTelemetry": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "allowSoftwareUpdateChecks": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "apiRefreshTokensEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "apiSessionTimeoutDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "apiSessionTimeoutHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "apiSessionTimeoutMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "apiSessionTimeoutUnlimited": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "configurationEarlyAdopterEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "customUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "displayDowntimeMessageToAdminsOnly": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableCredSsp": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableSyslogCefLogging": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableWebServices": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "externalInstanceId": {
            "description": "ExternalInstanceId",
            "type": "boolean"
          },
          "maximumTokenRefreshesAllowed": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "maxSecretLogLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "mobileMaxOfflineDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "mobileMaxOfflineHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "obfuscatePersonallyIdentifiableInformation": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "piiObfuscationLevel": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "preventApplicationFromSleeping": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "preventDirectApiAuthentication": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "syslogCefLogSite": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "syslogCefPort": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "syslogCefProtocol": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSyslogCefProtocolType"
          },
          "syslogCefServer": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "syslogCefTimeZone": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSyslogCefTimeZoneType"
          },
          "tmsInstallationPath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "winRmEndpointUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "writeSyslogToEventLog": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSyslogCefProtocolType": {
        "description": "Syslog/CEF Protocol to use when sending logs",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SyslogCefProtocolType"
          }
        },
        "type": "object"
      },
      "SyslogCefProtocolType": {
        "description": "Value",
        "properties": {},
        "type": "string",
        "enum": [
          "UDP",
          "TCP",
          "SECURE_TCP"
        ]
      },
      "UpdateFieldValueOfSyslogCefTimeZoneType": {
        "description": "Time Zone to use when sending Syslog/CEF Protocol log entries",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SyslogCefTimeZoneType"
          }
        },
        "type": "object"
      },
      "SyslogCefTimeZoneType": {
        "description": "Value",
        "properties": {},
        "type": "string",
        "enum": [
          "ServerTime",
          "UtcTime"
        ]
      },
      "ConfigurationPermissionOptionsPatchArgs": {
        "description": "ConfigurationPermissionOptionsPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationPermissionOptionsPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationPermissionOptionsPatchModel": {
        "description": "Update permission options configuration",
        "properties": {
          "allowDuplicateSecretNames": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "allowViewUserToRetrieveAutoChangeNextPassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "defaultSecretPermissions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDefaultSecretPermissionsType"
          },
          "enableApprovalFromEmail": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "forceSecretApproval": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalForceSecretApprovalType"
          }
        },
        "type": "object"
      },
      "ConfigurationLauncherSettingsPatchArgs": {
        "description": "ConfigurationLauncherSettingsPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationLauncherSettingsPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationLauncherSettingsPatchModel": {
        "description": "Update launcher settings configuration",
        "properties": {
          "checkInSecretOnLastLauncherClose": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "closeLauncherOnCheckInSecret": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableDomainDownload": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableDomainUpload": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableLauncher": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableLauncherAutoUpdate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableWebParsing": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "launcherDeploymentType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfLauncherDeploymentType"
          },
          "sendSecretUrlToLauncher": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfLauncherDeploymentType": {
        "description": "Launcher Deployment Type",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/LauncherDeploymentType"
          }
        },
        "type": "object"
      },
      "LauncherDeploymentType": {
        "description": "Value",
        "properties": {},
        "type": "string",
        "enum": [
          "ClickOnce",
          "ProtocolHandler"
        ]
      },
      "ConfigurationProtocolHandlerSettingsPatchArgs": {
        "description": "ConfigurationProtocolHandlerSettingsPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationProtocolHandlerSettingsPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationProtocolHandlerSettingsPatchModel": {
        "description": "Update protocol handler settings configuration",
        "properties": {
          "protocolHandlerInstallTimeAllowedDomains": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "protocolHandlerInstallTimeDisableAutoUpdate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "protocolHandlerInstallTimeSettingsEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationUserExperiencePatchArgs": {
        "description": "ConfigurationUserExperiencePatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationUserExperiencePatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationUserExperiencePatchModel": {
        "description": "Update user experience configuration",
        "properties": {
          "applicationLanguage": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "checkoutNotificationThreshold": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "defaultDateFormat": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "defaultNewUserRoleId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "defaultTimeFormat": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "forceInactivityTimeout": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "forceInactivityTimeoutMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "requireFolderForSecret": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "searchDelayMs": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "secretPasswordHistoryRestrictionAll": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "secretPasswordHistoryRestrictionCount": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "secretViewIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "serverTimeZoneId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "uiInactivitySleepMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "ConfigurationUserInterfacePatchArgs": {
        "description": "ConfigurationUserInterfacePatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationUserInterfacePatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationUserInterfacePatchModel": {
        "description": "Update user interface configuration",
        "properties": {
          "allowUserToSelectTheme": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "customLogoCollapsed": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "customLogoFullSize": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "defaultClassicTheme": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "disableLegacyUi": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "newUiDefault": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationEmailPatchArgs": {
        "description": "ConfigurationEmailPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfigurationEmailPatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationEmailPatchModel": {
        "description": "Update email server configuration",
        "properties": {
          "fromEmailAddress": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "fromEmailName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sendLegacyEmails": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "smtpCheckCertificateRevocation": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "smtpDomain": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "smtpPassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "smtpPort": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "smtpServer": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "smtpUseCredentials": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "smtpUseImplicitSSL": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "smtpUserName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "smtpUseSSL": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationRpcRunNowResultModel": {
        "description": "RPC Run Now Result",
        "properties": {
          "success": {
            "description": "Whether or not the call to Run Now was successful",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationHeartbeatRunNowResultModel": {
        "description": "Heartbeat Run Now Result",
        "properties": {
          "success": {
            "description": "Whether or not the call to Run Now was successful",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TestEmailResponse": {
        "description": "TestEmailResponse",
        "properties": {
          "message": {
            "description": "Message",
            "type": "string"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ClearCachedADCredentialsResultModel": {
        "description": "A result from clearing cached AD credentials",
        "properties": {
          "success": {
            "description": "True is the call succeeded",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TestRadiusLoginArgs": {
        "description": "TestRadiusLoginArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TestRadiusLoginRequestModel"
          }
        },
        "type": "object"
      },
      "TestRadiusLoginRequestModel": {
        "description": "Test Radius Login Request",
        "properties": {
          "radiusPassword": {
            "description": "Password for Radius Login Test",
            "type": "string"
          },
          "radiusUsername": {
            "description": "Username for Radius Login Test",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestRadiusLoginResponseModel": {
        "description": "Test Radius Login Response",
        "properties": {
          "success": {
            "description": "True to indicate success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSamlIdentityProviderImportArgs": {
        "description": "ConfigurationSamlIdentityProviderImportArgs",
        "properties": {
          "importFile": {
            "description": "Uploaded file (used for file attachment fields with \"Content-Type: multipart/form-data\")",
            "type": "file"
          },
          "importFileData": {
            "description": "Binary file data (used for file attachment fields with \"Content-Type: application/json\")",
            "type": "string",
            "format": "binary"
          }
        },
        "type": "object"
      },
      "ConnectionManagerSettingsModel": {
        "description": "Connection Manager Settings",
        "properties": {
          "allowLocalConnections": {
            "description": "Allow Local Connections",
            "type": "boolean"
          },
          "allowSavingCredentials": {
            "description": "Allow Saving Credentials",
            "type": "boolean"
          },
          "downloadUrl": {
            "description": "Download Url",
            "type": "string"
          },
          "hasValidLicense": {
            "description": "Has Valid License",
            "type": "boolean"
          },
          "isTrialLicense": {
            "description": "Is Trial License",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfDevOpsSecretsVaultSyncStatusSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DevOpsSecretsVaultSyncStatusSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultSyncStatusSummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "If the mapping is active.",
            "type": "boolean"
          },
          "dateAdded": {
            "description": "When the Secret will be pushed next.",
            "type": "string",
            "format": "date-time"
          },
          "devOpsSecretVaultPath": {
            "description": "Where to push the Secret to in the Tenant.",
            "type": "string"
          },
          "devOpsSyncMapId": {
            "description": "ID of the mapping between the Tenant and Secret.",
            "type": "integer",
            "format": "int32"
          },
          "lastSyncTime": {
            "description": "When the Secret was last pushed.",
            "type": "string",
            "format": "date-time"
          },
          "secretName": {
            "description": "Name of the Secret.",
            "type": "string"
          },
          "status": {
            "description": "Status of syncing progress.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultSyncStatusModel": {
        "description": "DevOps Secrets Vault Synchronization Status",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "dateAdded": {
            "description": "Date Added",
            "type": "string",
            "format": "date-time"
          },
          "devOpsSecretVaultPath": {
            "description": "DevOps Secrets Vault Path",
            "type": "string"
          },
          "devOpsSyncMapId": {
            "description": "DevOps Synchronization Map Id",
            "type": "integer",
            "format": "int32"
          },
          "lastSyncTime": {
            "description": "Last Sync Time",
            "type": "string",
            "format": "date-time"
          },
          "nextSyncTime": {
            "description": "Next Sync Time",
            "type": "string",
            "format": "date-time"
          },
          "secretId": {
            "description": "Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "Secret Name",
            "type": "string"
          },
          "status": {
            "description": "Status",
            "type": "string"
          },
          "tenantId": {
            "description": "Tenant Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultCreateSyncArgs": {
        "description": "DevOpsSecretsVaultCreateSyncArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevOpsSecretVaultSyncUpdateModel"
          }
        },
        "type": "object"
      },
      "DevOpsSecretVaultSyncUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "dsvTenantId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "fieldNamesPath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfStringArray"
          },
          "secretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultSyncSecretsArgs": {
        "description": "DevOpsSecretsVaultSyncSecretsArgs",
        "properties": {
          "data": {
            "description": "Data",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultSyncStatusViewModel": {
        "description": "DevOpsSecretsVaultSyncStatusViewModel[]",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "dateAdded": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfDateTime"
          },
          "devOpsSecretVaultPath": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "devOpsSyncMapId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfInt32"
          },
          "lastSyncTime": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfOptionalDateTime"
          },
          "nextSyncTime": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfOptionalDateTime"
          },
          "secretId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "secretName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "status": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "tenantId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfDateTime": {
        "description": "When the Secret was originally mapped to the Tenant.",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfInt32": {
        "description": "ID of the mapping between the Tenant and Secret.",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfOptionalDateTime": {
        "description": "When the Secret was last pushed.",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfString": {
        "description": "Name of the Secret.",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfDevOpsSecretsVaultTenantSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DevOpsSecretsVaultTenantSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultTenantSummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "If this Tenant should be pushed to.",
            "type": "boolean"
          },
          "dateAdded": {
            "description": "When the Tenant was added to Secret Server.",
            "type": "string",
            "format": "date-time"
          },
          "dsvTenantId": {
            "description": "Tenant ID.",
            "type": "integer",
            "format": "int32"
          },
          "lastSynced": {
            "description": "The last time the Sync Interval expired.",
            "type": "string",
            "format": "date-time"
          },
          "secretName": {
            "description": "The Secret in which to connect to DSV.",
            "type": "string"
          },
          "syncInterval": {
            "description": "How often to check if secrets need to be pushed to the Tenant.",
            "type": "integer",
            "format": "int32"
          },
          "tenantName": {
            "description": "Tenant Name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultCreateTenantArgs": {
        "description": "DevOpsSecretsVaultCreateTenantArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevOpsSecretsVaultTenantUpdateModel"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultTenantUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "secretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "syncInterval": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "tenantName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultTenantModel": {
        "description": "DevOps Secrets Vault Tenant",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "dateAdded": {
            "description": "Date Added",
            "type": "string",
            "format": "date-time"
          },
          "dsvTenantId": {
            "description": "DSV Tenant Id",
            "type": "integer",
            "format": "int32"
          },
          "lastSynced": {
            "description": "Last Synchronized",
            "type": "string",
            "format": "date-time"
          },
          "secretId": {
            "description": "Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "Secret Name",
            "type": "string"
          },
          "syncInterval": {
            "description": "Synchronization Interval",
            "type": "integer",
            "format": "int32"
          },
          "tenantName": {
            "description": "Tenant Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultUpdateTenantArgs": {
        "description": "DevOpsSecretsVaultUpdateTenantArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DevOpsSecretsVaultTenantUpdateModel"
          }
        },
        "type": "object"
      },
      "PagingOfDevOpsSecretsVaultTenantAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DevOpsSecretsVaultTenantAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DevOpsSecretsVaultTenantAuditSummary": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "What the user did.",
            "type": "string"
          },
          "date": {
            "description": "When the action occurred.",
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "description": "A description of the action.",
            "type": "string"
          },
          "tenantName": {
            "description": "Tenant being audited.",
            "type": "string"
          },
          "userDisplayName": {
            "description": "User that performed the action.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiagnosticsSummary": {
        "description": "Diagnostics summary",
        "properties": {
          "activeDirectorySynchronizationThreadStatus": {
            "description": "Active Directory Synchronization Status",
            "type": "string"
          },
          "backboneClass": {
            "description": "Backbone Class Name",
            "type": "string"
          },
          "backboneType": {
            "description": "Backbone Type",
            "type": "string"
          },
          "hsmCacheMapSize": {
            "description": "HSM Cache Map Size",
            "type": "string"
          },
          "hsmTiming": {
            "description": "HSM Timing",
            "type": "string"
          },
          "isDomainController": {
            "description": "Is Domain Controller",
            "type": "string"
          },
          "lastUpgrade": {
            "description": "Last Upgrade",
            "type": "string"
          },
          "ldapProvider": {
            "description": "LDAP Provider",
            "type": "string"
          },
          "maxDegreeOfParallelism": {
            "description": "Max Degrees Of Parallelism",
            "type": "string"
          },
          "netFxVersion": {
            "description": "Net FX Version",
            "type": "string"
          },
          "operatingSystem": {
            "description": "Operating System",
            "type": "string"
          },
          "operatingSystemArchitecture": {
            "description": "Operating System Architecture",
            "type": "string"
          },
          "physicalMemory": {
            "description": "Physical Memory",
            "type": "string"
          },
          "productVersion": {
            "description": "Product Version",
            "type": "string"
          },
          "proxyConfiguration": {
            "description": "Proxy Configuration",
            "type": "string"
          },
          "readOnlyMode": {
            "description": "Read Only Mode",
            "type": "string"
          },
          "searchIndexerThreadStatus": {
            "description": "Search Indexer Status",
            "type": "string"
          },
          "secretServerUrl": {
            "description": "Secret Server URL",
            "type": "string"
          },
          "serverName": {
            "description": "Server Name",
            "type": "string"
          },
          "serverTime": {
            "description": "Server Time",
            "type": "string"
          },
          "serverTimeZone": {
            "description": "Server TimeZone",
            "type": "string"
          },
          "sqlDatabaseName": {
            "description": "SQL Database Name",
            "type": "string"
          },
          "sqlIsDatabaseReplicated": {
            "description": "SQL Is Database Replicated",
            "type": "string"
          },
          "sqlServerCollation": {
            "description": "SQL Server Collation",
            "type": "string"
          },
          "sqlServerConnectionString": {
            "description": "SQL Server Connection String",
            "type": "string"
          },
          "sqlServerEdition": {
            "description": "SQL Server Edition",
            "type": "string"
          },
          "sqlServerIsPublished": {
            "description": "SQL Server Is Published",
            "type": "string"
          },
          "sqlServerIsReplicationRunning": {
            "description": "SQL Server Is Replication Running",
            "type": "string"
          },
          "sqlServerIsSubscribed": {
            "description": "SQL Server Is Subscribed",
            "type": "string"
          },
          "sqlServerName": {
            "description": "SQL Server Name",
            "type": "string"
          },
          "sqlServerTime": {
            "description": "SQL Server Time",
            "type": "string"
          },
          "sqlServerVersion": {
            "description": "SQL Server Version",
            "type": "string"
          },
          "upgradeAvailable": {
            "description": "Upgrade Available",
            "type": "string"
          },
          "upgradeInProgress": {
            "description": "Upgrade In Progress",
            "type": "string"
          },
          "upTime": {
            "description": "Up Time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ThreadInformation": {
        "description": "ThreadInformation[]",
        "properties": {
          "applicationName": {
            "description": "ApplicationName",
            "type": "string"
          },
          "hostName": {
            "description": "HostName",
            "type": "string"
          },
          "identityName": {
            "description": "IdentityName",
            "type": "string"
          },
          "lastActivity": {
            "description": "LastActivity",
            "type": "string",
            "format": "date-time"
          },
          "managedThreadId": {
            "description": "ManagedThreadId",
            "type": "integer",
            "format": "int32"
          },
          "threadName": {
            "description": "ThreadName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DictionaryOfStringAndString": {
        "description": "DictionaryOfStringAndString",
        "properties": {},
        "type": "object"
      },
      "QuartzTrigger": {
        "description": "QuartzTrigger[]",
        "properties": {
          "jobName": {
            "description": "JobName",
            "type": "string"
          },
          "nextFireTicks": {
            "description": "NextFireTicks",
            "type": "integer",
            "format": "int64"
          },
          "nextFireTime": {
            "description": "NextFireTime",
            "type": "string",
            "format": "date-time"
          },
          "previousFireTicks": {
            "description": "PreviousFireTicks",
            "type": "integer",
            "format": "int64"
          },
          "previousFireTime": {
            "description": "PreviousFireTime",
            "type": "string",
            "format": "date-time"
          },
          "triggerState": {
            "description": "TriggerState",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfDirectoryServicesSynchronizationLogEntry": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DirectoryServicesSynchronizationLogEntry"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DirectoryServicesSynchronizationLogEntry": {
        "description": "Query results",
        "properties": {
          "createdOn": {
            "description": "CreatedOn",
            "type": "string",
            "format": "date-time"
          },
          "machineName": {
            "description": "MachineName",
            "type": "string"
          },
          "text": {
            "description": "Text",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DirectoryServicesSynchronizationStatus": {
        "description": "Directory Synchronization Status",
        "properties": {
          "domainStatus": {
            "description": "Results from the last synchronization for each domain.  If a synchronization is currently running this will indicate the results for the last synchronization and not the current running totals.",
            "items": {
              "$ref": "#/components/schemas/DomainSynchronizationStatus"
            },
            "type": "array"
          },
          "endDateTime": {
            "description": "The date and time that the last synchronization ended.  If a synchronization is currently running this will be empty.",
            "type": "string",
            "format": "date-time"
          },
          "errorCount": {
            "description": "The number of errors since the last synchronization start time",
            "type": "integer",
            "format": "int32"
          },
          "estimatedPercentComplete": {
            "description": "Based on last run time duration the percent complete assumes each run takes approximately the same amount of time",
            "type": "integer",
            "format": "int32"
          },
          "nextSynchronizationDateTime": {
            "description": "The next time the synchronization is expected to run",
            "type": "string",
            "format": "date-time"
          },
          "startDateTime": {
            "description": "The date and time that the last synchronization started.  This will be empty if a synchronization has never been run.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "DomainSynchronizationStatus": {
        "description": "Results of the last synchronization for this domain",
        "properties": {
          "disabledUsers": {
            "description": "Number of users that were disabled",
            "type": "integer",
            "format": "int32"
          },
          "domainId": {
            "description": "Which domain is this status for",
            "type": "integer",
            "format": "int32"
          },
          "domainUsersUpdatedSinceLastSynchronization": {
            "description": "Obsolete - Not populated.",
            "type": "integer",
            "format": "int32"
          },
          "lastLogEntry": {
            "description": "Log Entry used for parsing",
            "type": "string"
          },
          "newUsersCreated": {
            "description": "Total new users that were created",
            "type": "integer",
            "format": "int32"
          },
          "newUsersCreatedAsDisabled": {
            "description": "Total new users that were created and then set as disabled due to either license limits or other settings",
            "type": "integer",
            "format": "int32"
          },
          "usersRemovedFromGroups": {
            "description": "Total users removed from groups",
            "type": "integer",
            "format": "int32"
          },
          "usersWithGroupMembershipChanges": {
            "description": "Total number of users that were added or removed from any group in this domain",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "IPagingOfDomainSummaryModel": {
        "description": "IPagingOfDomainSummaryModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/DomainSummaryModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DomainSummaryModel": {
        "description": "Domain Summary",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "domainId": {
            "description": "Domain Id",
            "type": "integer",
            "format": "int32"
          },
          "domainName": {
            "description": "Domain Name",
            "type": "string"
          },
          "domainType": {
            "$ref": "#/components/schemas/DomainType"
          },
          "friendlyName": {
            "description": "Friendly Name",
            "type": "string"
          },
          "requireRadiusAuthentication": {
            "description": "Require Radius Authentication",
            "type": "boolean"
          },
          "useSecureLdap": {
            "description": "Use Secure LDAP",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DomainType": {
        "description": "Domain Type",
        "properties": {},
        "type": "string",
        "enum": [
          "ActiveDirectory",
          "OpenLdap",
          "AzureActiveDirectory"
        ]
      },
      "DomainCreateArgs": {
        "description": "DomainCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DomainCreateModel"
          }
        },
        "type": "object"
      },
      "DomainCreateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "authType": {
            "description": "AuthType for OpenLdap",
            "type": "string"
          },
          "clientId": {
            "description": "Client ID",
            "type": "string"
          },
          "clientSecret": {
            "description": "Client Secret",
            "type": "string"
          },
          "distinguishedName": {
            "description": "Domain Base DN",
            "type": "string"
          },
          "domainName": {
            "description": "The name of the domain.",
            "type": "string"
          },
          "domainType": {
            "$ref": "#/components/schemas/DomainType"
          },
          "friendlyName": {
            "description": "The friendly name of the domain.",
            "type": "string"
          },
          "multifactorAuthenticationProvider": {
            "$ref": "#/components/schemas/MultifactorAuthenticationProviderTypes"
          },
          "siteId": {
            "description": "Site Id",
            "type": "integer",
            "format": "int32"
          },
          "synchronizationSecretId": {
            "description": "Synchronization Secret",
            "type": "integer",
            "format": "int32"
          },
          "tenantId": {
            "description": "Tenant ID",
            "type": "string"
          },
          "userAuthType": {
            "description": "UserAuthType for OpenLdap",
            "type": "string"
          },
          "useSecureLDAP": {
            "description": "Use Secure LDAP",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MultifactorAuthenticationProviderTypes": {
        "description": "Domain multifactor authentication providers.",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "Radius",
          "TOTPAuthenticator",
          "Duo",
          "Fido2",
          "Email"
        ]
      },
      "DomainModel": {
        "description": "Domain",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "domainId": {
            "description": "Domain Id",
            "type": "integer",
            "format": "int32"
          },
          "domainName": {
            "description": "Domain Name",
            "type": "string"
          },
          "friendlyName": {
            "description": "Friendly Name",
            "type": "string"
          },
          "multifactorAuthenticationProvider": {
            "$ref": "#/components/schemas/MultifactorAuthenticationProviderTypes"
          },
          "siteId": {
            "description": "Site Id",
            "type": "integer",
            "format": "int32"
          },
          "synchronizationSecretId": {
            "description": "Synchronization Secret",
            "type": "integer",
            "format": "int32"
          },
          "useSecureLDAP": {
            "description": "Use Secure LDAP",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LdapSyncSettingsViewModel": {
        "description": "LdapSyncSettingsViewModel",
        "properties": {
          "actions": {
            "description": "Valid Actions",
            "items": {
              "$ref": "#/components/schemas/DomainActionType"
            },
            "type": "array"
          },
          "baseDnCode": {
            "$ref": "#/components/schemas/ViewFieldDropDownValueOfString"
          },
          "displayNameAttribute": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "domainId": {
            "description": "Domain Id",
            "type": "integer",
            "format": "int32"
          },
          "emailAttribute": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "groupMemberAttribute": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "groupNameAttribute": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "groupObjectClasses": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "groupSearchFilter": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "guidAttribute": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "usernameAttribute": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "userObjectClasses": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "userPrincipalNameAttribute": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          }
        },
        "type": "object"
      },
      "DomainActionType": {
        "description": "Valid Actions",
        "properties": {},
        "type": "string",
        "enum": [
          "EditDomain",
          "EditGroups"
        ]
      },
      "ViewFieldDropDownValueOfString": {
        "description": "Base Distinguished Name Code",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "dropDownOptions": {
            "description": "DropDownOptions",
            "items": {
              "$ref": "#/components/schemas/ViewFieldDropDownOption"
            },
            "type": "array"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldDropDownOption": {
        "description": "DropDownOptions",
        "properties": {
          "fieldDisplay": {
            "description": "FieldDisplay",
            "type": "string"
          },
          "fieldValue": {
            "description": "FieldValue",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalGroupViewModel": {
        "description": "External Groups",
        "properties": {
          "errorMessage": {
            "description": "Error Message returned when populating groups array if error occurs, otherwise null",
            "type": "string"
          },
          "groups": {
            "description": "Groups that matched the search criteria",
            "items": {
              "$ref": "#/components/schemas/ExternalServicesGroupModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExternalServicesGroupModel": {
        "description": "Directory Group",
        "properties": {
          "dsGuid": {
            "description": "Unique Identifier of the Group",
            "type": "string"
          },
          "name": {
            "description": "Name Guid of the Group",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DirectoryServicesGroupMemberResponse": {
        "description": "Group Member Response",
        "properties": {
          "errorMessage": {
            "description": "Indicates if an error message occurred",
            "type": "string"
          },
          "members": {
            "description": "Members of the group",
            "items": {
              "$ref": "#/components/schemas/DirectoryGroupUserViewModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DirectoryGroupUserViewModel": {
        "description": "Directory Group User",
        "properties": {
          "displayName": {
            "description": "Display Name of the user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DirectoryServicesConfigurationModel": {
        "description": "Directory Services Configuration",
        "properties": {
          "daysToKeepOperationalLogs": {
            "description": "How long to keep operational logs",
            "type": "integer",
            "format": "int32"
          },
          "disableInactiveUsersMonths": {
            "description": "How long to wait before disabling inactive users",
            "type": "integer",
            "format": "int32"
          },
          "enableDirectoryIntegration": {
            "description": "Whether or not any Directory Services integrations are enabled or not",
            "type": "boolean"
          },
          "enableDirectorySynchronization": {
            "description": "Synchronize users and group membership on a time interval",
            "type": "boolean"
          },
          "enableIntegratedWindowsAuthentication": {
            "description": "Integrated Windows Authentication (IWA) allows users to log into Secret Server automatically if they are logged into a workstation with their Active Directory credentials.",
            "type": "boolean"
          },
          "enableUserDisabling": {
            "description": "When enabled inactive users will be automatically disabled regardless of their Directory status",
            "type": "boolean"
          },
          "synchronizationIntervalDays": {
            "description": "Synchronize days interval for users and group membership",
            "type": "integer",
            "format": "int32"
          },
          "synchronizationIntervalHours": {
            "description": "Synchronize hours interval for users and group membership",
            "type": "integer",
            "format": "int32"
          },
          "synchronizationIntervalMinutes": {
            "description": "Synchronize minutes interval for users and group membership",
            "type": "integer",
            "format": "int32"
          },
          "userAccountOptions": {
            "$ref": "#/components/schemas/DirectoryServicesSynchronizationUserOption"
          }
        },
        "type": "object"
      },
      "DirectoryServicesSynchronizationUserOption": {
        "description": "Indicates how to synchronize the enabled status for new and existing users",
        "properties": {},
        "type": "string",
        "enum": [
          "ImportEnabled",
          "ImportDisabled",
          "MirrorDirectory"
        ]
      },
      "DirectoryServicesConfigurationUpdateArgs": {
        "description": "DirectoryServicesConfigurationUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DirectoryServicesConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "DirectoryServicesConfigurationUpdateModel": {
        "description": "The fields to update on the Directory Services configuration.",
        "properties": {
          "daysToKeepOperationalLogs": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "disableInactiveUsersMonths": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableDirectoryIntegration": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableDirectorySynchronization": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableIntegratedWindowsAuthentication": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableUserDisabling": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "synchronizationIntervalDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "synchronizationIntervalHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "synchronizationIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "userAccountOptions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDirectoryServicesSynchronizationUserOption"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfDirectoryServicesSynchronizationUserOption": {
        "description": "Indicates how to synchronize the enabled status for new and existing users",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/DirectoryServicesSynchronizationUserOption"
          }
        },
        "type": "object"
      },
      "LdapSyncSettingsPatchArgs": {
        "description": "LdapSyncSettingsPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LdapSyncSettingsPatchModel"
          }
        },
        "type": "object"
      },
      "LdapSyncSettingsPatchModel": {
        "description": "Patch update data for the Ldap Sync Settings.",
        "properties": {
          "baseDnCode": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "displayNameAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "emailAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "groupMemberAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "groupNameAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "groupObjectClasses": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "groupSearchFilter": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "guidAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "usernameAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "userObjectClasses": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "userPrincipalNameAttribute": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "DomainPatchArgs": {
        "description": "DomainPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DomainPatchModel"
          }
        },
        "type": "object"
      },
      "DomainPatchModel": {
        "description": "Patch update data for the domain.",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "authType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalAuthType"
          },
          "clientId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "clientSecret": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "distinguishedName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "domainName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "friendlyName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "multifactorAuthenticationProvider": {
            "$ref": "#/components/schemas/UpdateFieldValueOfMultifactorAuthenticationProviderTypes"
          },
          "siteId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "synchronizationSecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "tenantId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "userAuthType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalAuthType"
          },
          "useSecureLDAP": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalAuthType": {
        "description": "AuthType for OpenLdap",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfMultifactorAuthenticationProviderTypes": {
        "description": "Domain multifactor authentication provider.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/MultifactorAuthenticationProviderTypes"
          }
        },
        "type": "object"
      },
      "LinkExternalGroupArgs": {
        "description": "LinkExternalGroupArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LinkExternalGroupSettings"
          }
        },
        "type": "object"
      },
      "LinkExternalGroupSettings": {
        "description": "Information about the directory group that is needed to create a link",
        "properties": {
          "domainIdentifier": {
            "description": "The unique directory identifier for the group to be linked. For Active Directory this must be in hex format, NOT guid format.  For example, this is ADGuid in Active Directory",
            "type": "string"
          },
          "name": {
            "description": "Name of the group in the directory",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryDataReplicaModel": {
        "description": "Disaster Recovery Data Replica",
        "properties": {
          "error": {
            "description": "Any error that occurred on the last data replication with this data replica.",
            "type": "string"
          },
          "folders": {
            "description": "The folders to be replicated, default is all folders.",
            "items": {
              "$ref": "#/components/schemas/FolderSimpleModel"
            },
            "type": "array"
          },
          "id": {
            "description": "The data replica ID.",
            "type": "string",
            "format": "uuid"
          },
          "isReplicating": {
            "description": "Whether data replication is currently active for this data replica.",
            "type": "boolean"
          },
          "lastReplicated": {
            "description": "The last time data replication was requested by this data replica.",
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "description": "The location of the data replica.",
            "type": "string"
          },
          "name": {
            "description": "The name of the data replica.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/DisasterRecoveryDataReplicaStatus"
          }
        },
        "type": "object"
      },
      "FolderSimpleModel": {
        "description": "Describes simple properties of a secret folder.",
        "properties": {
          "id": {
            "description": "The ID for the folder.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The dispay name for the folder.",
            "type": "string"
          },
          "path": {
            "description": "The full path for the folder.",
            "type": "string"
          },
          "restricted": {
            "description": "Whether the folder is a restricted system folder.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryDataReplicaStatus": {
        "description": "The status of the data replica.",
        "properties": {},
        "type": "string",
        "enum": [
          "Unapproved",
          "Approved",
          "Disabled"
        ]
      },
      "DisasterRecoveryDataReplicaArgs": {
        "description": "DisasterRecoveryDataReplicaArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisasterRecoveryDataReplicaUpdateModel"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryDataReplicaUpdateModel": {
        "description": "Data",
        "properties": {
          "dataReplicaId": {
            "description": "DataReplicaId",
            "type": "string",
            "format": "uuid"
          },
          "folderIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "status": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDisasterRecoveryDataReplicaStatus"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfDisasterRecoveryDataReplicaStatus": {
        "description": "Status",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/DisasterRecoveryDataReplicaStatus"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryIncomingConfigurationModel": {
        "description": "Disaster Recovery Configuration",
        "properties": {
          "dataReplicaName": {
            "description": "The data replica name given to it by the data source.",
            "type": "string"
          },
          "dataReplicationEnabled": {
            "description": "Whether data replication is enabled.",
            "type": "boolean"
          },
          "dataReplicationGroupId": {
            "description": "The group all created secrets will be assigned to.",
            "type": "integer",
            "format": "int32"
          },
          "dataSourceKey": {
            "description": "The data source key.",
            "type": "string"
          },
          "dataSourceUrl": {
            "description": "The data source URL.",
            "type": "string"
          },
          "isReplica": {
            "description": "Whether this instance of Secret Server is a data replica, a data source, or neither.",
            "type": "boolean"
          },
          "isReplicating": {
            "description": "Whether data replication is currently active.",
            "type": "boolean"
          },
          "lastReplicated": {
            "description": "The last time data replication ran.",
            "type": "string",
            "format": "date-time"
          },
          "replicationIntervalMinutes": {
            "description": "How frequently data replication will take place on this data replica.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryConfigurationArgs": {
        "description": "DisasterRecoveryConfigurationArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DisasterRecoveryConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryConfigurationUpdateModel": {
        "description": "Data",
        "properties": {
          "dataPackageStoragePath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "dataReplicationEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "dataReplicationGroupId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "dataSourceKey": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "dataSourceUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "replicationIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "PagingOfDisasterRecoveryAuditViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DisasterRecoveryAuditViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryAuditViewModel": {
        "description": "Disaster Recovery Audit",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "date": {
            "description": "Date",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryOutgoingConfigurationModel": {
        "description": "Disaster Recovery Data Replicas",
        "properties": {
          "dataPackageStoragePath": {
            "description": "The location of where data replication files are stored temporarily on the data source.",
            "type": "string"
          },
          "dataReplicas": {
            "description": "The data replicas registered with this data source.",
            "items": {
              "$ref": "#/components/schemas/DisasterRecoveryDataReplicaModel"
            },
            "type": "array"
          },
          "dataSourceKey": {
            "description": "The data source key a data replica should use when enabling data replication.",
            "type": "string"
          },
          "dataSourceUrl": {
            "description": "The data source URL a data replica should use when enabling data replication.",
            "type": "string"
          },
          "isDataPackageStoragePathValid": {
            "description": "Whether the data package storage location is valid and ready for use.",
            "type": "boolean"
          },
          "isReplica": {
            "description": "Whether this instance of Secret Server is a data replica, a data source, or neither.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfDisasterRecoveryDataReplicationLogViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DisasterRecoveryDataReplicationLogViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryDataReplicationLogViewModel": {
        "description": "Query results",
        "properties": {
          "created": {
            "description": "Created",
            "type": "string",
            "format": "date-time"
          },
          "dataReplicaName": {
            "description": "DataReplicaName",
            "type": "string"
          },
          "dataSourceUrl": {
            "description": "DataSourceUrl",
            "type": "string"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          },
          "text": {
            "description": "Text",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryHandshakeArgs": {
        "description": "DisasterRecoveryHandshakeArgs",
        "properties": {
          "encryptedParts": {
            "description": "EncryptedParts",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryHandshakeModel": {
        "description": "DisasterRecoveryHandshakeModel",
        "properties": {
          "encryptedParts": {
            "description": "EncryptedParts",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryDataReplicaMessageResponse": {
        "description": "DisasterRecoveryDataReplicaMessageResponse",
        "properties": {
          "message": {
            "description": "Message",
            "type": "string"
          },
          "status": {
            "description": "Status",
            "type": "string"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryDataReplicaToDataSourceArgs": {
        "description": "DisasterRecoveryDataReplicaToDataSourceArgs",
        "properties": {
          "dataReplicaId": {
            "description": "DataReplicaId",
            "type": "string",
            "format": "uuid"
          },
          "encryptedRequest": {
            "description": "EncryptedRequest",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisasterRecoveryDataSourceToDataReplicaModel": {
        "description": "DisasterRecoveryDataSourceToDataReplicaModel",
        "properties": {
          "encryptedResponse": {
            "description": "EncryptedResponse",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfDiscoverySourceSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DiscoverySourceSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DiscoverySourceSummaryModel": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Is discovery source active",
            "type": "boolean"
          },
          "daysToKeepMachines": {
            "description": "Days To Keep Machines",
            "type": "integer",
            "format": "int32"
          },
          "discoverSpecificOUs": {
            "description": "Discover specific OUs",
            "type": "boolean"
          },
          "discoveryScannerId": {
            "description": "Discovery scanner ID",
            "type": "string"
          },
          "discoverySourceId": {
            "description": "The discovery source ID",
            "type": "integer",
            "format": "int32"
          },
          "discoverySourceSettings": {
            "$ref": "#/components/schemas/DiscoverySourceSettingsSummaryModel"
          },
          "lastDiscoveryRunDate": {
            "description": "Last discovery run date",
            "type": "string",
            "format": "date-time"
          },
          "machineNameResolutionType": {
            "$ref": "#/components/schemas/MachineNameResolutionType"
          },
          "name": {
            "description": "The discovery source naame",
            "type": "string"
          },
          "secretId": {
            "description": "Default Discovery Secret credentials",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "The site ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DiscoverySourceSettingsSummaryModel": {
        "description": "Additional settings for discovery source",
        "properties": {
          "distinguishedName": {
            "description": "The domain distinguished name",
            "type": "string"
          },
          "domainType": {
            "description": "Domain type: ActiveDirectory, OpenLdap, or AzureActiveDirectory",
            "type": "string"
          },
          "friendlyName": {
            "description": "The domain friendly name",
            "type": "string"
          },
          "fullyQualifiedDomainName": {
            "description": "The fully qualified domain name",
            "type": "string"
          },
          "netBIOSName": {
            "description": "The NetBIOS name",
            "type": "string"
          },
          "useSecureLDAP": {
            "description": "Use secure LDAP",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MachineNameResolutionType": {
        "description": "Use machine name and FQDM or only use machine name",
        "properties": {},
        "type": "string",
        "enum": [
          "UseMachineNameAndFQDM",
          "OnlyUseMachineName"
        ]
      },
      "DiscoverySourceModel": {
        "description": "DiscoverySourceModel",
        "properties": {
          "active": {
            "description": "Is discovery source active",
            "type": "boolean"
          },
          "daysToKeepMachines": {
            "description": "Days To Keep Machines",
            "type": "integer",
            "format": "int32"
          },
          "discoverSpecificOUs": {
            "description": "Discover specific OUs",
            "type": "boolean"
          },
          "discoveryScannerId": {
            "description": "Discovery scanner ID",
            "type": "string"
          },
          "discoverySourceId": {
            "description": "The discovery source ID",
            "type": "integer",
            "format": "int32"
          },
          "discoverySourceSettings": {
            "$ref": "#/components/schemas/DiscoverySourceSettingsModel"
          },
          "lastDiscoveryRunDate": {
            "description": "Last discovery run date",
            "type": "string",
            "format": "date-time"
          },
          "machineNameResolutionType": {
            "$ref": "#/components/schemas/MachineNameResolutionType"
          },
          "name": {
            "description": "The discovery source naame",
            "type": "string"
          },
          "secretId": {
            "description": "Default Discovery Secret credentials",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "The site ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DiscoverySourceSettingsModel": {
        "description": "Additional settings for discovery source",
        "properties": {
          "daysToKeepMachines": {
            "description": "Days To Keep Machines",
            "type": "string"
          },
          "distinguishedName": {
            "description": "The domain distinguished name",
            "type": "string"
          },
          "domainType": {
            "description": "Domain type: ActiveDirectory, OpenLdap, or AzureActiveDirectory",
            "type": "string"
          },
          "friendlyName": {
            "description": "The domain friendly name",
            "type": "string"
          },
          "fullyQualifiedDomainName": {
            "description": "The fully qualified domain name",
            "type": "string"
          },
          "netBIOSName": {
            "description": "The NetBIOS name",
            "type": "string"
          },
          "useSecureLDAP": {
            "description": "Use secure LDAP",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DiscoverySourceUpdateArgs": {
        "description": "DiscoverySourceUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DiscoverySourceUpdateModel"
          }
        },
        "type": "object"
      },
      "DiscoverySourceUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "daysToKeepMachines": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "discoverSpecificOUs": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "discoverySourceSettings": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDiscoverySourceSettingsUpdateModel"
          },
          "machineNameResolutionType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfMachineNameResolutionType"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "secretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "siteId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfDiscoverySourceSettingsUpdateModel": {
        "description": "Additional discovery settings",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/DiscoverySourceSettingsUpdateModel"
          }
        },
        "type": "object"
      },
      "DiscoverySourceSettingsUpdateModel": {
        "description": "Value",
        "properties": {
          "friendlyName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "fullyQualifiedDomainName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "useSecureLDAP": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfMachineNameResolutionType": {
        "description": "Use machine name and FQDM or only use machine name",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/MachineNameResolutionType"
          }
        },
        "type": "object"
      },
      "DiscoveryConfigurationModel": {
        "description": "DiscoveryConfigurationModel",
        "properties": {
          "discoveryIntervalDays": {
            "description": "Synchronize days interval for Discovery",
            "type": "integer",
            "format": "int32"
          },
          "discoveryIntervalHours": {
            "description": "Synchronize hours interval for Discovery",
            "type": "integer",
            "format": "int32"
          },
          "discoveryScanOffsetHours": {
            "description": "Sets time offset in hours for discovery scan operations. Default value: 0",
            "type": "integer",
            "format": "int32"
          },
          "enableDiscovery": {
            "description": "Whether or not discovery is enabled",
            "type": "boolean"
          },
          "engineADDiscoveryBatchSize": {
            "description": "The size of the batch for Active Directory Account engine scanning - set higher if engine takes too much time to process. Default value: 1",
            "type": "integer",
            "format": "int32"
          },
          "ignoreClusterNodeObjects": {
            "description": "If set to true, Discovery scans will bypass machines identified as 'msclustervirtualserver.' Default value: False",
            "type": "boolean"
          },
          "maxLogAgeDays": {
            "description": "How long to keep logs",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DiscoveryConfigurationUpdateArgs": {
        "description": "DiscoveryConfigurationUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DiscoveryConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "DiscoveryConfigurationUpdateModel": {
        "description": "Update discovery configuration",
        "properties": {
          "dependencyNotFoundThreshold": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "discoveryIntervalDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "discoveryIntervalHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "discoveryScanOffsetHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableDiscovery": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "engineADDiscoveryBatchSize": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "ignoreClusterNodeObjects": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "maxLogAgeDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "DiscoveryStatusModel": {
        "description": "DiscoveryStatusModel",
        "properties": {
          "actions": {
            "description": "Actions the current user can perform for Discovery",
            "items": {
              "$ref": "#/components/schemas/DiscoveryActionType"
            },
            "type": "array"
          },
          "discoveryComputerScanEndDateTime": {
            "description": "The date and time the Scan Computer messages completed queueing last.",
            "type": "string",
            "format": "date-time"
          },
          "discoveryComputerScanStartDateTime": {
            "description": "The date and time Scan Computer messages last started.",
            "type": "string",
            "format": "date-time"
          },
          "discoveryFetchEndDateTime": {
            "description": "The date and time the Host Range and Machine fetching last completed.  This will be empty if a synchronization has never been run.",
            "type": "string",
            "format": "date-time"
          },
          "discoveryFetchStartDateTime": {
            "description": "The date and time the Host Range and Machine fetching was last run or started.  This will be empty if a synchronization has never been run.",
            "type": "string",
            "format": "date-time"
          },
          "discoverySourceCount": {
            "description": "Total number of discovery sources either active or inactive",
            "type": "integer",
            "format": "int32"
          },
          "isDiscoveryComputerScanRunning": {
            "description": "Indicates if computer scanning is actively queueing.",
            "type": "boolean"
          },
          "isDiscoveryEnabled": {
            "description": "Indicates if Discovery is currently enabled",
            "type": "boolean"
          },
          "isDiscoveryFetchRunning": {
            "description": "Indicates if the Host Range and Machine fetching is currently running.",
            "type": "boolean"
          },
          "nextComputerScanDiscoveryDateTime": {
            "description": "The next time computer scanning is expected to run",
            "type": "string",
            "format": "date-time"
          },
          "nextFetchDiscoveryDateTime": {
            "description": "The next time the Host Range and Machine fetching is expected to run",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "DiscoveryActionType": {
        "description": "Actions the current user can perform for Discovery",
        "properties": {},
        "type": "string",
        "enum": [
          "CreateDiscoverySource",
          "EditDiscoverySource",
          "RunDiscovery",
          "RunComputerScan",
          "EditConfiguration",
          "ViewScanners"
        ]
      },
      "DiscoveryScannerSettingTypeSummary": {
        "description": "DiscoveryScannerSettingTypeSummary[]",
        "properties": {
          "discoveryItemScannerDescription": {
            "description": "Description of the scanner",
            "type": "string"
          },
          "discoveryItemScannerId": {
            "description": "Item Scanner ID",
            "type": "integer",
            "format": "int32"
          },
          "discoveryItemScannerName": {
            "description": "Scanner name",
            "type": "string"
          },
          "discoveryScanTypeId": {
            "description": "Scanner Type ID",
            "type": "integer",
            "format": "int32"
          },
          "isSuggested": {
            "description": "True if this scanner is typically created",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DiscoveryScannerSettingSummaryModel": {
        "description": "DiscoveryScannerSettingSummaryModel[]",
        "properties": {
          "discoveryScannerId": {
            "description": "Discovery Scanner Id",
            "type": "integer",
            "format": "int32"
          },
          "discoverySourceScannerMapId": {
            "description": "The ID for the map",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DiscoveryScanTypeSummary": {
        "description": "DiscoveryScanTypeSummary[]",
        "properties": {
          "discoveryScanTypeId": {
            "description": "Discovery Scan Type Id",
            "type": "integer",
            "format": "int32"
          },
          "scanTypeDescription": {
            "description": "Scan Type Description",
            "type": "string"
          },
          "scanTypeName": {
            "description": "Scan Type Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IPagingOfDiscoverySourceAuditModel": {
        "description": "IPagingOfDiscoverySourceAuditModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/DiscoverySourceAuditModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DiscoverySourceAuditModel": {
        "description": "Discovery Source Audit",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "date": {
            "description": "Date",
            "type": "string",
            "format": "date-time"
          },
          "discoverySourceAuditId": {
            "description": "DiscoverySourceAuditId",
            "type": "integer",
            "format": "int32"
          },
          "discoverySourceId": {
            "description": "DiscoverySourceId",
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "formattedDate": {
            "description": "FormattedDate",
            "type": "string"
          },
          "itemId": {
            "description": "ItemId",
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "UserName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OUModel": {
        "description": "OUModel[]",
        "properties": {
          "displayName": {
            "description": "The display name of the OU",
            "type": "string"
          },
          "distinguishedName": {
            "description": "The distinguished name of the OU",
            "type": "string"
          },
          "guid": {
            "description": "The GUID of the OU",
            "type": "string"
          },
          "id": {
            "description": "The Secret Server ID of the OU",
            "type": "integer",
            "format": "int32"
          },
          "parentGuid": {
            "description": "The parent GUID of the OU",
            "type": "string"
          },
          "type": {
            "description": "The type of the OU",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DomainDiscoveryScopeModel": {
        "description": "A discovery filter to limit discovery to specific OU",
        "properties": {
          "discoverySourceId": {
            "description": "The Secret Server ID of the discovery soure",
            "type": "integer",
            "format": "int32"
          },
          "filters": {
            "description": "A list of filter memebers",
            "items": {
              "$ref": "#/components/schemas/DomainDiscoveryScopeFilterModel"
            },
            "type": "array"
          },
          "lookupTableIsReady": {
            "description": "Is the look up table ready for the discovery source",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DomainDiscoveryScopeFilterModel": {
        "description": "A filter for a discovery source",
        "properties": {
          "discoveryFilterId": {
            "description": "A filter ID",
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "description": "The display name of the member",
            "type": "string"
          },
          "filterType": {
            "$ref": "#/components/schemas/DiscoveryFilterType"
          },
          "guid": {
            "description": "The GUID of the member",
            "type": "string"
          },
          "scanTargetType": {
            "$ref": "#/components/schemas/ScanTargetType"
          },
          "secretId": {
            "description": "The secret ID associated with the member",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "The secret name associated with the member",
            "type": "string"
          },
          "siteId": {
            "description": "The site ID",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "The site name of the member",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiscoveryFilterType": {
        "description": "Indicates if the filter is an include or exclude",
        "properties": {},
        "type": "string",
        "enum": [
          "Include",
          "Exclude"
        ]
      },
      "ScanTargetType": {
        "description": "The scan target type for the member",
        "properties": {},
        "type": "string",
        "enum": [
          "Users",
          "Computers",
          "UsersAndComputers"
        ]
      },
      "DiscoverySourceFilterPatchArgs": {
        "description": "DiscoverySourceFilterPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DomainDiscoveryScopeFilterPatchModel"
          }
        },
        "type": "object"
      },
      "DomainDiscoveryScopeFilterPatchModel": {
        "description": "A filter on a domain scope",
        "properties": {
          "scanTargetType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfScanTargetType"
          },
          "secretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "siteId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfScanTargetType": {
        "description": "The scan target type for the member",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/ScanTargetType"
          }
        },
        "type": "object"
      },
      "DiscoverySourceCreateArgs": {
        "description": "DiscoverySourceCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DiscoverySourceCreateModel"
          }
        },
        "type": "object"
      },
      "DiscoverySourceCreateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "description": "Is discovery source active",
            "type": "boolean"
          },
          "discoverSpecificOUs": {
            "description": "Discover specific OUs",
            "type": "boolean"
          },
          "discoveryScannerId": {
            "description": "Discovery scanner ID",
            "type": "string"
          },
          "discoverySourceSettings": {
            "$ref": "#/components/schemas/DiscoverySourceSettingsCreateModel"
          },
          "lastDiscoveryRunDate": {
            "description": "Last discovery run date",
            "type": "string",
            "format": "date-time"
          },
          "machineNameResolutionType": {
            "$ref": "#/components/schemas/MachineNameResolutionType"
          },
          "name": {
            "description": "The discovery source naame",
            "type": "string"
          },
          "secretId": {
            "description": "Discovery Secret credential",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "The site ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DiscoverySourceSettingsCreateModel": {
        "description": "Additional settings for discovery source",
        "properties": {
          "domainType": {
            "$ref": "#/components/schemas/DomainType"
          },
          "friendlyName": {
            "description": "The domain friendly name",
            "type": "string"
          },
          "fullyQualifiedDomainName": {
            "description": "The fully qualified domain name",
            "type": "string"
          },
          "useSecureLDAP": {
            "description": "Use secure LDAP",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DiscoveryRunArgs": {
        "description": "DiscoveryRunArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DiscoveryRunModel"
          }
        },
        "type": "object"
      },
      "DiscoveryRunModel": {
        "description": "Data",
        "properties": {
          "commandType": {
            "$ref": "#/components/schemas/DiscoveryCommandType"
          }
        },
        "type": "object"
      },
      "DiscoveryCommandType": {
        "description": "CommandType",
        "properties": {},
        "type": "string",
        "enum": [
          "Discovery",
          "ComputerScan"
        ]
      },
      "DiscoveryScannerSettingCreateArgs": {
        "description": "Discovery Scanner Settings Create Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DiscoveryScannerSettingCreateData"
          }
        },
        "type": "object"
      },
      "DiscoveryScannerSettingCreateData": {
        "description": "Create discovery scanner settings",
        "properties": {
          "discoveryScanTypeId": {
            "description": "DiscoveryScanTypeId to create",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DiscoveryScannerSettingViewModel": {
        "description": "Discovery Scanner Settings",
        "properties": {
          "discoverySourceScannerMapId": {
            "description": "Unique ID for scanner setting",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DiscoverySourceFiltersUpdateArgs": {
        "description": "DiscoverySourceFiltersUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DiscoverySourceFiltersUpdateModel"
          }
        },
        "type": "object"
      },
      "DiscoverySourceFiltersUpdateModel": {
        "description": "Data",
        "properties": {
          "filters": {
            "description": "Filters",
            "items": {
              "$ref": "#/components/schemas/DomainDiscoveryScopeFilterUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DomainDiscoveryScopeFilterUpdateModel": {
        "description": "Filters",
        "properties": {
          "discoveryFilterId": {
            "description": "A filter ID",
            "type": "integer",
            "format": "int32"
          },
          "filterType": {
            "$ref": "#/components/schemas/DiscoveryFilterType"
          },
          "guid": {
            "description": "The AD GUID",
            "type": "string"
          },
          "scanTargetType": {
            "$ref": "#/components/schemas/ScanTargetType"
          },
          "secretId": {
            "description": "The secret ID associated with the member",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "The site ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DistributedEngineConfigurationModel": {
        "description": "Distributed Engine Configuration",
        "properties": {
          "azureServiceBusTransportType": {
            "$ref": "#/components/schemas/AzureServiceBusTransportType"
          },
          "callbackPort": {
            "description": "Port of the Distributed Engines",
            "type": "integer",
            "format": "int32"
          },
          "callbackUrl": {
            "description": "Url of the Distributed Engines",
            "type": "string"
          },
          "defaultCallbackIntervalSeconds": {
            "description": "Default Callback Interval Seconds",
            "type": "integer",
            "format": "int32"
          },
          "enableDistributedEngines": {
            "description": "Whether Distributed Engines are enabled or not",
            "type": "boolean"
          },
          "protocol": {
            "$ref": "#/components/schemas/DistributedEngineProtocol"
          },
          "responseBusSiteConnectorId": {
            "description": "Response Bus Site Connector",
            "type": "integer",
            "format": "int32"
          },
          "secretHeartbeatMessageMinutesToLive": {
            "description": "Secret Heartbeat Message Time to Live in Minutes",
            "type": "integer",
            "format": "int32"
          },
          "secretHeartbeatMessageRetryMinutes": {
            "description": "Secret Heartbeat Message Retry Time in Minutes",
            "type": "integer",
            "format": "int32"
          },
          "secretPasswordChangeMessageMinutesToLive": {
            "description": "Secret Password Change Message Time to Live in Minutes",
            "type": "integer",
            "format": "int32"
          },
          "secretPasswordChangeMessageRetryMinutes": {
            "description": "Secret Password Change Message Retry Time in Minutes",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AzureServiceBusTransportType": {
        "description": "Azure Service Bus Transport Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Amqp",
          "AmqpWebSockets"
        ]
      },
      "DistributedEngineProtocol": {
        "description": "Protocol used by Distibuted Engines",
        "properties": {},
        "type": "string",
        "enum": [
          "Http",
          "Https",
          "Tcp"
        ]
      },
      "DistributedEngineConfigurationUpdateArgs": {
        "description": "DistributedEngineConfigurationUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DistributedEngineConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "DistributedEngineConfigurationUpdateModel": {
        "description": "The fields to update on the Distributed Engine Configuration",
        "properties": {
          "azureServiceBusTransportType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfAzureServiceBusTransportType"
          },
          "callbackPort": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "callbackUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "defaultCallbackIntervalSeconds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableDistributedEngines": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "protocol": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDistributedEngineProtocol"
          },
          "responseBusSiteConnectorId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "secretHeartbeatMessageMinutesToLive": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "secretHeartbeatMessageRetryMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "secretPasswordChangeMessageMinutesToLive": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "secretPasswordChangeMessageRetryMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfAzureServiceBusTransportType": {
        "description": "Azure Service Bus Transport Type",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/AzureServiceBusTransportType"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfDistributedEngineProtocol": {
        "description": "Protocol used by Distibuted Engine",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/DistributedEngineProtocol"
          }
        },
        "type": "object"
      },
      "IPagingOfSiteConnectorSummaryModel": {
        "description": "IPagingOfSiteConnectorSummaryModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/SiteConnectorSummaryModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SiteConnectorSummaryModel": {
        "description": "Site Connector Summary",
        "properties": {
          "active": {
            "description": "Whether Site Connector is active or not",
            "type": "boolean"
          },
          "hostName": {
            "description": "Host Name of Site Connector",
            "type": "string"
          },
          "queueType": {
            "description": "Queue Type of Site Connector",
            "type": "string"
          },
          "siteConnectorId": {
            "description": "Id of Site Connector",
            "type": "integer",
            "format": "int32"
          },
          "siteConnectorName": {
            "description": "Name of Site Connector",
            "type": "string"
          },
          "validated": {
            "description": "Whether Site Connector has been validated or not",
            "type": "boolean"
          },
          "version": {
            "description": "Version of Site Connector",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SiteConnectorViewModel": {
        "description": "Site Connector View Model",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "hostName": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "port": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "queueType": {
            "$ref": "#/components/schemas/ViewFieldDropDownValueOfMessageQueueType"
          },
          "sharedAccessKeyName": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "sharedAccessKeyValue": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "siteConnectorId": {
            "description": "Id of Site Connector",
            "type": "integer",
            "format": "int32"
          },
          "siteConnectorName": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "sslCertificateThumbprint": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "useSsl": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "validated": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ViewFieldDropDownValueOfMessageQueueType": {
        "description": "Queue Type of Site Connector",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "dropDownOptions": {
            "description": "DropDownOptions",
            "items": {
              "$ref": "#/components/schemas/ViewFieldDropDownOption"
            },
            "type": "array"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/MessageQueueType"
          }
        },
        "type": "object"
      },
      "MessageQueueType": {
        "description": "Value",
        "properties": {},
        "type": "string",
        "enum": [
          "MemoryMq",
          "RabbitMq",
          "AzureServiceBus"
        ]
      },
      "SiteConnectorUpdateArgs": {
        "description": "SiteConnectorUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SiteConnectorUpdateModel"
          }
        },
        "type": "object"
      },
      "SiteConnectorUpdateModel": {
        "description": "Site Connector Update Model",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "hostName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "port": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "queueType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfMessageQueueType"
          },
          "sharedAccessKeyName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sharedAccessKeyValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "siteConnectorName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sslCertificateThumbprint": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "useSsl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfMessageQueueType": {
        "description": "Queue Type of Site Connector",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/MessageQueueType"
          }
        },
        "type": "object"
      },
      "SiteConnectorCredentialsModel": {
        "description": "The credentials that should exist in the site connector service",
        "properties": {
          "password": {
            "description": "The password that should exist in the site connector service",
            "type": "string"
          },
          "username": {
            "description": "The username that should exist in the site connector service",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IPagingOfEngineSummaryModel": {
        "description": "IPagingOfEngineSummaryModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/EngineSummaryModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EngineSummaryModel": {
        "description": "Records",
        "properties": {
          "activationStatus": {
            "$ref": "#/components/schemas/EngineActivationStatusType"
          },
          "bindAddress": {
            "description": "BindAddress",
            "type": "string"
          },
          "connectionStatus": {
            "$ref": "#/components/schemas/EngineConnectionStatusType"
          },
          "engineId": {
            "description": "EngineId",
            "type": "integer",
            "format": "int32"
          },
          "friendlyName": {
            "description": "FriendlyName",
            "type": "string"
          },
          "hostName": {
            "description": "HostName",
            "type": "string"
          },
          "isBlockedByNet48": {
            "description": "IsBlockedByNet48",
            "type": "boolean"
          },
          "lastConnected": {
            "description": "LastConnected",
            "type": "string",
            "format": "date-time"
          },
          "timeMismatch": {
            "description": "TimeMismatch",
            "type": "boolean"
          },
          "timeMismatchSeconds": {
            "description": "TimeMismatchSeconds",
            "type": "integer",
            "format": "int64"
          }
        },
        "type": "object"
      },
      "EngineActivationStatusType": {
        "description": "ActivationStatus",
        "properties": {},
        "type": "string",
        "enum": [
          "Pending",
          "Activated",
          "Inactive",
          "Deleted"
        ]
      },
      "EngineConnectionStatusType": {
        "description": "ConnectionStatus",
        "properties": {},
        "type": "string",
        "enum": [
          "Offline",
          "Online",
          "Invalid",
          "OldVersion"
        ]
      },
      "EngineSettingsModel": {
        "description": "EngineSettingsModel",
        "properties": {
          "adSyncEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "advancedAuditingEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "engineId": {
            "description": "EngineId",
            "type": "integer",
            "format": "int32"
          },
          "engineSettingsId": {
            "description": "EngineSettingsId",
            "type": "integer",
            "format": "int32"
          },
          "localAccountDiscoveryEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "logLevel": {
            "description": "LogLevel",
            "type": "string"
          },
          "passwordChangingEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "rdpProxyEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "secretWorkflowEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "securityAnalyticsEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "serviceAccountManagementEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "siteId": {
            "description": "SiteId",
            "type": "integer",
            "format": "int32"
          },
          "sshProxyEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          },
          "sshTerminalEnabled": {
            "$ref": "#/components/schemas/EngineSettingBool"
          }
        },
        "type": "object"
      },
      "EngineSettingBool": {
        "description": "AdSyncEnabled",
        "properties": {
          "canEdit": {
            "description": "CanEdit",
            "type": "boolean"
          },
          "display": {
            "description": "Display",
            "type": "boolean"
          },
          "enabled": {
            "description": "Enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfEngineAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/EngineAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EngineAuditSummary": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "auditId": {
            "description": "AuditId",
            "type": "integer",
            "format": "int32"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "engineName": {
            "description": "EngineName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "user": {
            "description": "User",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSiteSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SiteSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SiteSummaryModel": {
        "description": "Site Summary",
        "properties": {
          "active": {
            "description": "Is Site Active",
            "type": "boolean"
          },
          "isLocal": {
            "description": "Indicates if this site is the local site that cannot have engines assigned",
            "type": "boolean"
          },
          "lastActivity": {
            "description": "Last Date of Activity of Site",
            "type": "string",
            "format": "date-time"
          },
          "numEnginesMissingNetFramework": {
            "description": "The number of engines on the site missing the minimum DotNet Framework",
            "type": "integer",
            "format": "int32"
          },
          "numEnginesWithoutAbilityToRestartService": {
            "description": "The number of engines on the site without the ability to restart the service, required for upgrades",
            "type": "integer",
            "format": "int32"
          },
          "offlineEngineCount": {
            "description": "Offline Engine Count of Site",
            "type": "integer",
            "format": "int32"
          },
          "onlineEngineCount": {
            "description": "Online Engine Count of Site",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "Id of Site",
            "type": "integer",
            "format": "int32"
          },
          "siteMetrics": {
            "description": "List of Metrics for this site such as ConnectionStatusOffline, ConnectionStatusOnline, ActivationStatusPending, LostConnection, and more.  Only returned on a search when IncludeSiteMetrics is true.",
            "items": {
              "$ref": "#/components/schemas/SiteMetric"
            },
            "type": "array"
          },
          "siteName": {
            "description": "Name of Site",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SiteMetric": {
        "description": "List of Metrics for this site such as ConnectionStatusOffline, ConnectionStatusOnline, ActivationStatusPending, LostConnection, and more.  Only returned on a search when IncludeSiteMetrics is true.",
        "properties": {
          "metricDisplayName": {
            "description": "MetricDisplayName",
            "type": "string"
          },
          "metricName": {
            "description": "MetricName",
            "type": "string"
          },
          "metricValue": {
            "description": "MetricValue",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SiteBasicModel": {
        "description": "Basic Site Model",
        "properties": {
          "active": {
            "description": "Is Site Active",
            "type": "boolean"
          },
          "enableCredSspForWinRm": {
            "description": "Enable CredSSP For WinRM",
            "type": "boolean"
          },
          "enableRdpProxy": {
            "description": "Enable RDP Proxy",
            "type": "boolean"
          },
          "enableSshProxy": {
            "description": "Enable SSH Proxy",
            "type": "boolean"
          },
          "heartbeatInterval": {
            "description": "Heartbeat Interval of Site",
            "type": "integer",
            "format": "int32"
          },
          "jumpBoxAvailablePortRange": {
            "description": "JumpBoxAvailablePortRange",
            "type": "string"
          },
          "powershellSecretId": {
            "description": "Powershell Secret Id of Site if set",
            "type": "integer",
            "format": "int32"
          },
          "processingLocation": {
            "$ref": "#/components/schemas/ProcessingLocationType"
          },
          "rdpProxyPort": {
            "description": "RDP Proxy Port",
            "type": "integer",
            "format": "int32"
          },
          "rdpProxyPortInherited": {
            "description": "RDP Proxy Port Inherited",
            "type": "boolean"
          },
          "secretCount": {
            "description": "Secret Count of Site",
            "type": "integer",
            "format": "int32"
          },
          "siteConnectorId": {
            "description": "Id of Site Connector of Site",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "Id of Site",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "Name of Site",
            "type": "string"
          },
          "sshProxyPort": {
            "description": "SSH Proxy Port",
            "type": "integer",
            "format": "int32"
          },
          "sshProxyPortInherited": {
            "description": "SSH Proxy Port Inherited",
            "type": "boolean"
          },
          "systemSite": {
            "description": "Is this a system site",
            "type": "boolean"
          },
          "winRmEndPointUrl": {
            "description": "WinRM End Point URL of Site",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProcessingLocationType": {
        "description": "Processing Location of Site",
        "properties": {},
        "type": "string",
        "enum": [
          "UseWebSite",
          "UseDistributedEngine"
        ]
      },
      "SiteUpdateArgs": {
        "description": "SiteUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SiteUpdateModel"
          }
        },
        "type": "object"
      },
      "SiteUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableCredSspForWinRm": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "enableRdpProxy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableSshProxy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "heartbeatInterval": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "powershellSecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "processingLocation": {
            "$ref": "#/components/schemas/UpdateFieldValueOfProcessingLocationType"
          },
          "rdpProxyPort": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "siteConnectorId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "siteName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sshProxyPort": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "winRmEndPointUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfProcessingLocationType": {
        "description": "Processing Location of Site",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/ProcessingLocationType"
          }
        },
        "type": "object"
      },
      "PagingOfSiteAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SiteAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SiteAuditSummary": {
        "description": "Site Audit Summary",
        "properties": {
          "action": {
            "description": "Site Audit Action",
            "type": "string"
          },
          "dateRecorded": {
            "description": "Site Audit DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "description": "Site Audit Notes",
            "type": "string"
          },
          "siteAuditId": {
            "description": "Site Audit Id",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "Site Audit UserName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSiteLogSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SiteLogSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SiteLogSummaryModel": {
        "description": "Site Log Summary Model",
        "properties": {
          "dateRecorded": {
            "description": "Date Log Message was Recorded",
            "type": "string",
            "format": "date-time"
          },
          "engineName": {
            "description": "Name of Engine",
            "type": "string"
          },
          "message": {
            "description": "Message that was Logged",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileStream": {
        "description": "FileStream",
        "properties": {
          "canRead": {
            "description": "CanRead",
            "type": "boolean"
          },
          "canSeek": {
            "description": "CanSeek",
            "type": "boolean"
          },
          "canTimeout": {
            "description": "CanTimeout",
            "type": "boolean"
          },
          "canWrite": {
            "description": "CanWrite",
            "type": "boolean"
          },
          "handle": {
            "$ref": "#/components/schemas/IntPtr"
          },
          "isAsync": {
            "description": "IsAsync",
            "type": "boolean"
          },
          "length": {
            "description": "Length",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "position": {
            "description": "Position",
            "type": "integer",
            "format": "int64"
          },
          "readTimeout": {
            "description": "ReadTimeout",
            "type": "integer",
            "format": "int32"
          },
          "safeFileHandle": {
            "$ref": "#/components/schemas/SafeFileHandle"
          },
          "writeTimeout": {
            "description": "WriteTimeout",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "IntPtr": {
        "description": "Handle",
        "properties": {},
        "type": "object"
      },
      "SafeFileHandle": {
        "description": "SafeFileHandle",
        "properties": {
          "isClosed": {
            "description": "IsClosed",
            "type": "boolean"
          },
          "isInvalid": {
            "description": "IsInvalid",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EngineServerCapabilitiesSummary": {
        "description": "EngineServerCapabilitiesSummary[]",
        "properties": {
          "lastModifiedDate": {
            "description": "When the capability was last updated",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Which capability",
            "type": "string"
          },
          "value": {
            "description": "The server's capability",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EngineSettingsUpdateArgs": {
        "description": "EngineSettingsUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EngineSettingsUpdateModel"
          }
        },
        "type": "object"
      },
      "EngineSettingsUpdateModel": {
        "description": "Data",
        "properties": {
          "adSyncEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "advancedAuditingEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "localAccountDiscoveryEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "logLevel": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalLog4NetLevel"
          },
          "passwordChangingEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "rdpProxyEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "secretWorkflowEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "securityAnalyticsEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "serviceAccountManagementEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "sshProxyEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "sshTerminalEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalLog4NetLevel": {
        "description": "Log Level",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SiteConnectorCreateArgs": {
        "description": "SiteConnectorCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SiteConnectorCreateModel"
          }
        },
        "type": "object"
      },
      "SiteConnectorCreateModel": {
        "description": "Site Connector Create Model",
        "properties": {
          "active": {
            "description": "Whether Site Connector is active or not",
            "type": "boolean"
          },
          "hostName": {
            "description": "Host Name of Site Connector",
            "type": "string"
          },
          "port": {
            "description": "Port of Site Connector",
            "type": "integer",
            "format": "int32"
          },
          "queueType": {
            "$ref": "#/components/schemas/MessageQueueType"
          },
          "sharedAccessKeyName": {
            "description": "Shared Access Key Name of Site Connector",
            "type": "string"
          },
          "sharedAccessKeyValue": {
            "description": "Shared Access Key Value of Site Connector",
            "type": "string"
          },
          "siteConnectorName": {
            "description": "Name of Site Connector",
            "type": "string"
          },
          "sslCertificateThumbprint": {
            "description": "SSL Certificate Thumbprint of Site Connector",
            "type": "string"
          },
          "useSsl": {
            "description": "Whether Site Connector uses SSL or not",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SiteConnectorValidationResult": {
        "description": "Result of site connector validation",
        "properties": {
          "validationMessage": {
            "description": "When false, may contain reason for failure",
            "type": "string"
          },
          "validationSuccess": {
            "description": "True if successfully validated",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EngineActivationRequestArgs": {
        "description": "EngineActivationRequestArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EngineActivationRequestModel"
          }
        },
        "type": "object"
      },
      "EngineActivationRequestModel": {
        "description": "Data",
        "properties": {
          "engines": {
            "description": "Engines",
            "items": {
              "$ref": "#/components/schemas/EngineStatusChangeModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EngineStatusChangeModel": {
        "description": "Change engine status",
        "properties": {
          "callbackInterval": {
            "description": "When activating an engine if SiteId is null this will be the default callback interval",
            "type": "integer",
            "format": "int32"
          },
          "changeType": {
            "$ref": "#/components/schemas/EngineStatusChangeType"
          },
          "engineId": {
            "description": "The ID of the engine to change status",
            "type": "integer",
            "format": "int32"
          },
          "siteConnectorId": {
            "description": "When activating an engine if SiteId is null this is the site connector that will be used.",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "When activating an engine SiteId is required",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "When activating an engine if SiteId is null you can pass a SiteName and it will create the site and then activate the engine",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EngineStatusChangeType": {
        "description": "The action to perform on the engine",
        "properties": {},
        "type": "string",
        "enum": [
          "Activate",
          "Deactivate",
          "RemoveFromSite",
          "Delete"
        ]
      },
      "EngineActivationResultModel": {
        "description": "EngineActivationResultModel",
        "properties": {
          "results": {
            "description": "Results",
            "items": {
              "$ref": "#/components/schemas/EngineActivationResult"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EngineActivationResult": {
        "description": "The result of the engine status update",
        "properties": {
          "engineId": {
            "description": "Engine ID",
            "type": "integer",
            "format": "int32"
          },
          "engineName": {
            "description": "The name of the engine",
            "type": "string"
          },
          "error": {
            "description": "If there was an error",
            "type": "string"
          },
          "success": {
            "description": "Whether or not the status change was successful",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SiteConnectivityValidationArgs": {
        "description": "SiteConnectivityValidationArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SiteConnectivityValidationModel"
          }
        },
        "type": "object"
      },
      "SiteConnectivityValidationModel": {
        "description": "Data",
        "properties": {
          "timeout": {
            "description": "Millisecond timeout length for testing connectivity.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SiteConnectivityValidationResult": {
        "description": "Result of site connectivity validation",
        "properties": {
          "validationMessage": {
            "description": "When false, may contain reason for failure",
            "type": "string"
          },
          "validationSuccess": {
            "description": "True if successfully validated",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SiteCreateArgs": {
        "description": "SiteCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SiteCreateModel"
          }
        },
        "type": "object"
      },
      "SiteCreateModel": {
        "description": "Site Create Model",
        "properties": {
          "active": {
            "description": "Is Site Active",
            "type": "boolean"
          },
          "enableCredSspForWinRm": {
            "description": "Enable CredSSP For WinRM",
            "type": "boolean"
          },
          "enableRdpProxy": {
            "description": "Enable RDP Proxy",
            "type": "boolean"
          },
          "enableSshProxy": {
            "description": "Enable SSH Proxy",
            "type": "boolean"
          },
          "heartbeatInterval": {
            "description": "Heartbeat Interval of Site",
            "type": "integer",
            "format": "int32"
          },
          "powershellSecretId": {
            "description": "Powershell Secret Id of Site if set",
            "type": "integer",
            "format": "int32"
          },
          "rdpProxyPort": {
            "description": "RDP Proxy Port",
            "type": "integer",
            "format": "int32"
          },
          "siteConnectorId": {
            "description": "Id of Site Connector of Site",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "Name of Site",
            "type": "string"
          },
          "sshProxyPort": {
            "description": "SSH Proxy Port",
            "type": "integer",
            "format": "int32"
          },
          "winRmEndPointUrl": {
            "description": "WinRM End Point URL of Site",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReassignSecretsArgs": {
        "description": "ReassignSecretsArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReassignSecretsModel"
          }
        },
        "type": "object"
      },
      "ReassignSecretsModel": {
        "description": "Data",
        "properties": {
          "disableSite": {
            "description": "Should the site be disabled as part of the reassign",
            "type": "boolean"
          },
          "newSiteId": {
            "description": "The new site ID to reassign to",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfDomainNameIndexSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DomainNameIndexSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DomainNameIndexSummary": {
        "description": "Query results",
        "properties": {
          "discoverySourceId": {
            "description": "DiscoverySourceId",
            "type": "integer",
            "format": "int32"
          },
          "discoverySourceIdScanned": {
            "description": "DiscoverySourceIdScanned",
            "type": "integer",
            "format": "int32"
          },
          "discoverySourceIdSuggested": {
            "description": "DiscoverySourceIdSuggested",
            "type": "integer",
            "format": "int32"
          },
          "domainMarkedAsIgnored": {
            "description": "DomainMarkedAsIgnored",
            "type": "boolean"
          },
          "domainNameDiscovered": {
            "description": "DomainNameDiscovered",
            "type": "string"
          },
          "domainNameIndexId": {
            "description": "DomainNameIndexId",
            "type": "integer",
            "format": "int32"
          },
          "domainResolveType": {
            "$ref": "#/components/schemas/DomainResolveType"
          },
          "expiredDate": {
            "description": "ExpiredDate",
            "type": "string",
            "format": "date-time"
          },
          "lastIndexedDate": {
            "description": "LastIndexedDate",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "DomainResolveType": {
        "description": "DomainResolveType",
        "properties": {},
        "type": "string",
        "enum": [
          "CouldNotResolve",
          "MatchedDomainInDb",
          "MatchedFQDNOrFriendlyOrNetBIOSInDb",
          "MatchedFriendlyNameWithAd",
          "ManualUserInputDiscoverySourceId"
        ]
      },
      "DomainNameIndexUpdateArgs": {
        "description": "DomainNameIndexUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DomainNameIndexUpdateModel"
          }
        },
        "type": "object"
      },
      "DomainNameIndexUpdateModel": {
        "description": "Data",
        "properties": {
          "discoverySourceIdSuggested": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "domainMarkedAsIgnored": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "DomainNameIndexModel": {
        "description": "Domain Name Index",
        "properties": {
          "discoverySourceId": {
            "description": "DiscoverySourceId",
            "type": "integer",
            "format": "int32"
          },
          "discoverySourceIdScanned": {
            "description": "DiscoverySourceIdScanned",
            "type": "integer",
            "format": "int32"
          },
          "discoverySourceIdSuggested": {
            "description": "DiscoverySourceIdSuggested",
            "type": "integer",
            "format": "int32"
          },
          "domainMarkedAsIgnored": {
            "description": "Indicates if the domain is marked As Ignored",
            "type": "boolean"
          },
          "domainNameDiscovered": {
            "description": "Domain Name Discovered",
            "type": "string"
          },
          "domainNameIndexId": {
            "description": "Domain Name Index Id",
            "type": "integer",
            "format": "int32"
          },
          "domainResolveType": {
            "$ref": "#/components/schemas/DomainResolveType"
          },
          "expiredDate": {
            "description": "Expired date",
            "type": "string",
            "format": "date-time"
          },
          "lastIndexedDate": {
            "description": "The date the domain was last indexed",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "DomainNameIndexCreateArgs": {
        "description": "DomainNameIndexCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DomainNameIndexCreateModel"
          }
        },
        "type": "object"
      },
      "DomainNameIndexCreateModel": {
        "description": "Data",
        "properties": {
          "discoverySourceIdSuggested": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "domainMarkedAsIgnored": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "domainNameDiscovered": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "DomainNameIndexExpireUpdateArgs": {
        "description": "DomainNameIndexExpireUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DomainNameIndexExpireUpdateModel"
          }
        },
        "type": "object"
      },
      "DomainNameIndexExpireUpdateModel": {
        "description": "Data",
        "properties": {
          "domainNameIndexId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "reIndexNow": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "DualControlModel": {
        "description": "Dual control",
        "properties": {
          "active": {
            "description": "Whether this dual control is active",
            "type": "boolean"
          },
          "dualControlApprovalGroups": {
            "description": "Dual control approval groups",
            "items": {
              "$ref": "#/components/schemas/IDualControlApprovalGroup"
            },
            "type": "array"
          },
          "dualControlTypeId": {
            "description": "Dual control type ID",
            "type": "integer",
            "format": "int32"
          },
          "dualControlTypeName": {
            "description": "Dual control type name",
            "type": "string"
          },
          "id": {
            "description": "Dual control ID",
            "type": "integer",
            "format": "int32"
          },
          "itemId": {
            "description": "Dual control item ID",
            "type": "integer",
            "format": "int32"
          },
          "itemName": {
            "description": "Dual control item name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IDualControlApprovalGroup": {
        "description": "Dual control approval groups",
        "properties": {
          "dualControlId": {
            "description": "DualControlId",
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "description": "Enabled",
            "type": "boolean"
          },
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "GroupName",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DualControlUpdateArgs": {
        "description": "Dual control update options",
        "required": [
          "id"
        ],
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "dualControlApprovalGroups": {
            "description": "Dual control approval groups",
            "items": {
              "$ref": "#/components/schemas/IDualControlApprovalGroup"
            },
            "type": "array"
          },
          "dualControlTypeId": {
            "description": "Dual control type",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "App client ID. Must match ID in path",
            "type": "integer",
            "format": "int32"
          },
          "itemId": {
            "description": "ItemId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DualControlStateModel": {
        "description": "Whether or not dual control access has been authorized",
        "properties": {
          "stateResult": {
            "$ref": "#/components/schemas/DualControlStateResultType"
          }
        },
        "type": "object"
      },
      "DualControlStateResultType": {
        "description": "The status for the dual control entity",
        "properties": {},
        "type": "string",
        "enum": [
          "ApprovalRequired",
          "AccessAllowed"
        ]
      },
      "PagingOfDualControlSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DualControlSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DualControlSummary": {
        "description": "Dual control summary",
        "properties": {
          "active": {
            "description": "Whether this dual control is active",
            "type": "boolean"
          },
          "dualControlTypeId": {
            "$ref": "#/components/schemas/DualControlType"
          },
          "dualControlTypeName": {
            "description": "Dual control type name",
            "type": "string"
          },
          "id": {
            "description": "Dual control ID",
            "type": "integer",
            "format": "int32"
          },
          "itemId": {
            "description": "Dual control item ID",
            "type": "integer",
            "format": "int32"
          },
          "itemName": {
            "description": "Dual control item name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DualControlType": {
        "description": "Dual control type ID",
        "properties": {},
        "type": "string",
        "enum": [
          "Report",
          "UserAuditReport",
          "Secret",
          "CreateReport",
          "AllSecretSessions"
        ]
      },
      "DualControlCreateArgs": {
        "description": "Dual control creation options",
        "properties": {
          "active": {
            "description": "Create the dual control as active or not",
            "type": "boolean"
          },
          "dualControlApprovalGroups": {
            "description": "Dual control approval groups",
            "items": {
              "$ref": "#/components/schemas/IDualControlApprovalGroup"
            },
            "type": "array"
          },
          "dualControlTypeId": {
            "description": "Dual control type ID",
            "type": "integer",
            "format": "int32"
          },
          "itemId": {
            "description": "ItemId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DualControlTypeModel": {
        "description": "DualControlTypeModel[]",
        "properties": {
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DualControlAuthArgs": {
        "description": "Dual control auth args ",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DualControlAuthDataModel"
          }
        },
        "type": "object"
      },
      "DualControlAuthDataModel": {
        "description": "Used to authorize dual controls",
        "properties": {
          "domain": {
            "description": "Domain for the user, null if local",
            "type": "integer",
            "format": "int32"
          },
          "password": {
            "description": "User password",
            "type": "string"
          },
          "twoFactorToken": {
            "description": "Two Factor Token to login",
            "type": "string"
          },
          "username": {
            "description": "Username that can login",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DualControlAuthResult": {
        "description": "The result of the authorization request",
        "properties": {
          "success": {
            "description": "True if the auth succeeded",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EnterpriseSearchResultModel": {
        "description": "Enterprise Search Result Model",
        "properties": {
          "data": {
            "description": "Date enterprise was accessed",
            "items": {
              "$ref": "#/components/schemas/EnterpriseSearchResultDataModel"
            },
            "type": "array"
          },
          "processEndDate": {
            "description": "Date process was completed",
            "type": "string",
            "format": "date-time"
          },
          "processStartDate": {
            "description": "Date process was started",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "EnterpriseSearchResultDataModel": {
        "description": "Enterprise Search Result Data Model",
        "properties": {
          "action": {
            "description": "Action taken on the accessed enterprise",
            "type": "string"
          },
          "dateRecorded": {
            "description": "Date enterprise was accessed",
            "type": "string",
            "format": "date-time"
          },
          "secretName": {
            "description": "Name of secret associated to the accessed enterprise",
            "type": "string"
          },
          "secretTemplateName": {
            "description": "Secret Template of secret associated to the accessed enterprise",
            "type": "string"
          },
          "userId": {
            "description": "Id of user that accessed the enterprise",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "Name of user that accessed the enterprise",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnterpriseSearchRequestArgs": {
        "description": "Arguments for an Enterprise Search Request",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EnterpriseSearchRequestFilter"
          }
        },
        "type": "object"
      },
      "EnterpriseSearchRequestFilter": {
        "description": "Enterprise Search Request Filter",
        "properties": {
          "endDate": {
            "description": "End Date of date range to filter",
            "type": "string",
            "format": "date-time"
          },
          "enterpriseName": {
            "description": "Specify this for filtering data by the Enterprise Name",
            "type": "string"
          },
          "requestFields": {
            "description": "Fields used for filtering results. At least one is required",
            "items": {
              "$ref": "#/components/schemas/EnterpriseSearchRequestFieldModel"
            },
            "type": "array"
          },
          "startDate": {
            "description": "Start Date of date range to filter",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "EnterpriseSearchRequestFieldModel": {
        "description": "Enterprise Search Request Field Model",
        "properties": {
          "fieldName": {
            "description": "Field of scan template to filter by",
            "type": "string"
          },
          "fieldValue": {
            "description": "Value of field to filter by",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnterpriseSearchRequestModel": {
        "description": "Enterprise Search Request Model",
        "properties": {
          "requestId": {
            "description": "Id of Request",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfEventPipelinePolicyAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/EventPipelinePolicyAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyAuditSummary": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "auditId": {
            "description": "Audit ID",
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "description": "Date",
            "type": "string"
          },
          "isPolicy": {
            "description": "Is Policy",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userDisplayName": {
            "description": "User Display Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventPipelineModel": {
        "description": "Event Pipeline",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "createdDate": {
            "description": "Event Pipeline Created Date",
            "type": "string",
            "format": "date-time"
          },
          "eventEntityTypeId": {
            "description": "Entity Type Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineDescription": {
            "description": "Event Pipeline Description",
            "type": "string"
          },
          "eventPipelineId": {
            "description": "Event Pipeline Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineName": {
            "description": "Event Pipeline Name",
            "type": "string"
          },
          "eventPipelinePolicyId": {
            "description": "Event Pipeline Policy Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyMapId": {
            "description": "Event Pipeline Policy Map Id",
            "type": "integer",
            "format": "int32"
          },
          "filterList": {
            "description": "Event Pipeline Filters",
            "items": {
              "$ref": "#/components/schemas/EventPipelineFilterModel"
            },
            "type": "array"
          },
          "isSystem": {
            "description": "Event pipeline used by the system",
            "type": "boolean"
          },
          "lastModifiedDate": {
            "description": "Event Pipeline Modified Date",
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedDisplayName": {
            "description": "Event Pipeline Last Modified Date",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort Order",
            "type": "integer",
            "format": "int32"
          },
          "taskList": {
            "description": "Event Pipeline Tasks",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTaskModel"
            },
            "type": "array"
          },
          "triggers": {
            "description": "Event Pipeline Triggers",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTriggerModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventPipelineFilterModel": {
        "description": "Event Pipeline Filter",
        "properties": {
          "eventEntityTypeId": {
            "description": "Event Entity Type Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineFilterDescription": {
            "description": "Event Pipeline Filter Description",
            "type": "string"
          },
          "eventPipelineFilterDisplayName": {
            "description": "Event Pipeline Filter Display Name",
            "type": "string"
          },
          "eventPipelineFilterId": {
            "description": "Event Pipeline Filter Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineFilterMapId": {
            "description": "Event Pipeline Filter Map Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineFilterName": {
            "description": "Event Pipeline Filter Name",
            "type": "string"
          },
          "settings": {
            "description": "Settings",
            "items": {
              "$ref": "#/components/schemas/EventPipelineFilterSettingValueMapModel"
            },
            "type": "array"
          },
          "sortOrder": {
            "description": "Sort Order",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineFilterSettingValueMapModel": {
        "description": "Event Pipeline Filter Setting Value Map",
        "properties": {
          "eventPipelineFilterMapId": {
            "description": "Event Pipeline Filter Map Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineFilterSettingValueMapId": {
            "description": "Event Pipeline Filter Setting Value Map Id",
            "type": "integer",
            "format": "int32"
          },
          "overrideDefault": {
            "description": "Whether to override the default value",
            "type": "boolean"
          },
          "setting": {
            "$ref": "#/components/schemas/SettingForDisplay"
          },
          "settingDisplay": {
            "description": "Setting Display",
            "type": "string"
          },
          "settingDisplayValue": {
            "description": "Setting Display Value",
            "type": "string"
          },
          "settingId": {
            "description": "Setting Id",
            "type": "integer",
            "format": "int32"
          },
          "settingValue": {
            "description": "Setting Value",
            "type": "string"
          },
          "usingDefault": {
            "description": "Whether or not to use the setting's default value.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SettingForDisplay": {
        "description": "Setting",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "canEdit": {
            "description": "CanEdit",
            "type": "boolean"
          },
          "canEditValue": {
            "description": "CanEditValue",
            "type": "boolean"
          },
          "childLoadSQL": {
            "description": "ChildLoadSQL",
            "type": "string"
          },
          "childSettings": {
            "description": "ChildSettings",
            "items": {
              "$ref": "#/components/schemas/Setting"
            },
            "type": "array"
          },
          "defaultValue": {
            "description": "DefaultValue",
            "type": "string"
          },
          "isVisible": {
            "description": "IsVisible",
            "type": "boolean"
          },
          "nameLocalizeKey": {
            "description": "NameLocalizeKey",
            "type": "string"
          },
          "parentSettingId": {
            "description": "ParentSettingId",
            "type": "integer",
            "format": "int32"
          },
          "regexValidation": {
            "description": "RegexValidation",
            "type": "string"
          },
          "settingId": {
            "description": "SettingId",
            "type": "integer",
            "format": "int32"
          },
          "settingName": {
            "description": "SettingName",
            "type": "string"
          },
          "settingSectionId": {
            "description": "SettingSectionId",
            "type": "integer",
            "format": "int32"
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "subSettingSectionId": {
            "description": "SubSettingSectionId",
            "type": "integer",
            "format": "int32"
          },
          "tooltipLocalizeKey": {
            "description": "TooltipLocalizeKey",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Setting": {
        "description": "ChildSettings",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "canEdit": {
            "description": "CanEdit",
            "type": "boolean"
          },
          "canEditValue": {
            "description": "CanEditValue",
            "type": "boolean"
          },
          "childLoadSQL": {
            "description": "ChildLoadSQL",
            "type": "string"
          },
          "defaultValue": {
            "description": "DefaultValue",
            "type": "string"
          },
          "isVisible": {
            "description": "IsVisible",
            "type": "boolean"
          },
          "nameLocalizeKey": {
            "description": "NameLocalizeKey",
            "type": "string"
          },
          "parentSettingId": {
            "description": "ParentSettingId",
            "type": "integer",
            "format": "int32"
          },
          "regexValidation": {
            "description": "RegexValidation",
            "type": "string"
          },
          "settingId": {
            "description": "SettingId",
            "type": "integer",
            "format": "int32"
          },
          "settingName": {
            "description": "SettingName",
            "type": "string"
          },
          "settingSectionId": {
            "description": "SettingSectionId",
            "type": "integer",
            "format": "int32"
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "subSettingSectionId": {
            "description": "SubSettingSectionId",
            "type": "integer",
            "format": "int32"
          },
          "tooltipLocalizeKey": {
            "description": "TooltipLocalizeKey",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SettingType": {
        "description": "SettingType",
        "properties": {},
        "type": "string",
        "enum": [
          "Default",
          "Integer",
          "String",
          "Boolean",
          "StringArray",
          "DropDown",
          "DropDownItem",
          "MultilineString",
          "IntegerArray"
        ]
      },
      "EventPipelineTaskModel": {
        "description": "Event Pipeline Task",
        "properties": {
          "eventEntityTypeId": {
            "description": "Event Entity Type Id",
            "type": "string"
          },
          "eventPipelineTaskDescription": {
            "description": "Event Pipeline Task Description",
            "type": "string"
          },
          "eventPipelineTaskDisplayName": {
            "description": "Event Pipeline Task Display Name",
            "type": "string"
          },
          "eventPipelineTaskId": {
            "description": "Event Pipeline Task Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskMapId": {
            "description": "Event Pipeline Task Map Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskName": {
            "description": "Event Pipeline Name",
            "type": "string"
          },
          "isMultiSelect": {
            "description": "Multiselect",
            "type": "boolean"
          },
          "settings": {
            "description": "Settings",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTaskSettingValueMapModel"
            },
            "type": "array"
          },
          "sortOrder": {
            "description": "Sort ORder",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineTaskSettingValueMapModel": {
        "description": "Event Pipeline Task Setting Value Map",
        "properties": {
          "eventPipelineTaskMapId": {
            "description": "Event Pipeline Task Map Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskSettingValueMapId": {
            "description": "Event Pipeline Task Setting Value Map Id",
            "type": "integer",
            "format": "int32"
          },
          "overrideDefault": {
            "description": "Override Default",
            "type": "boolean"
          },
          "setting": {
            "$ref": "#/components/schemas/SettingForDisplay"
          },
          "settingDisplay": {
            "description": "Setting Display",
            "type": "string"
          },
          "settingDisplayValue": {
            "description": "Setting Display Value",
            "type": "string"
          },
          "settingId": {
            "description": "Setting Id",
            "type": "integer",
            "format": "int32"
          },
          "settingValue": {
            "description": "Setting Value",
            "type": "string"
          },
          "usingDefault": {
            "description": "Whether or not to use the setting's default value.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelineTriggerModel": {
        "description": "Event Pipeline Trigger",
        "properties": {
          "entityTypeDisplayName": {
            "description": "Entity Type Display Name",
            "type": "string"
          },
          "eventActionId": {
            "description": "Event Action Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineId": {
            "description": "Event Pipeline Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTriggerId": {
            "description": "Event Pipeline Trigger Id",
            "type": "integer",
            "format": "int32"
          },
          "triggerDisplayName": {
            "description": "Trigger Display Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventPipelineUpdateArgs": {
        "description": "EventPipelineUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventPipelineUpdateModel"
          }
        },
        "type": "object"
      },
      "EventPipelineUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "eventPipelineDescription": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "eventPipelineName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "filters": {
            "$ref": "#/components/schemas/UpdateFieldValueOfEventPipelineFilterMapUpdateModelArray"
          },
          "tasks": {
            "$ref": "#/components/schemas/UpdateFieldValueOfEventPipelineTaskMapUpdateModelArray"
          },
          "triggers": {
            "$ref": "#/components/schemas/UpdateFieldValueOfEventPipelineTriggerUpdateModelArray"
          }
        },
        "type": "object"
      },
      "EventPipelineFilterMapUpdateModel": {
        "description": "Value",
        "properties": {
          "eventPipelineFilterId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "eventPipelineFilterMapId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "eventPipelineFilterName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "settings": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSettingUpdateModelArray"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "SettingUpdateModel": {
        "description": "Value",
        "properties": {
          "settingName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "settingValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "EventPipelineTaskMapUpdateModel": {
        "description": "Value",
        "properties": {
          "eventPipelineTaskId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "eventPipelineTaskMapId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "eventPipelineTaskName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "settings": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSettingUpdateModelArray"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "EventPipelineTriggerUpdateModel": {
        "description": "Value",
        "properties": {
          "eventActionId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "PagingOfEventPipelineViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/EventPipelineViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineViewModel": {
        "description": "Query results",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "createdDate": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfDateTime"
          },
          "eventEntityTypeId": {
            "description": "EventEntityTypeId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineDescription": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "eventPipelineId": {
            "description": "EventPipelineId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineName": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "eventPipelinePolicyId": {
            "description": "EventPipelinePolicyId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyMapId": {
            "description": "EventPipelinePolicyMapId",
            "type": "integer",
            "format": "int32"
          },
          "filterList": {
            "description": "FilterList",
            "items": {
              "$ref": "#/components/schemas/EventPipelineFilterViewModel"
            },
            "type": "array"
          },
          "isSystem": {
            "description": "IsSystem",
            "type": "boolean"
          },
          "lastModifiedDate": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfDateTime"
          },
          "lastModifiedDisplayName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "taskList": {
            "description": "TaskList",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTaskViewModel"
            },
            "type": "array"
          },
          "triggers": {
            "description": "Triggers",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTriggerViewModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventPipelineFilterViewModel": {
        "description": "FilterList",
        "properties": {
          "eventEntityTypeId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfOptionalInt32"
          },
          "eventPipelineFilterDescription": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "eventPipelineFilterDisplayName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "eventPipelineFilterId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "eventPipelineFilterMapId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfInt32"
          },
          "eventPipelineFilterName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "settings": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfEventPipelineFilterSettingValueMapViewModelArray"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfInt32"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfOptionalInt32": {
        "description": "EventEntityTypeId",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineFilterSettingValueMapViewModel": {
        "description": "Value",
        "properties": {
          "eventPipelineFilterMapId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "eventPipelineFilterSettingValueMapId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfOptionalInt32"
          },
          "overrideDefault": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "setting": {
            "$ref": "#/components/schemas/ViewFieldValueOfSettingForDisplay"
          },
          "settingDisplay": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "settingDisplayValue": {
            "description": "SettingDisplayValue",
            "type": "string"
          },
          "settingId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "settingValue": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "usingDefault": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfSettingForDisplay": {
        "description": "Setting",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/SettingForDisplay"
          }
        },
        "type": "object"
      },
      "EventPipelineTaskViewModel": {
        "description": "TaskList",
        "properties": {
          "eventEntityTypeId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfOptionalEventEntityTypeEnum"
          },
          "eventPipelineTaskDescription": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "eventPipelineTaskDisplayName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "eventPipelineTaskId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "eventPipelineTaskMapId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfInt32"
          },
          "eventPipelineTaskName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "isMultiSelect": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfBoolean"
          },
          "settings": {
            "$ref": "#/components/schemas/ViewFieldValueOfEventPipelineTaskSettingValueMapViewModelArray"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfOptionalEventEntityTypeEnum": {
        "description": "EventEntityTypeId",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfBoolean": {
        "description": "IsMultiSelect",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelineTaskSettingValueMapViewModel": {
        "description": "Value",
        "properties": {
          "eventPipelineTaskMapId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "eventPipelineTaskSettingValueMapId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfOptionalInt32"
          },
          "overrideDefault": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "setting": {
            "$ref": "#/components/schemas/ViewFieldValueOfSettingForDisplay"
          },
          "settingDisplay": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "settingDisplayValue": {
            "description": "SettingDisplayValue",
            "type": "string"
          },
          "settingId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "settingValue": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "usingDefault": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "EventPipelineTriggerViewModel": {
        "description": "Triggers",
        "properties": {
          "entityTypeDisplayName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "eventActionId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "eventEntityTypeId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfOptionalEventEntityTypeEnum"
          },
          "eventPipelineId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfInt32"
          },
          "eventPipelineTriggerId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "triggerDisplayName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          }
        },
        "type": "object"
      },
      "PagingOfEventPipelineSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/EventPipelineSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineSummaryModel": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "createdDate": {
            "description": "Event Pipeline Created Date",
            "type": "string",
            "format": "date-time"
          },
          "eventEntityTypeId": {
            "description": "Entity Type Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineDescription": {
            "description": "Event Pipeline Description",
            "type": "string"
          },
          "eventPipelineId": {
            "description": "Event Pipeline Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineName": {
            "description": "Event Pipeline Name",
            "type": "string"
          },
          "eventPipelinePolicyId": {
            "description": "Event Pipeline Policy Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyMapId": {
            "description": "Event Pipeline Policy Map Id",
            "type": "integer",
            "format": "int32"
          },
          "isSystem": {
            "description": "Event pipeline used by the system",
            "type": "boolean"
          },
          "lastModifiedDate": {
            "description": "Event Pipeline Modified Date",
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedDisplayName": {
            "description": "Event Pipeline Last Modified Date",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort Order",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipeline": {
        "description": "EventPipeline",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "createdDate": {
            "description": "CreatedDate",
            "type": "string",
            "format": "date-time"
          },
          "eventEntityTypeId": {
            "description": "EventEntityTypeId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineDescription": {
            "description": "EventPipelineDescription",
            "type": "string"
          },
          "eventPipelineId": {
            "description": "EventPipelineId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineName": {
            "description": "EventPipelineName",
            "type": "string"
          },
          "eventPipelinePolicyId": {
            "description": "EventPipelinePolicyId",
            "type": "integer",
            "format": "int32"
          },
          "isSystem": {
            "description": "IsSystem",
            "type": "boolean"
          },
          "lastModifiedDate": {
            "description": "LastModifiedDate",
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedUser": {
            "description": "LastModifiedUser",
            "type": "string"
          },
          "lastModifiedUserId": {
            "description": "LastModifiedUserId",
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfEventPipelineRunViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/EventPipelineRunViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineRunViewModel": {
        "description": "Query results",
        "properties": {
          "description": {
            "description": "Description",
            "type": "string"
          },
          "duration": {
            "description": "Duration",
            "type": "string"
          },
          "endDate": {
            "description": "EndDate",
            "type": "string",
            "format": "date-time"
          },
          "entityTypeName": {
            "description": "EntityTypeName",
            "type": "string"
          },
          "eventDateTime": {
            "description": "EventDateTime",
            "type": "string",
            "format": "date-time"
          },
          "eventDetails": {
            "description": "EventDetails",
            "type": "string"
          },
          "eventName": {
            "description": "EventName",
            "type": "string"
          },
          "eventPipelineId": {
            "description": "EventPipelineId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyRunId": {
            "description": "EventPipelinePolicyRunId",
            "type": "string",
            "format": "uuid"
          },
          "itemId": {
            "description": "ItemId",
            "type": "integer",
            "format": "int32"
          },
          "itemName": {
            "description": "ItemName",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "queuedDate": {
            "description": "QueuedDate",
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "description": "StartDate",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/EventPipelineStatus"
          }
        },
        "type": "object"
      },
      "EventPipelineStatus": {
        "description": "Status",
        "properties": {},
        "type": "string",
        "enum": [
          "Failed",
          "Success",
          "Skipped",
          "Processing",
          "Pending",
          "Scheduled"
        ]
      },
      "EventPipelineCreateArgs": {
        "description": "EventPipelineCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventPipelineUpdateModel"
          },
          "eventEntityTypeId": {
            "description": "EventEntityTypeId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyId": {
            "description": "EventPipelinePolicyId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineOrderUpdateArgs": {
        "description": "EventPipelineOrderUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventPipelineOrderUpdateModel"
          }
        },
        "type": "object"
      },
      "EventPipelineOrderUpdateModel": {
        "description": "Data",
        "properties": {
          "eventPipelinePolicyId": {
            "description": "EventPipelinePolicyId",
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyMap": {
        "description": "EventPipelinePolicyMap[]",
        "properties": {
          "eventPipelineId": {
            "description": "EventPipelineId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyId": {
            "description": "EventPipelinePolicyId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyMapId": {
            "description": "EventPipelinePolicyMapId",
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineActivateUpdateArgs": {
        "description": "EventPipelineActivateUpdateArgs",
        "properties": {
          "activate": {
            "description": "Activate",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyModel": {
        "description": "Event Pipeline Policy",
        "properties": {
          "active": {
            "description": "If the Policy is Active",
            "type": "boolean"
          },
          "createdDate": {
            "description": "The Date the Policy was created",
            "type": "string",
            "format": "date-time"
          },
          "eventEntityTypeId": {
            "description": "Event Pipeline Type Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyDescription": {
            "description": "Event Pipeline Policy Description",
            "type": "string"
          },
          "eventPipelinePolicyId": {
            "description": "Event Pipeline Policy Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyName": {
            "description": "Event Pipeline Policy Name",
            "type": "string"
          },
          "isSystem": {
            "description": "Event pipeline policy used by the system",
            "type": "boolean"
          },
          "lastModifiedDate": {
            "description": "The Date the Policy was last modified",
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedDisplayName": {
            "description": "The display name of the user who last modified the Policy",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort Order",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyAddPipelineArgs": {
        "description": "EventPipelinePolicyAddPipelineArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventPipelinePolicyAddPipelineModel"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyAddPipelineModel": {
        "description": "Data",
        "properties": {
          "eventPipelineId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyMapModel": {
        "description": "Event Pipeline Policy Map",
        "properties": {
          "eventPipelineId": {
            "description": "Event Pipeline Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyId": {
            "description": "Event Pipeline Policy Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyMapId": {
            "description": "Event Pipeline Policy Map Id",
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "description": "Sort Order",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyUpdateArgs": {
        "description": "EventPipelinePolicyUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventPipelinePolicyUpdateModel"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "eventPipelinePolicyDescription": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "eventPipelinePolicyName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "PagingOfEventPipelinePolicySummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/EventPipelinePolicySummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicySummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "createdDate": {
            "description": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "eventEntityTypeId": {
            "description": "Event Entity Type ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyDescription": {
            "description": "Event Pipeline Policy Description",
            "type": "string"
          },
          "eventPipelinePolicyId": {
            "description": "Event Pipeline Policy ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelinePolicyName": {
            "description": "Event Pipeline Policy Name",
            "type": "string"
          },
          "isSystem": {
            "description": "Is System",
            "type": "boolean"
          },
          "lastModifiedDate": {
            "description": "Last Modified Date",
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedDisplayName": {
            "description": "Last Modified Display Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyRunActivityViewModel": {
        "description": "EventPipelinePolicyRunActivityViewModel[]",
        "properties": {
          "duration": {
            "description": "Duration",
            "type": "string"
          },
          "endDateTime": {
            "description": "EndDateTime",
            "type": "string",
            "format": "date-time"
          },
          "eventAction": {
            "description": "EventAction",
            "type": "string"
          },
          "eventEntityType": {
            "description": "EventEntityType",
            "type": "string"
          },
          "eventPipelineDescription": {
            "description": "EventPipelineDescription",
            "type": "string"
          },
          "eventPipelineId": {
            "description": "EventPipelineId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineName": {
            "description": "EventPipelineName",
            "type": "string"
          },
          "eventPipelinePolicyRunId": {
            "description": "EventPipelinePolicyRunId",
            "type": "string",
            "format": "uuid"
          },
          "eventPipelineTaskDescription": {
            "description": "EventPipelineTaskDescription",
            "type": "string"
          },
          "eventPipelineTaskId": {
            "description": "EventPipelineTaskId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskName": {
            "description": "EventPipelineTaskName",
            "type": "string"
          },
          "itemId": {
            "description": "ItemId",
            "type": "integer",
            "format": "int32"
          },
          "itemName": {
            "description": "ItemName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "queuedDateTime": {
            "description": "QueuedDateTime",
            "type": "string",
            "format": "date-time"
          },
          "runOrder": {
            "description": "RunOrder",
            "type": "integer",
            "format": "int32"
          },
          "startDateTime": {
            "description": "StartDateTime",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/EventPipelineStatus"
          }
        },
        "type": "object"
      },
      "PagingOfSecretPolicyViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretPolicyViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPolicyViewModel": {
        "description": "Query results",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "secretPolicyDescription": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "secretPolicyId": {
            "description": "SecretPolicyId",
            "type": "integer",
            "format": "int32"
          },
          "secretPolicyName": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          }
        },
        "type": "object"
      },
      "FolderSimpleViewModel": {
        "description": "FolderSimpleViewModel[]",
        "properties": {
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "path": {
            "description": "Path",
            "type": "string"
          },
          "restricted": {
            "description": "Restricted",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyFolderMapUpdateArgs": {
        "description": "EventPipelinePolicyFolderMapUpdateArgs",
        "properties": {
          "data": {
            "description": "Data",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserGroupSearchResultModel": {
        "description": "UserGroupSearchResultModel[]",
        "properties": {
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "domainName": {
            "description": "DomainName",
            "type": "string"
          },
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyGroupMapUpdateArgs": {
        "description": "EventPipelinePolicyGroupMapUpdateArgs",
        "properties": {
          "data": {
            "description": "Data",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyFolderChildData": {
        "description": "EventPipelinePolicyFolderChildData[]",
        "properties": {
          "childFolderCount": {
            "description": "ChildFolderCount",
            "type": "integer",
            "format": "int32"
          },
          "folderId": {
            "description": "FolderId",
            "type": "integer",
            "format": "int32"
          },
          "hasPipelinePolicy": {
            "description": "HasPipelinePolicy",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyCreateArgs": {
        "description": "EventPipelinePolicyCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventPipelinePolicyCreateModel"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyCreateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "eventEntityTypeId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "eventPipelinePolicyDescription": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "eventPipelinePolicyName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "externalInstanceId": {
            "description": "ExternalInstanceId",
            "type": "string",
            "format": "uuid"
          },
          "isSystem": {
            "description": "IsSystem",
            "type": "boolean"
          },
          "pipelines": {
            "$ref": "#/components/schemas/UpdateFieldValueOfEventPipelineUpdateModelArray"
          },
          "reuseExistingPipelines": {
            "description": "ReuseExistingPipelines",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyImportArgs": {
        "description": "EventPipelinePolicyImportArgs",
        "properties": {
          "data": {
            "description": "Data",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicySortOrderUpdateArgs": {
        "description": "EventPipelinePolicySortOrderUpdateArgs",
        "properties": {
          "newSortOrder": {
            "description": "NewSortOrder",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelinePolicyActivateArgs": {
        "description": "EventPipelinePolicyActivateArgs",
        "properties": {
          "activate": {
            "description": "Activate",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfEventPipelineTask": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTask"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineTask": {
        "description": "Query results",
        "properties": {
          "eventEntityTypeId": {
            "description": "EventEntityTypeId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskDescription": {
            "description": "EventPipelineTaskDescription",
            "type": "string"
          },
          "eventPipelineTaskId": {
            "description": "EventPipelineTaskId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskName": {
            "description": "EventPipelineTaskName",
            "type": "string"
          },
          "isMultiSelect": {
            "description": "IsMultiSelect",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelineTaskSettingMapSummary": {
        "description": "EventPipelineTaskSettingMapSummary[]",
        "properties": {
          "eventPipelineTaskId": {
            "description": "Event Pipeline Task ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskSettingMapId": {
            "description": "Event Pipeline Task Setting Map ID",
            "type": "integer",
            "format": "int32"
          },
          "setting": {
            "$ref": "#/components/schemas/SettingForDisplay"
          },
          "settingDisplay": {
            "description": "Setting Display",
            "type": "string"
          },
          "settingId": {
            "description": "Setting ID",
            "type": "integer",
            "format": "int32"
          },
          "settingValue": {
            "description": "Setting Value",
            "type": "string"
          },
          "sortOrder": {
            "description": "Event Pipeline Sort Order",
            "type": "integer",
            "format": "int32"
          },
          "usingDefault": {
            "description": "Using Default",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelineFilterSettingMapSummary": {
        "description": "EventPipelineFilterSettingMapSummary[]",
        "properties": {
          "eventPipelineFilterId": {
            "description": "Event Pipeline Filter ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineFilterSettingMapId": {
            "description": "Event Pipeline Filter Setting Map ID",
            "type": "integer",
            "format": "int32"
          },
          "setting": {
            "$ref": "#/components/schemas/SettingForDisplay"
          },
          "settingDisplay": {
            "description": "Setting Display",
            "type": "string"
          },
          "settingId": {
            "description": "Setting ID",
            "type": "integer",
            "format": "int32"
          },
          "settingValue": {
            "description": "Setting Value",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort Order",
            "type": "integer",
            "format": "int32"
          },
          "usingDefault": {
            "description": "Using Default",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventPipelineTaskSummary": {
        "description": "EventPipelineTaskSummary[]",
        "properties": {
          "eventEntityTypeId": {
            "description": "Event Entity Type ID",
            "type": "string"
          },
          "eventPipelineTaskDescription": {
            "description": "Event Pipeline Task Description",
            "type": "string"
          },
          "eventPipelineTaskDisplayName": {
            "description": "Event Pipeline Task Display Name",
            "type": "string"
          },
          "eventPipelineTaskId": {
            "description": "Event Pipeline Task ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskMapId": {
            "description": "Event Pipeline Task Map ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTaskName": {
            "description": "Event Pipeline Task Name",
            "type": "string"
          },
          "isMultiSelect": {
            "description": "Is Multi Select",
            "type": "boolean"
          },
          "sortOrder": {
            "description": "Sort Order",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineFilterSummary": {
        "description": "EventPipelineFilterSummary[]",
        "properties": {
          "eventEntityTypeId": {
            "description": "Event Entity Type ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineFilterDescription": {
            "description": "Event Pipeline Filter Description",
            "type": "string"
          },
          "eventPipelineFilterDisplayName": {
            "description": "Event Pipeline Filter Display Name",
            "type": "string"
          },
          "eventPipelineFilterId": {
            "description": "Event Pipeline Filter Id",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineFilterMapId": {
            "description": "Event Pipeline Filter Map ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineFilterName": {
            "description": "Event Pipeline Filter Name",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort Order",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventPipelineTriggerSummary": {
        "description": "EventPipelineTriggerSummary[]",
        "properties": {
          "entityTypeDisplayName": {
            "description": "Entity Type Display Name",
            "type": "string"
          },
          "eventActionId": {
            "description": "Event Action ID ID",
            "type": "integer",
            "format": "int32"
          },
          "eventEntityTypeId": {
            "description": "Event Entity Type ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineId": {
            "description": "Event Pipeline ID",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTriggerId": {
            "description": "Event Pipeline Trigger ID",
            "type": "integer",
            "format": "int32"
          },
          "triggerDisplayName": {
            "description": "Trigger Display Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventPipelineTrigger": {
        "description": "EventPipelineTrigger",
        "properties": {
          "entityTypeDisplayName": {
            "description": "EntityTypeDisplayName",
            "type": "string"
          },
          "eventActionId": {
            "description": "EventActionId",
            "type": "integer",
            "format": "int32"
          },
          "eventActionName": {
            "description": "EventActionName",
            "type": "string"
          },
          "eventEntityTypeId": {
            "description": "EventEntityTypeId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineId": {
            "description": "EventPipelineId",
            "type": "integer",
            "format": "int32"
          },
          "eventPipelineTriggerId": {
            "description": "EventPipelineTriggerId",
            "type": "integer",
            "format": "int32"
          },
          "triggerDisplayName": {
            "description": "TriggerDisplayName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionStubViewModel": {
        "description": "EventSubscriptionStubViewModel",
        "properties": {
          "sendEmail": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "sendSlack": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "EntityTypeModel": {
        "description": "EntityTypeModel[]",
        "properties": {
          "actions": {
            "description": "The list of actions available for the entity",
            "items": {
              "$ref": "#/components/schemas/EventSubscriptionTypeActionModel"
            },
            "type": "array"
          },
          "conditionTypeOptions": {
            "description": "The list of condition type options available for the entity",
            "items": {
              "$ref": "#/components/schemas/EventSubscriptionConditionTypeOptionModel"
            },
            "type": "array"
          },
          "displayName": {
            "description": "The localized name of the entity type, such as Secret, IP Address Range, or Folder",
            "type": "string"
          },
          "entity": {
            "$ref": "#/components/schemas/EventSubscriptionEntity"
          },
          "id": {
            "$ref": "#/components/schemas/EventSubscriptionEntity"
          }
        },
        "type": "object"
      },
      "EventSubscriptionTypeActionModel": {
        "description": "The list of actions available for the entity",
        "properties": {
          "conditions": {
            "description": "A list of available conditions to apply to the action/entity combination",
            "items": {
              "$ref": "#/components/schemas/EventSubscriptionConditionType"
            },
            "type": "array"
          },
          "displayName": {
            "description": "The localized name",
            "type": "string"
          },
          "eventActionId": {
            "description": "The ID of the event action",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventSubscriptionConditionType": {
        "description": "A list of available conditions to apply to the action/entity combination",
        "properties": {},
        "type": "string",
        "enum": [
          "All",
          "InFolder",
          "ShowSubfolder",
          "ThisFolder",
          "Secret",
          "User",
          "Group",
          "Role",
          "Permission",
          "PasswordChanger",
          "PasswordRequirement",
          "CharacterSet"
        ]
      },
      "EventSubscriptionConditionTypeOptionModel": {
        "description": "The list of condition type options available for the entity",
        "properties": {
          "optionId": {
            "description": "OptionId",
            "type": "integer",
            "format": "int32"
          },
          "optionName": {
            "description": "OptionName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionEntity": {
        "description": "The type of item that can be monitored.  Secret, folder, engine, etc..",
        "properties": {},
        "type": "string",
        "enum": [
          "User",
          "Folder",
          "Role",
          "RolePermission",
          "Configuration",
          "Group",
          "IpAddressRange",
          "Secret",
          "UnlimitedAdmin",
          "ExportSecrets",
          "ImportSecrets",
          "UserAudit",
          "SecretTemplate",
          "Licenses",
          "ScriptPowerShell",
          "SecretPolicy",
          "ScriptSsh",
          "ScriptSql",
          "Encryption",
          "Site",
          "Engine",
          "SiteConnector",
          "SecurityAnalyticsConfiguration",
          "DualControl",
          "Tls",
          "PasswordChanger",
          "CharacterSet",
          "PasswordRequirement",
          "Domain",
          "BackupConfiguration",
          "SecretServerSettings",
          "AutoExport",
          "SshProxy",
          "RdpProxy",
          "Node",
          "DisasterRecovery",
          "Platform",
          "Other"
        ]
      },
      "PagingOfEventSubscriptionSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/EventSubscriptionSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EventSubscriptionSummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "eventSubscriptionId": {
            "description": "EventSubscriptionId",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionCreateArgs": {
        "description": "EventSubscriptionCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventSubscriptionCreateModel"
          }
        },
        "type": "object"
      },
      "EventSubscriptionCreateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "entityActions": {
            "description": "EntityActions",
            "items": {
              "$ref": "#/components/schemas/EventSubscriptionEntityActionModel"
            },
            "type": "array"
          },
          "sendEmail": {
            "description": "SendEmail",
            "type": "boolean"
          },
          "sendSlack": {
            "description": "SendSlack",
            "type": "boolean"
          },
          "subscriptionName": {
            "description": "SubscriptionName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionEntityActionModel": {
        "description": "EntityActions",
        "properties": {
          "conditionType": {
            "$ref": "#/components/schemas/EventSubscriptionConditionType"
          },
          "containerId": {
            "description": "ContainerId",
            "type": "integer",
            "format": "int32"
          },
          "containerName": {
            "description": "Indicates the name of the container, only set on a get.  Not needed on an update",
            "type": "string"
          },
          "eventActionDisplayName": {
            "description": "EventActionDisplayName",
            "type": "string"
          },
          "eventActionId": {
            "description": "EventActionId",
            "type": "integer",
            "format": "int32"
          },
          "eventEntityType": {
            "$ref": "#/components/schemas/EventSubscriptionEntity"
          },
          "eventEntityTypeDisplayName": {
            "description": "EventEntityTypeDisplayName",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "includeSubcontainers": {
            "description": "IncludeSubcontainers",
            "type": "boolean"
          },
          "itemId": {
            "description": "ItemId",
            "type": "integer",
            "format": "int32"
          },
          "itemName": {
            "description": "ItemName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionModel": {
        "description": "An event subscription",
        "properties": {
          "active": {
            "description": "Is subscription active",
            "type": "boolean"
          },
          "entityActions": {
            "description": "A list of the entity actions that file the subscription",
            "items": {
              "$ref": "#/components/schemas/EventSubscriptionEntityActionModel"
            },
            "type": "array"
          },
          "eventSeverity": {
            "description": "The event severity",
            "type": "integer",
            "format": "int32"
          },
          "eventSubscriptionId": {
            "description": "The ID of the event subscription",
            "type": "integer",
            "format": "int32"
          },
          "inboxExpiration": {
            "description": "Nuber of days for the message to stay in the inbox",
            "type": "integer",
            "format": "int32"
          },
          "subscribers": {
            "description": "A list of the groups subscribed to the event",
            "items": {
              "$ref": "#/components/schemas/EventSubscriptionSubscriberModel"
            },
            "type": "array"
          },
          "subscriptionName": {
            "description": "The name of the event subscription",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventSubscriptionSubscriberModel": {
        "description": "A list of the groups subscribed to the event",
        "properties": {
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "isGroup": {
            "description": "IsGroup",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EventSubscriptionUpdateArgs": {
        "description": "EventSubscriptionUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventSubscriptionUpdateModel"
          }
        },
        "type": "object"
      },
      "EventSubscriptionUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "entityActions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfEventSubscriptionEntityActionModelArray"
          },
          "inboxExpiration": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "subscribers": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "subscriptionName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "RegexValuesSummary": {
        "description": "Regex Values Summary",
        "properties": {
          "regexList": {
            "description": "List of Regex values on the Secret, mapped to the Extended Field",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FolderPermissionModel": {
        "description": "Folder permission",
        "properties": {
          "folderAccessRoleId": {
            "description": "Role ID granted on the folder",
            "type": "integer",
            "format": "int32"
          },
          "folderAccessRoleName": {
            "description": "Role name granted on the folder",
            "type": "string"
          },
          "folderId": {
            "description": "Folder ID",
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "Group ID having permissions on the folder",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group name having permissions on the folder",
            "type": "string"
          },
          "id": {
            "description": "Folder permission ID",
            "type": "integer",
            "format": "int32"
          },
          "knownAs": {
            "description": "KnownAs",
            "type": "string"
          },
          "secretAccessRoleId": {
            "description": "Role ID granted on secrets in the folder",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleName": {
            "description": "Role name granted on secrets in the folder",
            "type": "string"
          },
          "userId": {
            "description": "User ID having permissions on the folder",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name having permissions on the folder",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FolderPermissionUpdateArgs": {
        "description": "Folder permission update options",
        "required": [
          "id",
          "folderId",
          "folderAccessRoleName"
        ],
        "properties": {
          "breakInheritance": {
            "description": "Allow updating of inherited permissions",
            "type": "boolean",
            "default": true
          },
          "folderAccessRoleName": {
            "description": "Role to grant on the folder (View, Edit, Add Secret, Owner)",
            "type": "string"
          },
          "folderId": {
            "description": "Folder ID",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Folder permission ID. Must match ID in path",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleName": {
            "description": "Role to grant on secrets in the folder (View, Edit, List, Owner, None)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfFolderPermissionSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/FolderPermissionSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderPermissionSummary": {
        "description": "Folder permission summary",
        "properties": {
          "folderAccessRoleId": {
            "description": "Role ID granted on the folder",
            "type": "integer",
            "format": "int32"
          },
          "folderAccessRoleName": {
            "description": "Role name granted on the folder",
            "type": "string"
          },
          "folderId": {
            "description": "Folder ID",
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "Group ID having permissions on the folder",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group name having permissions on the folder",
            "type": "string"
          },
          "id": {
            "description": "Folder permission ID",
            "type": "integer",
            "format": "int32"
          },
          "knownAs": {
            "description": "KnownAs",
            "type": "string"
          },
          "secretAccessRoleId": {
            "description": "Role ID granted on secrets in the folder",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleName": {
            "description": "Role name granted on secrets in the folder",
            "type": "string"
          },
          "userId": {
            "description": "User ID having permissions on the folder",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name having permissions on the folder",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FolderPermissionCreateArgs": {
        "description": "FolderPermissionCreateArgs",
        "properties": {
          "breakInheritance": {
            "description": "Allow updating of inherited permissions",
            "type": "boolean",
            "default": true
          },
          "folderAccessRoleName": {
            "description": "Role to grant on the folder (View, Edit, Add Secret, Owner)",
            "type": "string"
          },
          "folderId": {
            "description": "Folder on which to grant permissions",
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "Group to receive permissions",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleName": {
            "description": "Role to grant on secrets in the folder (View, Edit, List, Owner, None)",
            "type": "string"
          },
          "userId": {
            "description": "User to receive permissions",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderModel": {
        "description": "Describes the properties of a secret folder",
        "properties": {
          "childFolders": {
            "description": "List of folders within this folder",
            "items": {
              "$ref": "#/components/schemas/IFolderModel"
            },
            "type": "array"
          },
          "folderName": {
            "description": "The name of the folder.",
            "type": "string"
          },
          "folderPath": {
            "description": "The path of all folders and subfolders beginning at the root anterminating at this folder.",
            "type": "string"
          },
          "folderTypeId": {
            "description": "The icon to display for the folder. Depricated in latest UI. Use 1 when setting this value.",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Folder ID",
            "type": "integer",
            "format": "int32"
          },
          "inheritPermissions": {
            "description": "Whether the folder should inherit permissions from its parent (default: true)",
            "type": "boolean"
          },
          "inheritSecretPolicy": {
            "description": "Whether the folder should inherit the secret policy.  Defaults to true unless creating a root folder.",
            "type": "boolean"
          },
          "parentFolderId": {
            "description": "The ID of this folder's parent folder.",
            "type": "integer",
            "format": "int32"
          },
          "secretPolicyId": {
            "description": "The id of the Secret Policy that sets security and other settings on secrets contained within the folder.",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplates": {
            "description": "List of templates that may be used to create secrets in this folder",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateSummary"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IFolderModel": {
        "description": "Describes the properties of a secret folder",
        "properties": {
          "childFolders": {
            "description": "List of folders within this folder",
            "items": {
              "$ref": "#/components/schemas/IFolderModel"
            },
            "type": "array"
          },
          "folderName": {
            "description": "Folder name",
            "type": "string"
          },
          "folderPath": {
            "description": "Path of this folder",
            "type": "string"
          },
          "folderTypeId": {
            "description": "Folder type ID",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Folder ID",
            "type": "integer",
            "format": "int32"
          },
          "inheritPermissions": {
            "description": "Whether the folder inherits permissions from its parent",
            "type": "boolean"
          },
          "inheritSecretPolicy": {
            "description": "Whether the folder inherits the secret policy",
            "type": "boolean"
          },
          "parentFolderId": {
            "description": "Parent folder ID",
            "type": "integer",
            "format": "int32"
          },
          "secretPolicyId": {
            "description": "Secret policy ID",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplates": {
            "description": "Secret templates associated with this folder",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateSummary"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretTemplateSummary": {
        "description": "Secret template summary",
        "properties": {
          "active": {
            "description": "Is Secret template active",
            "type": "boolean"
          },
          "id": {
            "description": "Secret template ID",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Secret template name",
            "type": "string"
          },
          "passwordTypeId": {
            "description": "Password Type that the secret template uses for password change",
            "type": "integer",
            "format": "int32"
          },
          "secretCount": {
            "description": "Number of Secrets associated to the template. Only populated when IncludeCount is set to true.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderUpdateArgs": {
        "description": "Available options for updating a secret folder",
        "required": [
          "id",
          "folderTypeId",
          "folderName"
        ],
        "properties": {
          "folderName": {
            "description": "The name of the folder",
            "type": "string"
          },
          "folderTypeId": {
            "description": "The icon to display for the folder. Depricated in latest UI. Use 1 when setting this value.",
            "type": "integer",
            "format": "int32",
            "maximum": 3,
            "minimum": 1
          },
          "id": {
            "description": "Folder ID. Must match ID in path",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "inheritPermissions": {
            "description": "Whether the folder should inherit permissions from its parent (default: true)",
            "type": "boolean"
          },
          "inheritSecretPolicy": {
            "description": "Whether the folder should inherit the secret policy.  Defaults to true unless creating a root folder.",
            "type": "boolean"
          },
          "parentFolderId": {
            "description": "The ID of this folder's parent folder.",
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "secretPolicyId": {
            "description": "The id of the Secret Policy that sets security and other settings on secrets contained within the folder.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UnpinFolderResultModel": {
        "description": "Indicates if the folder was pinned successfully",
        "properties": {
          "success": {
            "description": "True to indicate success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PinFolderArgs": {
        "description": "PinFolderArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PinFolderData"
          }
        },
        "type": "object"
      },
      "PinFolderData": {
        "description": "Used to update pinned folder settings",
        "properties": {
          "activeFilter": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "displayName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "includeSubfolders": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "lastViewed": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalDateTime"
          },
          "searchText": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "selectedFolderId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "showCards": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "templateFilter": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalDateTime": {
        "description": "Update when the pinned folder was last viewed",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "PinFolderResultModel": {
        "description": "Indicates if the folder was pinned successfully",
        "properties": {
          "success": {
            "description": "True to indicate success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfFolderSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/FolderSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderSummary": {
        "description": "Representation of a secret folder object",
        "properties": {
          "folderName": {
            "description": "The name of the folder",
            "type": "string"
          },
          "folderPath": {
            "description": "The path of all folders and subfolders beginning at the root anterminating at this folder.",
            "type": "string"
          },
          "folderTypeId": {
            "description": "The icon to display for the folder. Depricated in latest UI. Use 1 when setting this value.",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Folder ID",
            "type": "integer",
            "format": "int32"
          },
          "inheritPermissions": {
            "description": "Whether the folder should inherit permissions from its parent (default: true)",
            "type": "boolean"
          },
          "inheritSecretPolicy": {
            "description": "Whether the folder should inherit the secret policy.  Defaults to true unless creating a root folder.",
            "type": "boolean"
          },
          "parentFolderId": {
            "description": "The ID of this folder's parent folder.",
            "type": "integer",
            "format": "int32"
          },
          "secretPolicyId": {
            "description": "The id of the Secret Policy that sets security and other settings on secrets contained within the folder.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderCreateArgs": {
        "description": "Available options for creating a secret folder",
        "required": [
          "folderName",
          "folderTypeId",
          "parentFolderId"
        ],
        "properties": {
          "folderName": {
            "description": "The name of the folder.",
            "type": "string"
          },
          "folderTypeId": {
            "description": "The icon to display for the folder. Depricated in latest UI. Use 1 when setting this value.",
            "type": "integer",
            "format": "int32",
            "maximum": 3,
            "minimum": 1
          },
          "inheritPermissions": {
            "description": "Whether the folder should inherit permissions from its parent (default: true)",
            "type": "boolean"
          },
          "inheritSecretPolicy": {
            "description": "Whether the folder should inherit the secret policy.  Defaults to true unless creating a root folder.",
            "type": "boolean"
          },
          "parentFolderId": {
            "description": "The id of this folder's parent folder.",
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "secretPolicyId": {
            "description": "The id of the Secret Policy that sets security and other settings on secrets contained within the folder.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfFolderLookup": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/FolderLookup"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderLookup": {
        "description": "Simple folder representation",
        "properties": {
          "id": {
            "description": "Folder ID",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Folder name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfFolderAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/FolderAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderAuditSummary": {
        "description": "Folder Audit Summary",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "auditFolderId": {
            "description": "Audit Folder Id",
            "type": "integer",
            "format": "int32"
          },
          "dateRecorded": {
            "description": "Date Recorded",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "Display Name",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FolderDetailViewModel": {
        "description": "FolderDetailViewModel",
        "properties": {
          "actions": {
            "description": "Actions",
            "items": {
              "$ref": "#/components/schemas/FolderDetailActionType"
            },
            "type": "array"
          },
          "allowedTemplates": {
            "description": "AllowedTemplates",
            "items": {
              "$ref": "#/components/schemas/TemplateViewModel"
            },
            "type": "array"
          },
          "folderWarning": {
            "description": "FolderWarning",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FolderDetailActionType": {
        "description": "Actions",
        "properties": {},
        "type": "string",
        "enum": [
          "CreateSubfolder",
          "EditFolder",
          "AddSecret",
          "DeleteFolder",
          "MoveFolder"
        ]
      },
      "TemplateViewModel": {
        "description": "Template View Model",
        "properties": {
          "id": {
            "description": "Template Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Template Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfPinnedFolderModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/PinnedFolderModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PinnedFolderModel": {
        "description": "A folder that a user has pinned",
        "properties": {
          "activeFilter": {
            "description": "Active Filter",
            "type": "boolean"
          },
          "createDate": {
            "description": "When was this folder pinned",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "The display name to show.  This will be the folder name or an overridable user defined name for this pin",
            "type": "string"
          },
          "folderId": {
            "description": "The pinned folder ID.  This folder will be the root of the tree",
            "type": "integer",
            "format": "int32"
          },
          "includeSubfolders": {
            "description": "Include Subfolders",
            "type": "boolean"
          },
          "lastViewed": {
            "description": "When was this folder last viewed",
            "type": "string",
            "format": "date-time"
          },
          "searchText": {
            "description": "Search Text",
            "type": "string"
          },
          "selectedFolderId": {
            "description": "Expand this folder in the tree",
            "type": "integer",
            "format": "int32"
          },
          "showCards": {
            "description": "Show Cards",
            "type": "boolean"
          },
          "templateFilter": {
            "description": "Template Filter",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderPatchArgs": {
        "description": "FolderPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FolderPatchModel"
          }
        },
        "type": "object"
      },
      "FolderPatchModel": {
        "description": "Data",
        "properties": {
          "allowedTemplates": {
            "description": "AllowedTemplates",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "allowRemoveOwner": {
            "description": "AllowRemoveOwner",
            "type": "boolean"
          },
          "enableInheritPermissions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableInheritSecretPolicy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "folderName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "permissons": {
            "description": "Permissons",
            "items": {
              "$ref": "#/components/schemas/FolderPermissionModel"
            },
            "type": "array"
          },
          "secretPolicy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "FolderBasicModel": {
        "description": "FolderBasicModel",
        "properties": {
          "allowedTemplates": {
            "description": "Allowed Templates",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "enableInheritPermissions": {
            "description": "Should the folder inherit permissions from the parent folder",
            "type": "boolean"
          },
          "enableInheritSecretPolicy": {
            "description": "Should the folder inherit the secret policy from the parent folder",
            "type": "boolean"
          },
          "folderName": {
            "description": "The dispay name for the folder",
            "type": "string"
          },
          "hasEdit": {
            "description": "If the user can edit the folder",
            "type": "boolean"
          },
          "hasOwner": {
            "description": "If the user owns the folder",
            "type": "boolean"
          },
          "isPersonalFolder": {
            "description": "Whether or not this is a personal folder",
            "type": "boolean"
          },
          "parentFolderId": {
            "description": "The ID of the parent folder",
            "type": "integer",
            "format": "int32"
          },
          "parentFolderPolicyName": {
            "description": "Policy name on the parent folder",
            "type": "string"
          },
          "secretPolicies": {
            "description": "SecretPolicies",
            "items": {
              "$ref": "#/components/schemas/SecretPolicyModel"
            },
            "type": "array"
          },
          "secretPolicy": {
            "description": "The secret policy ID that is assigned to the folder",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplates": {
            "description": "Secret Templates",
            "items": {
              "$ref": "#/components/schemas/TemplateViewModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretPolicyModel": {
        "description": "SecretPolicies",
        "properties": {
          "active": {
            "description": "Whether or not the Secret Policy is Active",
            "type": "boolean"
          },
          "secretPolicyDescription": {
            "description": "The Description of the Secret Policy",
            "type": "string"
          },
          "secretPolicyId": {
            "description": "The Id of the Secret Policy",
            "type": "integer",
            "format": "int32"
          },
          "secretPolicyName": {
            "description": "The Name of the Secret Policy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FolderPermissionsPatchArgs": {
        "description": "FolderPermissionsPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FolderPermissionsPatchData"
          }
        },
        "type": "object"
      },
      "FolderPermissionsPatchData": {
        "description": "Apply a subset of permission changes to a folder.  This does not replace existing permissions.",
        "properties": {
          "addOrUpdateItems": {
            "description": "All of these groups permissions will be added or updated on the folder",
            "items": {
              "$ref": "#/components/schemas/FolderPermissionsGroupUpdateModel"
            },
            "type": "array"
          },
          "allowRemoveOwner": {
            "description": "When false this call will fail if your request would remove the current user as able to edit.  When true, you can remove your access to the folder.",
            "type": "boolean"
          },
          "inheritPermissions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "removeItems": {
            "description": "All of these groups or users will be removed from the folder permissions for this folder",
            "items": {
              "$ref": "#/components/schemas/FolderPermissionsGroupModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FolderPermissionsGroupUpdateModel": {
        "description": "All of these groups permissions will be added or updated on the folder",
        "properties": {
          "folderAccessRoleId": {
            "description": "FolderAccessRoleId",
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "The group id of the group or personal group id for the user to update",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleId": {
            "description": "SecretAccessRoleId",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "The user id of the user.  If GroupId is populated this field will be ignored and can be null",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderPermissionsGroupModel": {
        "description": "All of these groups or users will be removed from the folder permissions for this folder",
        "properties": {
          "groupId": {
            "description": "The group id of the group or personal group id for the user to update",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "The user id of the user.  If GroupId is populated this field will be ignored and can be null",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FolderPermissionsPatchResultModel": {
        "description": "FolderPermissionsPatchResultModel",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FolderTemplateArgs": {
        "description": "Available options for associating a template to a folder",
        "required": [
          "folderId",
          "templateId"
        ],
        "properties": {
          "folderId": {
            "description": "Folder ID to associate. Must match ID in path",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "templateId": {
            "description": "Template ID to associate",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          }
        },
        "type": "object"
      },
      "FolderTemplateModel": {
        "description": "Describes the properties of a folder/template association",
        "properties": {
          "associated": {
            "description": "Whether the template is associated with the folder",
            "type": "boolean"
          },
          "folderId": {
            "description": "Folder ID",
            "type": "integer",
            "format": "int32"
          },
          "templateId": {
            "description": "Template ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupModel": {
        "description": "Group",
        "properties": {
          "adGuid": {
            "description": "Active Directory unique identifier",
            "type": "string"
          },
          "canEditMembers": {
            "description": "Whether you can edit the members of this group.  For example, Directory Services group members cannot be edited.  Populated on a single group get.",
            "type": "boolean"
          },
          "created": {
            "description": "Group created date",
            "type": "string",
            "format": "date-time"
          },
          "domainId": {
            "description": "Active Directory Domain ID",
            "type": "integer",
            "format": "int32"
          },
          "domainName": {
            "description": "Active Directory domain name",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the group is active",
            "type": "boolean"
          },
          "hasGroupOwners": {
            "description": "If true, the group is owned by specific other users/groups. If false, if it is owned by Group Administrators.",
            "type": "boolean"
          },
          "id": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRestrictions": {
            "description": "Array of IP Address Restrictions for the group.",
            "items": {
              "$ref": "#/components/schemas/GroupIpAddressRestrictionSummaryModel"
            },
            "type": "array"
          },
          "isEditable": {
            "description": "Whether you have permission to edit this group",
            "type": "boolean"
          },
          "isPlatform": {
            "description": "Whether the group is a Platform Group",
            "type": "boolean"
          },
          "name": {
            "description": "Group name",
            "type": "string"
          },
          "ownerGroups": {
            "$ref": "#/components/schemas/DictionaryOfInt32AndString"
          },
          "owners": {
            "description": "The owners for the group, both users and groups",
            "items": {
              "$ref": "#/components/schemas/GroupOwner"
            },
            "type": "array"
          },
          "ownerUsers": {
            "$ref": "#/components/schemas/DictionaryOfInt32AndString"
          },
          "synchronized": {
            "description": "Whether the group is synchronized with Active Directory",
            "type": "boolean"
          },
          "synchronizeNow": {
            "description": "Active Directory Sync will only pull in members for domain groups that have this set to true.",
            "type": "boolean"
          },
          "systemGroup": {
            "description": "Whether the group is an Active Directory system group",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GroupIpAddressRestrictionSummaryModel": {
        "description": "Group IP Address Restriction Model",
        "properties": {
          "id": {
            "description": "Id of Address Restriction",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name of IP Address Restriction",
            "type": "string"
          },
          "range": {
            "description": "Range of IP Address Restriction",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DictionaryOfInt32AndString": {
        "description": "Hash of GroupIds and GroupNames that own this group. Only used if HasGroupOwners is true.",
        "properties": {},
        "type": "object"
      },
      "GroupOwner": {
        "description": "The owners for the group",
        "properties": {
          "groupId": {
            "description": "The group ID, or personal group ID in the case of a user",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The display name for the user or group",
            "type": "string"
          },
          "userId": {
            "description": "The user ID, or null in the case of a group",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupUpdateArgs": {
        "description": "Group update options",
        "required": [
          "id"
        ],
        "properties": {
          "adGuid": {
            "description": "The Object GUID of the Active Directory Group (Hexadecimal)",
            "type": "string"
          },
          "domainId": {
            "description": "Active Directory Domain ID",
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "description": "Whether the group is active",
            "type": "boolean"
          },
          "hasGroupOwners": {
            "description": "If true, the group is owned by specific other users/groups. If false, if it is owned by Group Administrators.",
            "type": "boolean"
          },
          "id": {
            "description": "Group ID. Must match ID in path",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "isPlatform": {
            "description": "Whether the group is a Platform Group",
            "type": "boolean"
          },
          "name": {
            "description": "Group name",
            "type": "string"
          },
          "ownerGroupIds": {
            "description": "List of owner GroupIds. Only used if HasGroupOwners is true.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "ownerGroupNames": {
            "description": "List of owner Group Names. Only used if HasGroupOwners is true.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ownerUserIds": {
            "description": "List of owner UserIds. Only used if HasGroupOwners is true.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "ownerUserNames": {
            "description": "List of owner Usernames. Only used if HasGroupOwners is true.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "synchronized": {
            "description": "Whether the group is synchronized with Active Directory",
            "type": "boolean"
          },
          "synchronizeNow": {
            "description": "Active Directory Sync will only pull in members for domain groups that have this set to true.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GroupUserModel": {
        "description": "Represents a single user's membership in a group",
        "properties": {
          "groupDomainId": {
            "description": "Group Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group name",
            "type": "string"
          },
          "userDomainId": {
            "description": "User Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfRoleSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/RoleSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RoleSummary": {
        "description": "Role Summary",
        "properties": {
          "name": {
            "description": "Role Name",
            "type": "string"
          },
          "roleId": {
            "description": "Role ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RoleAssignments": {
        "description": "Roles to be assigned",
        "properties": {
          "roleIds": {
            "description": "Role IDs",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RoleChangeStatusModel": {
        "description": "The status of the Role change action.",
        "properties": {
          "success": {
            "description": "The success or failure of the user or group role action.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RoleRemovals": {
        "description": "Roles to be removed",
        "properties": {
          "roleIds": {
            "description": "Role IDs",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PagingOfGroupSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/GroupSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupSummary": {
        "description": "Group summary",
        "properties": {
          "created": {
            "description": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "domainGuid": {
            "description": "If this a synchronized group and the user requesting access has access this will be populated with the unique guid for the directory with a group search.",
            "type": "string"
          },
          "domainId": {
            "description": "Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "domainName": {
            "description": "Active Directory domain name",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the group is active",
            "type": "boolean"
          },
          "id": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "isPlatform": {
            "description": "If this is synchronized with Platform",
            "type": "boolean"
          },
          "memberCount": {
            "description": "Number of members in group",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Group name",
            "type": "string"
          },
          "synchronized": {
            "description": "Whether the group is synchronized with Active Directory",
            "type": "boolean"
          },
          "synchronizeNow": {
            "description": "Active Directory Sync will only pull in members for domain groups that have this set to true.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GroupCreateArgs": {
        "description": "Group create options",
        "required": [
          "name",
          "enabled"
        ],
        "properties": {
          "adGuid": {
            "description": "The Object GUID of the Active Directory Group (Hexadecimal)",
            "type": "string"
          },
          "domainId": {
            "description": "Active Directory Domain ID",
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "description": "Whether the group is active",
            "type": "boolean"
          },
          "hasGroupOwners": {
            "description": "If true, the group is owned by specific other users/groups. If false, if it is owned by Group Administrators.",
            "type": "boolean"
          },
          "isPlatform": {
            "description": "Whether the group is a Platform Group",
            "type": "boolean"
          },
          "name": {
            "description": "Group name",
            "type": "string"
          },
          "ownerGroupIds": {
            "description": "List of owner GroupIds. Only used if HasGroupOwners is true.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "ownerGroupNames": {
            "description": "List of owner Group Names. Only used if HasGroupOwners is true.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ownerUserIds": {
            "description": "List of owner UserIds. Only used if HasGroupOwners is true.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "ownerUserNames": {
            "description": "List of owner Usernames. Only used if HasGroupOwners is true.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "synchronized": {
            "description": "Whether the group is synchronized with Active Directory",
            "type": "boolean"
          },
          "synchronizeNow": {
            "description": "Active Directory Sync will only pull in members for domain groups that have this set to true.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfGroupLookup": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/GroupLookup"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupLookup": {
        "description": "Simple group representation",
        "properties": {
          "id": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Group name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfGroupUserSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/GroupUserSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupUserSummary": {
        "description": "Query results",
        "properties": {
          "displayName": {
            "description": "User display name",
            "type": "string"
          },
          "enabled": {
            "description": "User Enabled",
            "type": "boolean"
          },
          "groupDomainId": {
            "description": "Group Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "groupDomainName": {
            "description": "Group Domain Name",
            "type": "string"
          },
          "groupId": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group name",
            "type": "string"
          },
          "userDomainId": {
            "description": "User Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "userDomainName": {
            "description": "User Active Directory domain name",
            "type": "string"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupUserCreateArgs": {
        "description": "Group memberhsip create options",
        "properties": {
          "userId": {
            "description": "User ID to add",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupMembershipPatchModel": {
        "description": "Patch group membership",
        "properties": {
          "addedUserIds": {
            "description": "Only the group IDs to add as members",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "removeUserIds": {
            "description": "Only the group IDs to removed as members",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupMembershipPatchResult": {
        "description": "GroupMembershipPatchResult",
        "properties": {
          "success": {
            "description": "Success of the patch",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfAdminAuditItem": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/AdminAuditItem"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AdminAuditItem": {
        "description": "Audit entries for administration items",
        "properties": {
          "action": {
            "description": "The action that occurred",
            "type": "string"
          },
          "dateRecorded": {
            "description": "The date the audit entry was recorded",
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "description": "Extended information for the audit",
            "type": "string"
          },
          "userDisplayName": {
            "description": "Display Name for the user that made the audit",
            "type": "string"
          },
          "userId": {
            "description": "The user id of the user that made the audit",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupUsersLookupViewModel": {
        "description": "GroupUsersLookupViewModel",
        "properties": {
          "users": {
            "description": "Users",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupPatchArgs": {
        "description": "GroupPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GroupPatchModel"
          }
        },
        "type": "object"
      },
      "GroupPatchModel": {
        "description": "Patch group",
        "properties": {
          "addedOwnerGroupIds": {
            "description": "Only the group IDs to add as owners, this take precedence over the OwnerGroupIds",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "enabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "ipAddressRestrictionIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "ownerGroupIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "removedOwnerGroupIds": {
            "description": "Only the group IDs to removed as owners, this take precedence over the OwnerGroupIds",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupMemberAssignmentRequest": {
        "description": "GroupMemberAssignmentRequest",
        "properties": {
          "userIds": {
            "description": "This list will be the exact members for the group",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupMembershipAssignmentResponse": {
        "description": "GroupMembershipAssignmentResponse",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HealthCheckModel": {
        "description": "HealthCheckModel",
        "properties": {
          "databaseHealthy": {
            "description": "DatabaseHealthy",
            "type": "boolean"
          },
          "databaseMismatch": {
            "description": "DatabaseMismatch",
            "type": "boolean"
          },
          "healthy": {
            "description": "Healthy",
            "type": "boolean"
          },
          "now": {
            "description": "Now",
            "type": "string",
            "format": "date-time"
          },
          "provisionDeletionDateTime": {
            "description": "ProvisionDeletionDateTime",
            "type": "string",
            "format": "date-time"
          },
          "readOnlyMode": {
            "description": "ReadOnlyMode",
            "type": "boolean"
          },
          "scheduledForDeletion": {
            "description": "ScheduledForDeletion",
            "type": "boolean"
          },
          "serviceBusHealthy": {
            "description": "ServiceBusHealthy",
            "type": "boolean"
          },
          "storageAccountHealthy": {
            "description": "StorageAccountHealthy",
            "type": "boolean"
          },
          "utcNow": {
            "description": "UtcNow",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "PagingOfHsmConfigurationAuditViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/HsmConfigurationAuditViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "HsmConfigurationAuditViewModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "date": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "displayName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "hsmConfigurationAuditId": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfInt32"
          },
          "notes": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          }
        },
        "type": "object"
      },
      "InboxResourceData": {
        "description": "Inbox Resource Data",
        "properties": {
          "imageData": {
            "description": "Resource Image Data as Base64 string",
            "type": "string",
            "format": "binary"
          },
          "imageType": {
            "$ref": "#/components/schemas/InboxResourceType"
          },
          "inboxResourceId": {
            "description": "Inbox Resource Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Inbox Resource Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxResourceType": {
        "description": "Resource Image Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Jpg",
          "Png"
        ]
      },
      "InboxResourceDeleteResponse": {
        "description": "Response message when deleting an inbox resource",
        "properties": {
          "success": {
            "description": "Did the delete succeed",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfInboxMessageSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/InboxMessageSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxMessageSummary": {
        "description": "Summary of an inbox message",
        "properties": {
          "data": {
            "description": "All data fields for this messages",
            "items": {
              "$ref": "#/components/schemas/InboxMessageData"
            },
            "type": "array"
          },
          "details": {
            "description": "A common data field on all notifications",
            "type": "string"
          },
          "expirationDate": {
            "description": "Within 24 hours of this date this message and all related history will be removed",
            "type": "string",
            "format": "date-time"
          },
          "inboxMessageTypeId": {
            "description": "The type of message id",
            "type": "integer",
            "format": "int32"
          },
          "inboxMessageTypeName": {
            "description": "The message type name",
            "type": "string"
          },
          "isRead": {
            "description": "Has the current user read this message",
            "type": "boolean"
          },
          "messageCreatedDate": {
            "description": "When was the message created",
            "type": "string",
            "format": "date-time"
          },
          "messageId": {
            "description": "Message ID",
            "type": "integer",
            "format": "int32"
          },
          "recipients": {
            "description": "Who has recieved this message",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InboxMessageData": {
        "description": "All data fields for this messages",
        "properties": {
          "displayValue": {
            "description": "DisplayValue",
            "type": "string"
          },
          "inboxDataId": {
            "description": "InboxDataId",
            "type": "integer",
            "format": "int32"
          },
          "inboxDataName": {
            "description": "InboxDataName",
            "type": "string"
          },
          "valueBool": {
            "description": "ValueBool",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "ValueDateTime",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "ValueInt",
            "type": "integer",
            "format": "int32"
          },
          "valueString": {
            "description": "ValueString",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxData": {
        "description": "InboxData[]",
        "properties": {
          "createdByUserId": {
            "description": "CreatedByUserId",
            "type": "integer",
            "format": "int32"
          },
          "createdDate": {
            "description": "CreatedDate",
            "type": "string",
            "format": "date-time"
          },
          "inboxDataId": {
            "description": "InboxDataId",
            "type": "integer",
            "format": "int32"
          },
          "inboxDataName": {
            "description": "InboxDataName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfInboxTemplateModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/InboxTemplateModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxTemplateModel": {
        "description": "Query results",
        "properties": {
          "isSystem": {
            "description": "Is System",
            "type": "boolean"
          },
          "rules": {
            "description": "Rules leveraging this Template",
            "items": {
              "$ref": "#/components/schemas/InboxRuleModel"
            },
            "type": "array"
          },
          "templateId": {
            "description": "Inbox Template Id",
            "type": "integer",
            "format": "int32"
          },
          "templateName": {
            "description": "Inbox Template Name",
            "type": "string"
          },
          "templateType": {
            "$ref": "#/components/schemas/InboxTemplateType"
          }
        },
        "type": "object"
      },
      "InboxRuleModel": {
        "description": "Rules leveraging this Template",
        "properties": {
          "inboxRuleId": {
            "description": "Inbox Rule Id",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleName": {
            "description": "The name of the rule",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxTemplateType": {
        "description": "Template Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Email",
          "Slack"
        ]
      },
      "InboxTemplateCreateArgs": {
        "description": "InboxTemplateCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxTemplateCreateModel"
          }
        },
        "type": "object"
      },
      "InboxTemplateCreateModel": {
        "description": "Data",
        "properties": {
          "templateName": {
            "description": "TemplateName",
            "type": "string"
          },
          "templateType": {
            "$ref": "#/components/schemas/InboxTemplateType"
          }
        },
        "type": "object"
      },
      "InboxTemplateDetailModel": {
        "description": "InboxTemplateDetailModel",
        "properties": {
          "isSystem": {
            "description": "IsSystem",
            "type": "boolean"
          },
          "locale": {
            "description": "Locale",
            "type": "integer",
            "format": "int32"
          },
          "templateId": {
            "description": "TemplateId",
            "type": "integer",
            "format": "int32"
          },
          "templateName": {
            "description": "TemplateName",
            "type": "string"
          },
          "templateType": {
            "$ref": "#/components/schemas/InboxTemplateType"
          }
        },
        "type": "object"
      },
      "InboxTemplateUpdateArgs": {
        "description": "InboxTemplateUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxTemplateUpdateModel"
          }
        },
        "type": "object"
      },
      "InboxTemplateUpdateModel": {
        "description": "Data",
        "properties": {
          "templateName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "templateType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInboxTemplateType"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfInboxTemplateType": {
        "description": "TemplateType",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/InboxTemplateType"
          }
        },
        "type": "object"
      },
      "InboxTemplateLocaleModel": {
        "description": "InboxTemplateLocaleModel",
        "properties": {
          "localeCultureId": {
            "description": "LocaleCultureId",
            "type": "integer",
            "format": "int32"
          },
          "subject": {
            "description": "Subject",
            "type": "string"
          },
          "templateBody": {
            "description": "TemplateBody",
            "type": "string"
          },
          "templateId": {
            "description": "TemplateId",
            "type": "integer",
            "format": "int32"
          },
          "templateLocaleId": {
            "description": "TemplateLocaleId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxTemplateLocaleUpdateArgs": {
        "description": "InboxTemplateLocaleUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxTemplateLocaleUpdateModel"
          }
        },
        "type": "object"
      },
      "InboxTemplateLocaleUpdateModel": {
        "description": "Data",
        "properties": {
          "subject": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "templateBody": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "InboxMessageTypeSummary": {
        "description": "InboxMessageTypeSummary[]",
        "properties": {
          "inboxMessageTypeId": {
            "description": "Message Type ID",
            "type": "integer",
            "format": "int32"
          },
          "inboxMessageTypeName": {
            "description": "The name of the message type",
            "type": "string"
          },
          "notificationCount": {
            "description": "Populated with the number of notifications the current user has of this message type.  Only populated when ",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfInboxResourceSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/InboxResourceSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxResourceSummary": {
        "description": "Query results",
        "properties": {
          "inboxResourceId": {
            "description": "InboxResourceId",
            "type": "integer",
            "format": "int32"
          },
          "inboxResourceSlug": {
            "description": "InboxResourceSlug",
            "type": "string"
          },
          "inboxResourceType": {
            "$ref": "#/components/schemas/InboxResourceType"
          }
        },
        "type": "object"
      },
      "InboxResourceUploadArgs": {
        "description": "InboxResourceUploadArgs",
        "properties": {
          "blob": {
            "description": "Uploaded file (used for file attachment fields with \"Content-Type: multipart/form-data\")",
            "type": "file"
          },
          "fileAttachment": {
            "description": "Binary file data (used for file attachment fields with \"Content-Type: application/json\")",
            "type": "string",
            "format": "binary"
          },
          "fileName": {
            "description": "File name (used for file attachment fields with \"Content-Type: application/json\"))",
            "type": "string"
          },
          "slug": {
            "description": "The unique resource slug.  Must be lowercase with no spaces or special characters except for hyphens.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AlertNotificationsWrapper": {
        "description": "AlertNotificationsWrapper",
        "properties": {
          "hasNewNotifications": {
            "description": "HasNewNotifications",
            "type": "boolean"
          },
          "systemAlerts": {
            "description": "SystemAlerts",
            "items": {
              "$ref": "#/components/schemas/AlertNotification"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AlertNotification": {
        "description": "SystemAlerts",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "alertDate": {
            "description": "AlertDate",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "isRead": {
            "description": "IsRead",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "notificationId": {
            "description": "NotificationId",
            "type": "string",
            "format": "uuid"
          },
          "notificationType": {
            "$ref": "#/components/schemas/AlertNotificationType"
          },
          "type": {
            "$ref": "#/components/schemas/AlertNotificationStatus"
          }
        },
        "type": "object"
      },
      "AlertNotificationType": {
        "description": "NotificationType",
        "properties": {},
        "type": "string",
        "enum": [
          "EventSubscription",
          "SecretApproval",
          "ApplicationAccessRequest",
          "SystemAlert",
          "SecretEraseRequest"
        ]
      },
      "AlertNotificationStatus": {
        "description": "Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Normal",
          "Critical",
          "RequiresInteraction"
        ]
      },
      "NotificationStatusModel": {
        "description": "NotificationStatusModel",
        "properties": {
          "hasAlerts": {
            "description": "HasAlerts",
            "type": "boolean"
          },
          "notificationsLastViewed": {
            "description": "NotificationsLastViewed",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "InboxTestMessageArgs": {
        "description": "InboxTestMessageArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxTestMessageModel"
          }
        },
        "type": "object"
      },
      "InboxTestMessageModel": {
        "description": "Data",
        "properties": {
          "groupId": {
            "description": "The group ID to send the message.  If omitted the message is sent to the current user.",
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "description": "The actual message",
            "type": "string"
          },
          "subject": {
            "description": "The subject of the message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxTestMessageResult": {
        "description": "InboxTestMessageResult",
        "properties": {
          "emailConfigured": {
            "description": "EmailConfigured",
            "type": "boolean"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InboxTemplateCopyArgs": {
        "description": "InboxTemplateCopyArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxTemplateCopyModel"
          }
        },
        "type": "object"
      },
      "InboxTemplateCopyModel": {
        "description": "Inbox Template Copy Model",
        "properties": {
          "inboxTemplateIdToCopy": {
            "description": "InboxTemplateId To Copy",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxTemplateLocaleCreateArgs": {
        "description": "InboxTemplateLocaleCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxTemplateLocaleCreateModel"
          }
        },
        "type": "object"
      },
      "InboxTemplateLocaleCreateModel": {
        "description": "Data",
        "properties": {
          "inboxTemplateId": {
            "description": "InboxTemplateId",
            "type": "integer",
            "format": "int32"
          },
          "localeCultureId": {
            "description": "LocaleCultureId",
            "type": "integer",
            "format": "int32"
          },
          "subject": {
            "description": "Subject",
            "type": "string"
          },
          "templateBody": {
            "description": "TemplateBody",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxMessageSetMessageReadStatusArgs": {
        "description": "InboxMessageSetMessageReadStatusArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxMessageSetMessageReadStatusModel"
          }
        },
        "type": "object"
      },
      "InboxMessageSetMessageReadStatusModel": {
        "description": "Data",
        "properties": {
          "messageIds": {
            "description": "MessageIds",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "read": {
            "description": "Read",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AlertNotificationReadEventArgs": {
        "description": "AlertNotificationReadEventArgs",
        "properties": {
          "notificationId": {
            "description": "NotificationId",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "AlertNotificationUnreadEventArgs": {
        "description": "AlertNotificationUnreadEventArgs",
        "properties": {
          "notificationId": {
            "description": "NotificationId",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "InboxRuleSubscriptionUpdateResponse": {
        "description": "InboxRuleSubscriptionUpdateResponse",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfInboxRuleSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/InboxRuleSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxRuleSummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Whether or not this rule is active",
            "type": "boolean"
          },
          "currentUserSubscribed": {
            "description": "Only populated when IncludeCurrentUserSubscriptionStatus is passed as true on a rule search",
            "type": "boolean"
          },
          "digest": {
            "description": "Whether or not this rule is for a Digest that runs on a schedule.",
            "type": "boolean"
          },
          "inboxRuleId": {
            "description": "Inbox Rule ID",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleName": {
            "description": "The name of the rule",
            "type": "string"
          },
          "isSystem": {
            "description": "Whether or not this rule is a system rule",
            "type": "boolean"
          },
          "notificationTypes": {
            "description": "Notification Types where this rule is used",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "usageCount": {
            "description": "Number of times this rule has been used in the last 7 days",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxRuleCreateArgs": {
        "description": "InboxRuleCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxRuleCreateModel"
          }
        },
        "type": "object"
      },
      "InboxRuleCreateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "canEditOwnSubscription": {
            "description": "Can Edit Own Subscription",
            "type": "boolean"
          },
          "conditions": {
            "description": "Conditions",
            "items": {
              "$ref": "#/components/schemas/InboxRuleConditionCreateModel"
            },
            "type": "array"
          },
          "highPriority": {
            "description": "High Priority",
            "type": "boolean"
          },
          "inboxEmailTemplateId": {
            "description": "Email Template",
            "type": "integer",
            "format": "int32"
          },
          "inboxMessageTypeIds": {
            "description": "Inbox Message Types",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "inboxSlackTemplateId": {
            "description": "Slack Template",
            "type": "integer",
            "format": "int32"
          },
          "isImmediate": {
            "description": "Is Immediate",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "sendEmail": {
            "description": "Send Email",
            "type": "boolean"
          },
          "sendSlack": {
            "description": "Send Slack",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InboxRuleConditionCreateModel": {
        "description": "InboxRuleConditionCreateModel",
        "properties": {
          "displayValue": {
            "description": "Display Value",
            "type": "string"
          },
          "inboxDataId": {
            "description": "Inbox Data",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleId": {
            "description": "Inbox Rule",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleOperand": {
            "$ref": "#/components/schemas/InboxRuleConditionOperand"
          },
          "valueBool": {
            "description": "Boolean Value",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "DateTime Value",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "Integer Value",
            "type": "integer",
            "format": "int32"
          },
          "valueString": {
            "description": "String Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxRuleConditionOperand": {
        "description": "Operand",
        "properties": {},
        "type": "string",
        "enum": [
          "Equals",
          "NotEquals",
          "LessThan",
          "GreaterThan",
          "Regex"
        ]
      },
      "InboxRuleDetailModel": {
        "description": "InboxRuleDetailModel",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "canEditOwnSubscription": {
            "description": "Can Edit Own Subscription",
            "type": "boolean"
          },
          "conditions": {
            "description": "Conditions",
            "items": {
              "$ref": "#/components/schemas/InboxRuleConditionSummary"
            },
            "type": "array"
          },
          "createdByUserId": {
            "description": "Created By User Id",
            "type": "integer",
            "format": "int32"
          },
          "highPriority": {
            "description": "High Priority",
            "type": "boolean"
          },
          "inboxEmailTemplateId": {
            "description": "Inbox Email Template",
            "type": "integer",
            "format": "int32"
          },
          "inboxMessageTypes": {
            "description": "Inbox Message Types",
            "items": {
              "$ref": "#/components/schemas/InboxMessageTypeSummary"
            },
            "type": "array"
          },
          "inboxRuleId": {
            "description": "Inbox Rule Id",
            "type": "integer",
            "format": "int32"
          },
          "inboxSlackTemplateId": {
            "description": "Inbox Slack Template",
            "type": "integer",
            "format": "int32"
          },
          "isImmediate": {
            "description": "Is Immediate",
            "type": "boolean"
          },
          "isSystem": {
            "description": "Is System",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "recurringScheduleId": {
            "description": "The schedule that indicates when this rule should trigger",
            "type": "integer",
            "format": "int32"
          },
          "sendEmail": {
            "description": "Send Email",
            "type": "boolean"
          },
          "sendSlack": {
            "description": "Send Slack",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InboxRuleConditionSummary": {
        "description": "Conditions",
        "properties": {
          "displayValue": {
            "description": "DisplayValue",
            "type": "string"
          },
          "inboxDataId": {
            "description": "InboxDataId",
            "type": "integer",
            "format": "int32"
          },
          "inboxDataName": {
            "description": "InboxDataName",
            "type": "string"
          },
          "inboxDataType": {
            "$ref": "#/components/schemas/InboxDataType"
          },
          "inboxRuleConditionId": {
            "description": "InboxRuleConditionId",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleOperand": {
            "$ref": "#/components/schemas/InboxRuleConditionOperand"
          },
          "valueBool": {
            "description": "ValueBool",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "ValueDateTime",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "ValueInt",
            "type": "integer",
            "format": "int32"
          },
          "valueString": {
            "description": "ValueString",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxDataType": {
        "description": "InboxDataType",
        "properties": {},
        "type": "string",
        "enum": [
          "Integer",
          "DateTime",
          "String",
          "Boolean"
        ]
      },
      "InboxRulePatchArgs": {
        "description": "InboxRulePatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxRulePatchModel"
          }
        },
        "type": "object"
      },
      "InboxRulePatchModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "canEditOwnSubscription": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "highPriority": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "inboxMessageTypes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "isImmediate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "InboxRuleConditionDetailModel": {
        "description": "Inbox Rule Condition",
        "properties": {
          "displayValue": {
            "description": "Display Value",
            "type": "string"
          },
          "inboxDataId": {
            "description": "Inbox Data",
            "type": "integer",
            "format": "int32"
          },
          "inboxDataType": {
            "$ref": "#/components/schemas/InboxDataType"
          },
          "inboxRuleConditionId": {
            "description": "Inbox Rule Condition Id",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleId": {
            "description": "Inbox Rule",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleOperand": {
            "$ref": "#/components/schemas/InboxRuleConditionOperand"
          },
          "valueBool": {
            "description": "Boolean Value",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "DateTime Value",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "Integer Value",
            "type": "integer",
            "format": "int32"
          },
          "valueString": {
            "description": "String Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfInboxRuleSubscriberSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/InboxRuleSubscriberSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxRuleSubscriberSummary": {
        "description": "A user, group, or external email that is subscribed or unsubscribed to an inbox rule",
        "properties": {
          "displayName": {
            "description": "A display name for this subscriber",
            "type": "string"
          },
          "domainId": {
            "description": "Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "domainName": {
            "description": "Active Directory Domain Name",
            "type": "string"
          },
          "emailAddress": {
            "description": "EmailAddress",
            "type": "string"
          },
          "groupId": {
            "description": "The subscribers group id.  Either an actual group or a personal group ID for a single user.",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleAdditionalEmailId": {
            "description": "InboxRuleAdditionalEmailId",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleSubscribersId": {
            "description": "The identifier for this subscriber.  Email only subscribers will not have this ID.",
            "type": "integer",
            "format": "int32"
          },
          "isGroup": {
            "description": "Is this a group or a single user",
            "type": "boolean"
          },
          "subscribed": {
            "description": "True if the user, group, or external email is subscribed.  False if the user is unsubscribed.  Groups and external emails cannot be unsubscribed as they are just removed.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfInboxRuleLogSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/InboxRuleLogSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxRuleLogSummary": {
        "description": "Log item for inbox rule action results",
        "properties": {
          "actionType": {
            "$ref": "#/components/schemas/ActionType"
          },
          "displayName": {
            "description": "The display name for the user or external email address",
            "type": "string"
          },
          "inboxRuleActionStatus": {
            "$ref": "#/components/schemas/InboxRuleActionStatusType"
          },
          "statusDate": {
            "description": "When the action triggered",
            "type": "string",
            "format": "date-time"
          },
          "statusDescription": {
            "description": "Any extra description for this status",
            "type": "string"
          },
          "userId": {
            "description": "The specific user id that this action was for",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ActionType": {
        "description": "The type of action that was performed for this log entry",
        "properties": {},
        "type": "string",
        "enum": [
          "SendEmail",
          "SendSlack"
        ]
      },
      "InboxRuleActionStatusType": {
        "description": "The result of the action",
        "properties": {},
        "type": "string",
        "enum": [
          "Success",
          "Failed",
          "FailedAfterThreeAttempts",
          "InvalidEmail",
          "UnableToResolveHost"
        ]
      },
      "InboxRuleActionPatchArgs": {
        "description": "InboxRuleActionPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxRuleActionPatchModel"
          }
        },
        "type": "object"
      },
      "InboxRuleActionPatchModel": {
        "description": "InboxRuleActionPatchModel",
        "properties": {
          "inboxEmailTemplateId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "inboxSlackTemplateId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "sendEmail": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "sendSlack": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "InboxRuleSubscribersPatchArgs": {
        "description": "InboxRuleSubscribersPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxRuleSubscriberPatchModel"
          }
        },
        "type": "object"
      },
      "InboxRuleSubscriberPatchModel": {
        "description": "Inbox rule subscription changes",
        "properties": {
          "emailUpdates": {
            "description": "External email addresses to add or remove from this rule",
            "items": {
              "$ref": "#/components/schemas/InboxRuleSubscriberEmailUpdate"
            },
            "type": "array"
          },
          "groupUserUpdates": {
            "description": "Groups and Users changes to the subscription",
            "items": {
              "$ref": "#/components/schemas/InboxRuleSubscriberGroupUserUpdate"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InboxRuleSubscriberEmailUpdate": {
        "description": "Change the subscription for a specific email",
        "properties": {
          "emailAddress": {
            "description": "A specific email address to add / remove.",
            "type": "string"
          },
          "subscribe": {
            "description": "Passing true will subscribe this email address, passing false will remove this email address along with any rule action history",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InboxRuleSubscriberGroupUserUpdate": {
        "description": "The user/group to add or remove to the subscription.  Either UserId or GroupId should be set.  If both are set then GroupId will take precedence and UserId will be ignored.",
        "properties": {
          "groupId": {
            "description": "The group ID representing a group or an individual user",
            "type": "integer",
            "format": "int32"
          },
          "subscribe": {
            "description": "When true a group or user will be subscribed to this rule.  When false a group will be removed from the list.  If the this is a user then it will be removed if it is directly subscribed or it will be explicitly unsubscribed if not currently subscribed.",
            "type": "boolean"
          },
          "userId": {
            "description": "The user ID representing a an individual user",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "InboxRuleSubscriberUpdateResponse": {
        "description": "InboxRuleSubscriberUpdateResponse",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InboxRuleCopyArgs": {
        "description": "InboxRuleCopyArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxRuleCopyModel"
          }
        },
        "type": "object"
      },
      "InboxRuleCopyModel": {
        "description": "Inbox Rule Copy Model",
        "properties": {
          "inboxRuleIdToCopy": {
            "description": "InboxRuleId To Copy",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InboxRuleConditionCreateArgs": {
        "description": "InboxRuleConditionCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InboxRuleConditionCreateModel"
          }
        },
        "type": "object"
      },
      "InboxRuleConditionUpdateArgs": {
        "description": "InboxRuleConditionUpdateArgs",
        "properties": {
          "data": {
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/InboxRuleConditionUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InboxRuleConditionUpdateModel": {
        "description": "Inbox Rule Condition Update Model",
        "properties": {
          "displayValue": {
            "description": "Display Value",
            "type": "string"
          },
          "inboxDataId": {
            "description": "Inbox Data",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleConditionId": {
            "description": "The ID of the existing rule condition to update",
            "type": "integer",
            "format": "int32"
          },
          "inboxRuleOperand": {
            "$ref": "#/components/schemas/InboxRuleConditionOperand"
          },
          "valueBool": {
            "description": "Boolean Value",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "DateTime Value",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "Integer Value",
            "type": "integer",
            "format": "int32"
          },
          "valueString": {
            "description": "String Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IpAddressRestrictionModel": {
        "description": "IpAddressRestrictionModel",
        "properties": {
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "range": {
            "description": "Range",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IpAddressRestrictionUpdateArgs": {
        "description": "IpAddressRestrictionUpdateArgs",
        "properties": {
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "range": {
            "description": "Range",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupIpAddressRestrictionModel": {
        "description": "GroupIpAddressRestrictionModel",
        "properties": {
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "GroupName",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRestrictionId": {
            "description": "IpAddressRestrictionId",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRestrictionName": {
            "description": "IpAddressRestrictionName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserIpAddressRestrictionModel": {
        "description": "UserIpAddressRestrictionModel",
        "properties": {
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRestrictionId": {
            "description": "IpAddressRestrictionId",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRestrictionName": {
            "description": "IpAddressRestrictionName",
            "type": "string"
          },
          "userDisplayName": {
            "description": "UserDisplayName",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "UserName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfIpAddressRestrictionSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/IpAddressRestrictionSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "IpAddressRestrictionSummary": {
        "description": "Query results",
        "properties": {
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "range": {
            "description": "Range",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IpAddressRestrictionCreateArgs": {
        "description": "IpAddressRestrictionCreateArgs",
        "required": [
          "name",
          "range"
        ],
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          },
          "range": {
            "description": "Range",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfGroupIpAddressRestrictionModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/GroupIpAddressRestrictionModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupIpAddressRestrictionCreateArgs": {
        "description": "GroupIpAddressRestrictionCreateArgs",
        "required": [
          "groupId",
          "ipAddressRestrictionId"
        ],
        "properties": {
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRestrictionId": {
            "description": "IpAddressRestrictionId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfUserIpAddressRestrictionModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/UserIpAddressRestrictionModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserIpAddressRestrictionCreateArgs": {
        "description": "UserIpAddressRestrictionCreateArgs",
        "required": [
          "userId",
          "ipAddressRestrictionId"
        ],
        "properties": {
          "ipAddressRestrictionId": {
            "description": "IpAddressRestrictionId",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "JumpboxRouteLevelPatchArgs": {
        "description": "JumpboxRouteLevelPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JumpboxRouteLevelPatchModel"
          }
        },
        "type": "object"
      },
      "JumpboxRouteLevelPatchModel": {
        "description": "Data",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "port": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "secretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "JumpboxRouteLevelSummaryModel": {
        "description": "JumpboxRouteLevelSummaryModel",
        "properties": {
          "jumpboxRouteId": {
            "description": "JumpboxRouteId",
            "type": "string",
            "format": "uuid"
          },
          "order": {
            "description": "Order",
            "type": "integer",
            "format": "int32"
          },
          "port": {
            "description": "Port",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "SecretId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfJumpboxRouteSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/JumpboxRouteSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "JumpboxRouteSummaryModel": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "jumpboxRouteId": {
            "description": "JumpboxRouteId",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JumpboxRouteModel": {
        "description": "JumpboxRouteModel",
        "properties": {
          "active": {
            "description": "Indicates if the Jumpbox Route is active",
            "type": "boolean"
          },
          "description": {
            "description": "Jumpbox Route Descrition",
            "type": "string"
          },
          "jumpboxRouteId": {
            "description": "Jumpbox Route Id",
            "type": "string",
            "format": "uuid"
          },
          "jumpboxRouteLevels": {
            "description": "Array of Jumpbox Route Levels attached to a Jumpbox Route",
            "items": {
              "$ref": "#/components/schemas/JumpboxRouteLevelModel"
            },
            "type": "array"
          },
          "name": {
            "description": "Jumpbox Route Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JumpboxRouteLevelModel": {
        "description": "Array of Jumpbox Route Levels attached to a Jumpbox Route",
        "properties": {
          "jumpboxRouteId": {
            "description": "Jumpbox Route Id",
            "type": "string",
            "format": "uuid"
          },
          "order": {
            "description": "Jumpbox Route Level Order",
            "type": "integer",
            "format": "int32"
          },
          "port": {
            "description": "Port Assigned to this Jumpbox Route Level",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "Secret Id Assigned to this Jumpbox Route Level",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "JumpboxRoutePatchArgs": {
        "description": "JumpboxRoutePatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JumpboxRoutePatchModel"
          }
        },
        "type": "object"
      },
      "JumpboxRoutePatchModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "jumpboxRouteId": {
            "description": "JumpboxRouteId",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "PagingOfJumpboxRouteAuditModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/JumpboxRouteAuditModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "JumpboxRouteAuditModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "auditId": {
            "description": "Audit ID",
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "description": "Date",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userDisplayName": {
            "description": "User Display Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfJumpboxRouteLevelViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/JumpboxRouteLevelViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "JumpboxRouteLevelViewModel": {
        "description": "Query results",
        "properties": {
          "jumpboxRouteId": {
            "description": "JumpboxRouteId",
            "type": "string",
            "format": "uuid"
          },
          "order": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "port": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "secretId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "JumpboxRouteLevelCreateArgs": {
        "description": "JumpboxRouteLevelCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JumpboxRouteLevelCreateModel"
          }
        },
        "type": "object"
      },
      "JumpboxRouteLevelCreateModel": {
        "description": "Data",
        "properties": {
          "port": {
            "description": "Port",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "SecretId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "JumpboxRouteCreateArgs": {
        "description": "JumpboxRouteCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JumpboxRouteCreateModel"
          }
        },
        "type": "object"
      },
      "JumpboxRouteCreateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KeyManagementConfigModel": {
        "description": "KeyManagementConfigModel",
        "properties": {
          "awsKmsAccessKeyId": {
            "description": "AwsKmsAccessKeyId",
            "type": "string"
          },
          "awsKmsKeyArn": {
            "description": "AwsKmsKeyArn",
            "type": "string"
          },
          "awsKmsKeyId": {
            "description": "AwsKmsKeyId",
            "type": "string"
          },
          "awsKmsSecretAccessKey": {
            "description": "AwsKmsSecretAccessKey",
            "type": "string"
          },
          "keyManagementConfigId": {
            "description": "KeyManagementConfigId",
            "type": "integer",
            "format": "int32"
          },
          "keyManagementTypeId": {
            "description": "KeyManagementTypeId",
            "type": "integer",
            "format": "int32"
          },
          "keyManagementTypeName": {
            "description": "KeyManagementTypeName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KeyManagementConfigUpdateArgs": {
        "description": "KeyManagementConfigUpdateArgs",
        "properties": {
          "awsKmsAccessKeyId": {
            "description": "AwsKmsAccessKeyId",
            "type": "string"
          },
          "awsKmsKeyArn": {
            "description": "AwsKmsKeyArn",
            "type": "string"
          },
          "awsKmsKeyId": {
            "description": "AwsKmsKeyId",
            "type": "string"
          },
          "awsKmsSecretAccessKey": {
            "description": "AwsKmsSecretAccessKey",
            "type": "string"
          },
          "azureKeyVaultBaseUrl": {
            "description": "AzureKeyVaultBaseUrl",
            "type": "string"
          },
          "azureKeyVaultKeyName": {
            "description": "AzureKeyVaultKeyName",
            "type": "string"
          },
          "azureKeyVaultKeyVersion": {
            "description": "AzureKeyVaultKeyVersion",
            "type": "string"
          },
          "azureKeyVaultPrincipalId": {
            "description": "AzureKeyVaultPrincipalId",
            "type": "string"
          },
          "azureKeyVaultPrincipalSecret": {
            "description": "AzureKeyVaultPrincipalSecret",
            "type": "string"
          },
          "keyManagementTypeId": {
            "description": "KeyManagementTypeId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "MEKRotationInfoResponseViewModel": {
        "description": "MEKRotationInfoResponseViewModel",
        "properties": {
          "canRequestRotation": {
            "description": "CanRequestRotation",
            "type": "boolean"
          },
          "canRetryStatus": {
            "description": "CanRetryStatus",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "ErrorMessage",
            "type": "string"
          },
          "hasPermission": {
            "description": "HasPermission",
            "type": "boolean"
          },
          "isReplicationEnabled": {
            "description": "IsReplicationEnabled",
            "type": "boolean"
          },
          "itemsToRotate": {
            "description": "ItemsToRotate",
            "type": "integer",
            "format": "int32"
          },
          "pollInfo": {
            "description": "PollInfo",
            "type": "boolean"
          },
          "processState": {
            "$ref": "#/components/schemas/MEKRotationProcessStateTypes"
          },
          "rotationInfo": {
            "$ref": "#/components/schemas/MEKRotationInfoModel"
          },
          "showBackupConfirmation": {
            "description": "ShowBackupConfirmation",
            "type": "boolean"
          },
          "totalItems": {
            "description": "TotalItems",
            "type": "integer",
            "format": "int32"
          },
          "warningMessage": {
            "description": "WarningMessage",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MEKRotationProcessStateTypes": {
        "description": "ProcessState",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "Completed",
          "Pending",
          "Running",
          "Retry",
          "Failed"
        ]
      },
      "MEKRotationInfoModel": {
        "description": "RotationInfo",
        "properties": {
          "lastEndDateUtc": {
            "description": "LastEndDateUtc",
            "type": "string",
            "format": "date-time"
          },
          "startedDateUtc": {
            "description": "StartedDateUtc",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "Status",
            "type": "string"
          },
          "statusUpdatedDateUtc": {
            "description": "StatusUpdatedDateUtc",
            "type": "string",
            "format": "date-time"
          },
          "statusValue": {
            "description": "StatusValue",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfMasterEncryptionKeyRotationInfoAuditViewModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/MasterEncryptionKeyRotationInfoAuditViewModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "MasterEncryptionKeyRotationInfoAuditViewModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "currentStatus": {
            "$ref": "#/components/schemas/MasterEncryptionKeyRotationStatus"
          },
          "date": {
            "description": "Date",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "formattedDate": {
            "description": "FormattedDate",
            "type": "string"
          },
          "masterEncryptionKeyRotationInfoAuditId": {
            "description": "MasterEncryptionKeyRotationInfoAuditId",
            "type": "integer",
            "format": "int32"
          },
          "masterEncryptionKeyRotationInfoId": {
            "description": "MasterEncryptionKeyRotationInfoId",
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "UserName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MasterEncryptionKeyRotationStatus": {
        "description": "CurrentStatus",
        "properties": {},
        "type": "string",
        "enum": [
          "NeverRun",
          "RotationRequested",
          "KeyRotationStarted",
          "KeyRotationCompleted",
          "PendingRestart",
          "MarkDataStarted",
          "MarkDataCompleted",
          "DataRotationStarted",
          "DataRotationCompleted",
          "SessionDataRotationStarted",
          "SessionDataRotationCompleted",
          "ProcessCompletedWithErrorsBeforeRotation",
          "ProcessFailedAfterRotation"
        ]
      },
      "MasterEncryptionKeyRotationInfoAuditUserViewModel": {
        "description": "MasterEncryptionKeyRotationInfoAuditUserViewModel[]",
        "properties": {
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfLauncherAgentCollectionSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/LauncherAgentCollectionSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "LauncherAgentCollectionSummary": {
        "description": "Launcher Agent Collection summary",
        "properties": {
          "active": {
            "description": "Whether the Collection is enabled",
            "type": "boolean"
          },
          "activeAgentCount": {
            "description": "Total number of active Launcher Agents in this Collection",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Collection Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LauncherAgentCollectionCreateArgs": {
        "description": "Launcher Agent Collection create options",
        "required": [
          "name",
          "recordStandaloneSessions",
          "recordKeystrokes"
        ],
        "properties": {
          "name": {
            "description": "Collection Name",
            "type": "string"
          },
          "recordKeystrokes": {
            "description": "Record Keystrokes",
            "type": "boolean"
          },
          "recordStandaloneSessions": {
            "description": "Record Standalone Sessions",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LauncherAgentCollectionModel": {
        "description": "Launcher Agent Collection",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "activeAgentCount": {
            "description": "ActiveAgentCount",
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "description": "Created",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "recordKeystrokes": {
            "description": "RecordKeystrokes",
            "type": "boolean"
          },
          "recordStandaloneSessions": {
            "description": "RecordStandaloneSessions",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LauncherAgentCollectionUpdateArgs": {
        "description": "Launcher Agent Collection update options",
        "properties": {
          "active": {
            "description": "Whether the Launcher Agent Collection is active",
            "type": "boolean"
          },
          "id": {
            "description": "Launcher Agent ID. Must match ID in path",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "name": {
            "description": "Collection Name",
            "type": "string"
          },
          "recordKeystrokes": {
            "description": "Whether or not agents in this collection will record standalone sessions by default",
            "type": "boolean"
          },
          "recordStandaloneSessions": {
            "description": "Whether or not agents in this collection will record standalone sessions by default",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfLauncherAgentSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/LauncherAgentSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "LauncherAgentSummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Whether or not the agent is running",
            "type": "boolean"
          },
          "collectionId": {
            "description": "The identifier of the collection to which this agent belongs",
            "type": "integer",
            "format": "int32"
          },
          "collectionName": {
            "description": "The name of the collection to which this agent belongs",
            "type": "string"
          },
          "collectionRecordKeystrokes": {
            "description": "Whether or not this agent will record keystrokes as the default setting for the Collection",
            "type": "boolean"
          },
          "collectionRecordStandaloneSessions": {
            "description": "Whether or not headless session recording is enabled as the default setting for the Collection",
            "type": "boolean"
          },
          "created": {
            "description": "The date the agent was installed",
            "type": "string",
            "format": "date-time"
          },
          "hostName": {
            "description": "Name of the computer which the agent is running on",
            "type": "string"
          },
          "id": {
            "description": "Unique ID for this agent",
            "type": "integer",
            "format": "int32"
          },
          "issue": {
            "description": "Any issues with this agent regarding its version and configuration",
            "type": "string"
          },
          "lastActivity": {
            "description": "The date the agent was last active",
            "type": "string",
            "format": "date-time"
          },
          "recordKeystrokes": {
            "description": "Whether or not this agent will record keystrokes, or using the Collection Default",
            "type": "boolean"
          },
          "recordStandaloneSessions": {
            "description": "Whether or not headless session recording is enabled, or using the Collection Default",
            "type": "boolean"
          },
          "version": {
            "description": "The version number currently installed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LauncherAgentModel": {
        "description": "LauncherAgentModel",
        "properties": {
          "active": {
            "description": "Whether or not the agent is active",
            "type": "boolean"
          },
          "collectionId": {
            "description": "The ID of the collection the agent belongs to",
            "type": "integer",
            "format": "int32"
          },
          "collectionName": {
            "description": "The name of the collection the agent belongs to",
            "type": "string"
          },
          "created": {
            "description": "When the agent was created",
            "type": "string",
            "format": "date-time"
          },
          "hostName": {
            "description": "The hostname of the machine the agent is installed on",
            "type": "string"
          },
          "id": {
            "description": "The ID of the agent",
            "type": "integer",
            "format": "int32"
          },
          "lastActivity": {
            "description": "The date the agent was last active",
            "type": "string",
            "format": "date-time"
          },
          "recordKeystrokes": {
            "description": "Whether or not this agent will record keystrokes",
            "type": "boolean"
          },
          "recordStandaloneSessions": {
            "description": "Whether or not headless session recording is enabled",
            "type": "boolean"
          },
          "version": {
            "description": "The version number currently installed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LauncherAgentUpdateArgs": {
        "description": "Launcher Agent update options",
        "properties": {
          "active": {
            "description": "Whether the Launcher Agent is active",
            "type": "boolean"
          },
          "id": {
            "description": "Launcher Agent ID. Must match ID in path",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "recordKeystrokes": {
            "description": "Whether or not this agent is allowed to record keystroke data",
            "type": "boolean"
          },
          "recordStandaloneSessions": {
            "description": "Whether or not this agent is allowed to record headless sessions",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfLauncherSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/LauncherSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "LauncherSummary": {
        "description": "Launcher summary",
        "properties": {
          "active": {
            "description": "Whether the launcher is active",
            "type": "boolean"
          },
          "application": {
            "description": "Associated application",
            "type": "string"
          },
          "id": {
            "description": "Launcher ID",
            "type": "integer",
            "format": "int32"
          },
          "isCustom": {
            "description": "Whether this is a custom launcher",
            "type": "boolean"
          },
          "name": {
            "description": "Launcher name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfLauncherLookup": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/LauncherLookup"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "LauncherLookup": {
        "description": "Simple launcher representation",
        "properties": {
          "id": {
            "description": "Launcher ID",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Launcher name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LauncherModel": {
        "description": "Launcher",
        "properties": {
          "active": {
            "description": "Whether the launcher is active",
            "type": "boolean"
          },
          "application": {
            "description": "Associated application",
            "type": "string"
          },
          "customLauncherId": {
            "description": "Associated custom launcher ID",
            "type": "integer",
            "format": "int32"
          },
          "customLauncherProcessName": {
            "description": "Associated custom launcher process name",
            "type": "string"
          },
          "customParameters": {
            "description": "Associated custom launcher parameters",
            "type": "string"
          },
          "id": {
            "description": "Launcher ID",
            "type": "integer",
            "format": "int32"
          },
          "isCustom": {
            "description": "Whether this is a custom launcher",
            "type": "boolean"
          },
          "name": {
            "description": "Launcher name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfLauncherDetailsV2": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/LauncherDetailsV2"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "LauncherDetailsV2": {
        "description": "Launcher And Fields",
        "properties": {
          "application": {
            "description": "Associated application",
            "type": "string"
          },
          "approvedList": {
            "description": "If the restricted host is on the allowed list",
            "type": "boolean"
          },
          "customLauncherId": {
            "description": "Associated custom launcher ID",
            "type": "integer",
            "format": "int32"
          },
          "customLauncherProcessName": {
            "description": "Associated custom launcher process name",
            "type": "string"
          },
          "customParameters": {
            "description": "Associated custom launcher parameters",
            "type": "string"
          },
          "isCustom": {
            "description": "Whether this is a custom launcher",
            "type": "boolean"
          },
          "launcherId": {
            "description": "Launcher ID",
            "type": "integer",
            "format": "int32"
          },
          "launcherName": {
            "description": "Launcher name",
            "type": "string"
          },
          "promptedField": {
            "$ref": "#/components/schemas/ILauncherTypeField"
          },
          "restrictedHost": {
            "description": "Whether there is a host restriction",
            "type": "boolean"
          },
          "restrictedHosts": {
            "description": "The restricted hosts.",
            "items": {
              "$ref": "#/components/schemas/ICategorizedListItemValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ILauncherTypeField": {
        "description": "Fields required by the launcher",
        "properties": {
          "allowDefault": {
            "description": "AllowDefault",
            "type": "boolean"
          },
          "concurrencyId": {
            "description": "ConcurrencyId",
            "type": "string"
          },
          "defaultType": {
            "description": "DefaultType",
            "type": "string"
          },
          "defaultTypeIntMax": {
            "description": "DefaultTypeIntMax",
            "type": "integer",
            "format": "int32"
          },
          "defaultTypeIntMin": {
            "description": "DefaultTypeIntMin",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeFieldId": {
            "description": "LauncherTypeFieldId",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeId": {
            "description": "LauncherTypeId",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "promptableField": {
            "description": "PromptableField",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ICategorizedListItemValue": {
        "description": "The restricted hosts.",
        "properties": {
          "category": {
            "description": "Category",
            "type": "string"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrepareLauncherQueryResultModel": {
        "description": "Prepare Launcher Query Result",
        "properties": {
          "success": {
            "description": "True when Prepare Launcher succeeds, otherwise false.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LaunchSecretArgs": {
        "description": "LaunchSecretArgs",
        "properties": {
          "launcherId": {
            "description": "The Id of the launcher to use.",
            "type": "integer",
            "format": "int32"
          },
          "promptFieldValue": {
            "description": "The value to apply to the prompted field.",
            "type": "string"
          },
          "secretId": {
            "description": "The Id of the secret to launch.",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "The site used to launch when using RDP proxy",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "LaunchedSecretModel": {
        "description": "Launcher",
        "properties": {
          "apiVersion": {
            "description": "The version of the Launcher API used.",
            "type": "integer",
            "format": "int32"
          },
          "baseUrl": {
            "description": "The url to the launcher",
            "type": "string"
          },
          "encodedUrl": {
            "description": "The url to Secret Server",
            "type": "string"
          },
          "guid": {
            "description": "The launcher request guid",
            "type": "string",
            "format": "uuid"
          },
          "launcherType": {
            "description": "The name of the launcher used.",
            "type": "string"
          },
          "launcherTypeId": {
            "description": "The Id of the launcher used.",
            "type": "integer",
            "format": "int32"
          },
          "sessionGuid": {
            "description": "The Id for a running session.",
            "type": "string",
            "format": "uuid"
          },
          "ssUrl": {
            "description": "The query string for the launcher.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrepareLauncherArgs": {
        "description": "Prepare Launcher Options",
        "required": [
          "secretId",
          "launcherTypeId"
        ],
        "properties": {
          "launcherTypeId": {
            "description": "Launcher Type Id",
            "type": "integer",
            "format": "int32"
          },
          "promptFieldValue": {
            "description": "User-provided response to prompt, e.g. machine name",
            "type": "string"
          },
          "secretId": {
            "description": "Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "Site Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PrepareLauncherResult": {
        "description": "PrepareLauncherResult",
        "properties": {
          "errorMessage": {
            "description": "ErrorMessage",
            "type": "string"
          },
          "fileDownload": {
            "$ref": "#/components/schemas/LauncherFileDownload"
          },
          "launcherPopupTimeoutSeconds": {
            "description": "LauncherPopupTimeoutSeconds",
            "type": "integer",
            "format": "int32"
          },
          "launcherUrl": {
            "$ref": "#/components/schemas/RedirectToLauncherUrl"
          },
          "redirectUrl": {
            "description": "RedirectUrl",
            "type": "string"
          },
          "shouldDownload": {
            "description": "ShouldDownload",
            "type": "boolean"
          },
          "shouldRedirect": {
            "description": "ShouldRedirect",
            "type": "boolean"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LauncherFileDownload": {
        "description": "FileDownload",
        "properties": {
          "contentType": {
            "description": "ContentType",
            "type": "string"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fileContents": {
            "description": "FileContents",
            "type": "string"
          },
          "fileName": {
            "description": "FileName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedirectToLauncherUrl": {
        "description": "LauncherUrl",
        "properties": {
          "apiVersion": {
            "description": "ApiVersion",
            "type": "integer",
            "format": "int32"
          },
          "autoUpdateEnabled": {
            "description": "AutoUpdateEnabled",
            "type": "boolean"
          },
          "baseUrl": {
            "description": "BaseUrl",
            "type": "string"
          },
          "encodedUrl": {
            "description": "EncodedUrl",
            "type": "string"
          },
          "launcherFileDownload": {
            "$ref": "#/components/schemas/LauncherFileDownload"
          },
          "requestGuid": {
            "description": "RequestGuid",
            "type": "string",
            "format": "uuid"
          },
          "secretSessionId": {
            "description": "SecretSessionId",
            "type": "integer",
            "format": "int32"
          },
          "sessionGuid": {
            "description": "SessionGuid",
            "type": "string",
            "format": "uuid"
          },
          "ssUrl": {
            "description": "SsUrl",
            "type": "string"
          },
          "type": {
            "description": "Type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValidLicenseModel": {
        "description": "Valid License Model",
        "properties": {
          "isLicensed": {
            "description": "Is Licensed",
            "type": "boolean"
          },
          "isTrial": {
            "description": "Is Trial",
            "type": "boolean"
          },
          "licenseEndDate": {
            "description": "License End Date",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "MetadataDeleteResponse": {
        "description": "Response message when deleting a metadata value",
        "properties": {
          "success": {
            "description": "Did the delete succeed",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfMetadataSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/MetadataSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "MetadataSummaryModel": {
        "description": "Query results",
        "properties": {
          "containsPersonalInformation": {
            "description": "When this is set to true, the metadata will be obfuscated during export",
            "type": "boolean"
          },
          "createDateTime": {
            "description": "When the field value was created",
            "type": "string",
            "format": "date-time"
          },
          "createUserId": {
            "description": "The user id of who entered the field value",
            "type": "integer",
            "format": "int32"
          },
          "createUserName": {
            "description": "Who entered the field value",
            "type": "string"
          },
          "itemId": {
            "description": "The ID of the item to which this metadata is associated",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldDataType": {
            "$ref": "#/components/schemas/MetadataFieldDataType"
          },
          "metadataFieldId": {
            "description": "The metadata field id",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldName": {
            "description": "The metadata field name",
            "type": "string"
          },
          "metadataFieldSectionId": {
            "description": "The Metadata section ID",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldSectionName": {
            "description": "The metadata section name",
            "type": "string"
          },
          "metadataFieldTypeName": {
            "description": "Not currently populated, see MetadataFieldDataType",
            "type": "string"
          },
          "metadataItemDataId": {
            "description": "The sequence id for this specific metadata field",
            "type": "integer",
            "format": "int32"
          },
          "metadataType": {
            "$ref": "#/components/schemas/MetadataType"
          },
          "metadataTypeName": {
            "description": "Not currently populated, see MetadataType",
            "type": "string"
          },
          "sortOrder": {
            "description": "The order in which to sort the metadata fields.  This is currently not utilized.",
            "type": "integer",
            "format": "int32"
          },
          "valueBit": {
            "description": "When this metadata field is a boolean this will be the value",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "When this metadata field is a datetime this will be the value",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "When this metadata field is a user this will be the user id",
            "type": "integer",
            "format": "int32"
          },
          "valueNumber": {
            "description": "When this metadata field is a number this will be the value",
            "type": "number",
            "format": "double"
          },
          "valueString": {
            "description": "When this metadata field is a string this will be the value",
            "type": "string"
          },
          "valueUserDisplayName": {
            "description": "When this metadata field is a user this will be the user display name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetadataFieldDataType": {
        "description": "Field types for metadata values",
        "properties": {},
        "type": "string",
        "enum": [
          "String",
          "Boolean",
          "Number",
          "DateTime",
          "User"
        ]
      },
      "MetadataType": {
        "description": "The types of entities that metadata can be associated to",
        "properties": {},
        "type": "string",
        "enum": [
          "User",
          "Secret",
          "Folder",
          "Group"
        ]
      },
      "PagingOfMetadataHistorySummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/MetadataHistorySummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "MetadataHistorySummaryModel": {
        "description": "Query results",
        "properties": {
          "containsPersonalInformation": {
            "description": "When this is set to true, the metadata will be obfuscated during export",
            "type": "boolean"
          },
          "createDateTime": {
            "description": "When the field value was created",
            "type": "string",
            "format": "date-time"
          },
          "createUserId": {
            "description": "The user id of who entered the field value",
            "type": "integer",
            "format": "int32"
          },
          "createUserName": {
            "description": "Who entered the field value",
            "type": "string"
          },
          "itemId": {
            "description": "The ID of the item to which this metadata is associated",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldDataType": {
            "$ref": "#/components/schemas/MetadataFieldDataType"
          },
          "metadataFieldId": {
            "description": "The metadata field id",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldName": {
            "description": "The metadata field name",
            "type": "string"
          },
          "metadataFieldSectionId": {
            "description": "The Metadata section ID",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldSectionName": {
            "description": "The metadata section name",
            "type": "string"
          },
          "metadataFieldTypeName": {
            "description": "Not currently populated, see MetadataFieldDataType",
            "type": "string"
          },
          "metadataItemDataHistoryId": {
            "description": "The sequence for this history ID",
            "type": "integer",
            "format": "int32"
          },
          "metadataItemDataId": {
            "description": "The parent sequence ID for all associated history records",
            "type": "integer",
            "format": "int32"
          },
          "metadataType": {
            "$ref": "#/components/schemas/MetadataType"
          },
          "metadataTypeName": {
            "description": "Not currently populated, see MetadataType",
            "type": "string"
          },
          "sortOrder": {
            "description": "The order in which to sort the metadata fields.  This is currently not utilized.",
            "type": "integer",
            "format": "int32"
          },
          "valueBit": {
            "description": "When this metadata field is a boolean this will be the value",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "When this metadata field is a datetime this will be the value",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "When this metadata field is a user this will be the user id",
            "type": "integer",
            "format": "int32"
          },
          "valueNumber": {
            "description": "When this metadata field is a number this will be the value",
            "type": "number",
            "format": "double"
          },
          "valueString": {
            "description": "When this metadata field is a string this will be the value",
            "type": "string"
          },
          "valueUserDisplayName": {
            "description": "When this metadata field is a user this will be the user display name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfMetadataFieldSectionSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/MetadataFieldSectionSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "MetadataFieldSectionSummaryModel": {
        "description": "Summary of metadata sections",
        "properties": {
          "actions": {
            "description": "What actions can the current user perform",
            "items": {
              "$ref": "#/components/schemas/MetadataFieldSectionActionType"
            },
            "type": "array"
          },
          "metadataFieldSectionDescription": {
            "description": "The description of this section",
            "type": "string"
          },
          "metadataFieldSectionId": {
            "description": "The sequence ID for this section",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldSectionName": {
            "description": "The name of this section",
            "type": "string"
          },
          "requiresAdministerMetadata": {
            "description": "Is the user required to have the Administer Metadata role permission in order to edit fields in this metadata section",
            "type": "boolean"
          },
          "requiresEntityEdit": {
            "description": "Is the user required to be able to edit the entity to which the metadata is associated to in order to edit metadata",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MetadataFieldSectionActionType": {
        "description": "Specific actions a user can take on metadata sections",
        "properties": {},
        "type": "string",
        "enum": [
          "EditSection",
          "AddField",
          "EditItem",
          "DeleteItem"
        ]
      },
      "PagingOfMetadataFieldSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/MetadataFieldSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "MetadataFieldSummaryModel": {
        "description": "Metadata field summary",
        "properties": {
          "containsPersonalInformation": {
            "description": "When this is set to true, the metadata will be obfuscated during export",
            "type": "boolean"
          },
          "defaultSortOrder": {
            "description": "Not currently utilized but the sort order for the metadata",
            "type": "integer",
            "format": "int32"
          },
          "fieldDataType": {
            "$ref": "#/components/schemas/EntityMetadataFieldDataType"
          },
          "metadataFieldId": {
            "description": "The sequence ID for this metadata field",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldName": {
            "description": "The name of this metadata field",
            "type": "string"
          },
          "metadataFieldSectionId": {
            "description": "The field section id that contains this field",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldSectionName": {
            "description": "The name of the field section",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EntityMetadataFieldDataType": {
        "description": "The data type for this field (string, number, date, etc)",
        "properties": {},
        "type": "string",
        "enum": [
          "String",
          "Boolean",
          "Number",
          "DateTime",
          "User"
        ]
      },
      "MetadataCreateArgs": {
        "description": "Create metadata args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MetadataCreateModel"
          }
        },
        "type": "object"
      },
      "MetadataCreateModel": {
        "description": "Model to create a new metadata field value",
        "properties": {
          "containsPersonalInformation": {
            "description": "When this is set to true, the metadata will be obfuscated during export",
            "type": "boolean"
          },
          "fieldDataType": {
            "description": "Specify the specific data type desired.  Only required when also creating a new field.  If field MetadataFieldId is passed or a field already exists with the passed MetadataFieldName this is ignored.  Certain data types can also be inferred from which value field is set, but some require this to be explicitly set like User.",
            "type": "string"
          },
          "metadataFieldId": {
            "description": "The specific field ID can be passed and in this case MetadataFieldName and MetadataFieldTypeId are ignored",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldName": {
            "description": "When the field ID is not know this will create a field with this name.  If the field name does not already exist a new one will be created.",
            "type": "string"
          },
          "metadataFieldSectionDescription": {
            "description": "When the field section ID is not know this will create a field section with this description.  If MetadataFieldSectionId is passed or a section with the name MetadataFieldSectionName this field is ignored.",
            "type": "string"
          },
          "metadataFieldSectionId": {
            "description": "The specific field section ID can be passed and in this case MetadataFieldSectionName is ignored",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldSectionName": {
            "description": "When the field section ID is not know this will create a field section with this name.  If the field section name does not already exist a new one will be created.  If MetadataFieldSectionId is passed this field is ignored.",
            "type": "string"
          },
          "metadataFieldSectionRequiresAdministerMetadata": {
            "description": "When the field section ID is not know this will create a field section with this setting as to whether the Administer Metadata permission is required for edit.  If MetadataFieldSectionId is passed or a section with the name MetadataFieldSectionName, this field is ignored.",
            "type": "boolean"
          },
          "metadataFieldSectionRequiresEntityEdit": {
            "description": "When the field section ID is not know this will create a field section with this setting as to whether edit permission is required for edit. Otherwise view will be required.  If MetadataFieldSectionId is passed or a section with the name MetadataFieldSectionName, this field is ignored.",
            "type": "boolean"
          },
          "valueBit": {
            "description": "When the field is a boolean it should assign this field on create for the value",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "When the field is a date it should assign this field on create for the value",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "When the field is a user it should assign this field on create for the value",
            "type": "integer",
            "format": "int32"
          },
          "valueNumber": {
            "description": "When the field is a number it should assign this field on create for the value",
            "type": "number",
            "format": "double"
          },
          "valueString": {
            "description": "When the field is a string it should assign this field on create for the value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetadataModel": {
        "description": "A single record of metadata that is associated to one entity",
        "properties": {
          "containsPersonalInformation": {
            "description": "When this is set to true, the metadata will be obfuscated during export",
            "type": "boolean"
          },
          "createDateTime": {
            "description": "When was this field value entered",
            "type": "string",
            "format": "date-time"
          },
          "createUserId": {
            "description": "The user id of the user who entered this field value",
            "type": "integer",
            "format": "int32"
          },
          "createUserName": {
            "description": "Who entered this field value",
            "type": "string"
          },
          "itemId": {
            "description": "The ID of the entity to which this value is associated",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldId": {
            "description": "The metadata field ID for this value",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldName": {
            "description": "The field name for this metadata value",
            "type": "string"
          },
          "metadataFieldSectionId": {
            "description": "The section ID in which this metadata value resides",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldSectionName": {
            "description": "The section name in which this metadata value resides",
            "type": "string"
          },
          "metadataFieldTypeId": {
            "description": "The ID for the field type in which this metadata value resides",
            "type": "integer",
            "format": "int32"
          },
          "metadataFieldTypeName": {
            "description": "The field name in which this metadata value resides",
            "type": "string"
          },
          "metadataItemDataId": {
            "description": "The sequence ID for this specific metadata value record",
            "type": "integer",
            "format": "int32"
          },
          "metadataTypeName": {
            "description": "The type name in which this metadata value resides",
            "type": "string"
          },
          "sortOrder": {
            "description": "Not currently utilized, but the sort order for the metadata",
            "type": "integer",
            "format": "int32"
          },
          "valueBit": {
            "description": "The value when the metadata field is a boolean",
            "type": "boolean"
          },
          "valueDateTime": {
            "description": "The value when the metadata field is a date",
            "type": "string",
            "format": "date-time"
          },
          "valueInt": {
            "description": "The value when the metadata field is a user",
            "type": "integer",
            "format": "int32"
          },
          "valueNumber": {
            "description": "The value when the metadata field is a number",
            "type": "number",
            "format": "double"
          },
          "valueString": {
            "description": "The value when the metadata field is a string",
            "type": "string"
          },
          "valueUserDisplayName": {
            "description": "The user display name when the metadata field is a user type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetadataUpdateArgs": {
        "description": "Metadata update args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MetadataUpdateModel"
          }
        },
        "type": "object"
      },
      "MetadataUpdateModel": {
        "description": "Metadata item to update",
        "properties": {
          "containsPersonalInformation": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "metadataItemDataId": {
            "description": "The sequence ID for the metadata field",
            "type": "integer",
            "format": "int32"
          },
          "valueBit": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "valueDateTime": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalDateTime"
          },
          "valueInt": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "valueNumber": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalDouble"
          },
          "valueString": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalDouble": {
        "description": "The value when the field is a number",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "number",
            "format": "double"
          }
        },
        "type": "object"
      },
      "MetadataFieldSectionUpdateArgs": {
        "description": "Metadata field section update args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MetadataFieldSectionUpdateModel"
          }
        },
        "type": "object"
      },
      "MetadataFieldSectionUpdateModel": {
        "description": "Model to update a metadata field section",
        "properties": {
          "metadataFieldSectionDescription": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "metadataFieldSectionName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "metadataFieldSectionRequiresAdministerMetadata": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "metadataFieldSectionRequiresEntityEdit": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "MobileConfigurationModel": {
        "description": "Mobile Configuration Model",
        "properties": {
          "maximumTimeOfflineMinutes": {
            "description": "Maximum Time for Offline Access on Mobile Devices",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "OneTimePasswordCodeModel": {
        "description": "OneTimePasswordCodeModel[]",
        "properties": {
          "code": {
            "description": "Code",
            "type": "string"
          },
          "durationSeconds": {
            "description": "DurationSeconds",
            "type": "integer",
            "format": "int32"
          },
          "remainingSeconds": {
            "description": "RemainingSeconds",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfPasswordRequirementsSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/PasswordRequirementsSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PasswordRequirementsSummary": {
        "description": "Query results",
        "properties": {
          "description": {
            "description": "Description",
            "type": "string"
          },
          "isDefault": {
            "description": "Is this the default password requirement",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "passwordRequirementId": {
            "description": "Unique ID for this Password Requirement",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PasswordRequirementCreateArgs": {
        "description": "Password Requirement Create Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PasswordRequirementCreateModel"
          }
        },
        "type": "object"
      },
      "PasswordRequirementCreateModel": {
        "description": "Password Requirement Create Model",
        "properties": {
          "allowedCharacterSetId": {
            "description": "Allowed Character Set",
            "type": "integer",
            "format": "int32"
          },
          "allowMinimumCharacterSets": {
            "description": "Allow Minimum Character Sets",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "isDefault": {
            "description": "Is Default",
            "type": "boolean"
          },
          "maxPasswordLength": {
            "description": "Maximum Password Length",
            "type": "integer",
            "format": "int32"
          },
          "minimumRequiredCharacterSets": {
            "description": "Minimum Required Character Sets",
            "type": "integer",
            "format": "int32"
          },
          "minPasswordLength": {
            "description": "Minimum Password Length",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "passwordRequirementRules": {
            "description": "Password Requirement Rule Create Models",
            "items": {
              "$ref": "#/components/schemas/PasswordRequirementRuleCreateModel"
            },
            "type": "array"
          },
          "preventDictionaryWords": {
            "description": "Prevent Dictionary Words",
            "type": "boolean"
          },
          "preventSequentialPattern": {
            "description": "Prevent Sequential Pattern",
            "type": "boolean"
          },
          "preventSpatialPattern": {
            "description": "Prevent Spacial Pattern",
            "type": "boolean"
          },
          "preventUsername": {
            "description": "Prevent Username",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PasswordRequirementRuleCreateModel": {
        "description": "Password Requirement Rule Create Models",
        "properties": {
          "characterSetId": {
            "description": "Character Set",
            "type": "integer",
            "format": "int32"
          },
          "minCharactersRequired": {
            "description": "Minimum Characters Required",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequirementType": {
            "$ref": "#/components/schemas/PasswordRequirementType"
          }
        },
        "type": "object"
      },
      "PasswordRequirementType": {
        "description": "Password Requirement Type",
        "properties": {},
        "type": "string",
        "enum": [
          "MinimumOf",
          "StartsWith",
          "EndsWith"
        ]
      },
      "PasswordRequirementModel": {
        "description": "Password Requirement Model",
        "properties": {
          "allowedCharacterSet": {
            "$ref": "#/components/schemas/CharacterSetSummary"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "example": {
            "description": "An example of the password",
            "type": "string"
          },
          "isDefault": {
            "description": "Is Default",
            "type": "boolean"
          },
          "maxPasswordLength": {
            "description": "Maximum Password Length",
            "type": "integer",
            "format": "int32"
          },
          "minPasswordLength": {
            "description": "Minimum Password Length",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "passwordDictionaries": {
            "description": "Password Dictionaries",
            "items": {
              "$ref": "#/components/schemas/PasswordDictionarySummary"
            },
            "type": "array"
          },
          "passwordRequirementId": {
            "description": "Password Requirement Id",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequirementRules": {
            "description": "Password Requirement Rules",
            "items": {
              "$ref": "#/components/schemas/PasswordRequirementRuleSummary"
            },
            "type": "array"
          },
          "preventDictionaryWords": {
            "description": "Prevent Dictionary Words",
            "type": "boolean"
          },
          "preventSequentialPattern": {
            "description": "Prevent Sequential Pattern",
            "type": "boolean"
          },
          "preventSpatialPattern": {
            "description": "Prevent Spacial Pattern",
            "type": "boolean"
          },
          "preventUsername": {
            "description": "Prevent Username",
            "type": "boolean"
          },
          "secretUsage": {
            "description": "A count of secrets using the requirement",
            "type": "integer",
            "format": "int32"
          },
          "typeUsage": {
            "description": "A list of secret templates using the password requirement",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PasswordDictionarySummary": {
        "description": "Password Dictionary Summary",
        "properties": {
          "name": {
            "description": "Password Dictionary Name",
            "type": "string"
          },
          "passwordDictionaryId": {
            "description": "Password Dictionary Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PasswordRequirementRuleSummary": {
        "description": "Password Requirement Rule Summary",
        "properties": {
          "characterSet": {
            "$ref": "#/components/schemas/CharacterSetSummary"
          },
          "minCharactersRequired": {
            "description": "Minimum Characters Required",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequirementId": {
            "description": "Password Requirement Id",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequirementRuleId": {
            "description": "Password Requirement Rule Id",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequirementType": {
            "$ref": "#/components/schemas/PasswordRequirementType"
          }
        },
        "type": "object"
      },
      "PasswordRequirementPatchArgs": {
        "description": "PasswordRequirementPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PasswordRequirementPatchModel"
          }
        },
        "type": "object"
      },
      "PasswordRequirementPatchModel": {
        "description": "Password Requirement Patch Model",
        "properties": {
          "allowedCharacterSet": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "isDefault": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "maxPasswordLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "minimumRequiredCharacterSets": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "minPasswordLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "passwordDictionaries": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "preventDictionaryWords": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "preventSequentialPattern": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "preventSpatialPattern": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "preventUsername": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "PasswordRequirementRuleUpdateArgs": {
        "description": "Password Requirement Rule Patch Args",
        "properties": {
          "data": {
            "description": "Password Requirement Rule Patch Args",
            "items": {
              "$ref": "#/components/schemas/PasswordRequirementRuleUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PasswordRequirementRuleUpdateModel": {
        "description": "Password Requirement Rule Patch Model",
        "properties": {
          "characterSetId": {
            "description": "Character Set",
            "type": "integer",
            "format": "int32"
          },
          "minCharactersRequired": {
            "description": "Minimum Characters Required",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequirementRuleId": {
            "description": "Password Requirement Rule Id",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequirementType": {
            "$ref": "#/components/schemas/PasswordRequirementType"
          }
        },
        "type": "object"
      },
      "PbaConfigurationModel": {
        "description": "PBA Configuration",
        "properties": {
          "allowImportData": {
            "description": "Allow Import Data",
            "type": "boolean"
          },
          "challengeEnabled": {
            "description": "Challenge Enabled",
            "type": "boolean"
          },
          "challengeLockoutIntegratedEnabled": {
            "description": "Challenge Lockout Integrated Enabled",
            "type": "boolean"
          },
          "challengeLockoutSamlEnabled": {
            "description": "Challenge Lockout SAML Enabled",
            "type": "boolean"
          },
          "enabled": {
            "description": "Enabled",
            "type": "boolean"
          },
          "encryptionEnabled": {
            "description": "Encryption Enabled",
            "type": "boolean"
          },
          "eventDataUploadInterval": {
            "description": "Event Data Upload Interval",
            "type": "integer",
            "format": "int32"
          },
          "eventDataUploadSizeThreshold": {
            "description": "Event Data Upload Size Threshold",
            "type": "integer",
            "format": "int32"
          },
          "externalPbaUrl": {
            "description": "External PBA URL",
            "type": "string"
          },
          "fileUploadEnabled": {
            "description": "File Upload Enabled",
            "type": "boolean"
          },
          "firstEnabledDate": {
            "description": "First Enabled Date",
            "type": "string",
            "format": "date-time"
          },
          "metadataInterval": {
            "description": "Metadata Interval",
            "type": "integer",
            "format": "int32"
          },
          "metadataLastSynchronized": {
            "description": "Metadata Last Synchronized",
            "type": "string",
            "format": "date-time"
          },
          "pbaIntegrationKeySet": {
            "description": "PBA Integration Key Set",
            "type": "boolean"
          },
          "pbaKey": {
            "description": "PBA Key",
            "type": "string",
            "format": "uuid"
          },
          "pbaKeyCreatedDate": {
            "description": "PBA Key Created Date",
            "type": "string",
            "format": "date-time"
          },
          "pbaKeyStatus": {
            "$ref": "#/components/schemas/ApplicationKeyStatus"
          },
          "respectOwnerEditorRequireApprovalEnabled": {
            "description": "Respect Owner Editor Require Approval Enabled",
            "type": "boolean"
          },
          "retentionDays": {
            "description": "Retention Days",
            "type": "integer",
            "format": "int32"
          },
          "secretServerKey": {
            "description": "Secret Server Key",
            "type": "string",
            "format": "uuid"
          },
          "secretServerKeyCreatedDate": {
            "description": "Secret Server Key Created Date",
            "type": "string",
            "format": "date-time"
          },
          "secretServerKeyStatus": {
            "$ref": "#/components/schemas/ApplicationKeyStatus"
          },
          "siteId": {
            "description": "Id of Site",
            "type": "integer",
            "format": "int32"
          },
          "storageDirectoryPath": {
            "description": "Storage Directory Path",
            "type": "string"
          },
          "warningMessage": {
            "description": "Warning Message",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicationKeyStatus": {
        "description": "PBA Key Status",
        "properties": {},
        "type": "string",
        "enum": [
          "Unapproved",
          "Approved",
          "Disabled"
        ]
      },
      "PbaConfigurationUpdateArgs": {
        "description": "PbaConfigurationUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PbaConfigurationUpdateModel"
          }
        },
        "type": "object"
      },
      "PbaConfigurationUpdateModel": {
        "description": "Update PBA Configuration",
        "properties": {
          "challengeEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "challengeLockoutIntegratedEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "challengeLockoutSamlEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "encryptionEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "eventDataUploadInterval": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "eventDataUploadSizeThreshold": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "externalPbaUrl": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "fileUploadEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "metadataInterval": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "pbaIntegrationKey": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "respectOwnerEditorRequireApprovalEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "retentionDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "siteId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "storageDirectoryPath": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "PbaHistoricalImportStatusResponseMessage": {
        "description": "PbaHistoricalImportStatusResponseMessage",
        "properties": {
          "totalHistoricalEvents": {
            "description": "TotalHistoricalEvents",
            "type": "integer",
            "format": "int32"
          },
          "unprocessedHistoricalEvents": {
            "description": "UnprocessedHistoricalEvents",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PbaHistoricalImportArgs": {
        "description": "PbaHistoricalImportArgs",
        "properties": {
          "endDate": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "processImport": {
            "description": "ProcessImport",
            "type": "boolean"
          },
          "startDate": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          }
        },
        "type": "object"
      },
      "PbaHistoricalImportViewModel": {
        "description": "PBA Historical Import",
        "properties": {
          "numberOfEventsProcessed": {
            "description": "Number Of Events Processed",
            "type": "integer",
            "format": "int32"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PbaConfirmPairModel": {
        "description": "PBA Confirm Pair",
        "properties": {
          "alreadyApproved": {
            "description": "Already Approved",
            "type": "boolean"
          },
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlatformSynchronizationStatus": {
        "description": "Platform Synchronization Status",
        "properties": {
          "endDateTime": {
            "description": "The date and time that the last synchronization ended.  If a synchronization is currently running this will be empty.",
            "type": "string",
            "format": "date-time"
          },
          "errorCount": {
            "description": "The number of errors since the last synchronization start time",
            "type": "integer",
            "format": "int32"
          },
          "lastLogEntry": {
            "description": "Log Entry used for parsing",
            "type": "string"
          },
          "lastSyncGroupsCreated": {
            "description": "Number of groups created during last sync",
            "type": "integer",
            "format": "int32"
          },
          "lastSyncUsersAddedToGroups": {
            "description": "Number of users that were added to any platform group",
            "type": "integer",
            "format": "int32"
          },
          "lastSyncUsersRemovedFromGroups": {
            "description": "Number of users that were removed from any platform group",
            "type": "integer",
            "format": "int32"
          },
          "nextSynchronizationDateTime": {
            "description": "The next time the synchronization is expected to run",
            "type": "string",
            "format": "date-time"
          },
          "startDateTime": {
            "description": "The date and time that the last synchronization started.  This will be empty if a synchronization has never been run.",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "ProxyClientOverrideSummary": {
        "description": "ProxyClientOverrideSummary",
        "properties": {
          "clientOverrideId": {
            "description": "ClientOverrideId",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRange": {
            "description": "IpAddressRange",
            "type": "string"
          },
          "terminalClientType": {
            "$ref": "#/components/schemas/ProxyClientType"
          }
        },
        "type": "object"
      },
      "ProxyClientType": {
        "description": "TerminalClientType",
        "properties": {},
        "type": "string",
        "enum": [
          "Unknown",
          "AllowList",
          "BlockList"
        ]
      },
      "SshProxyConfigurationViewModel": {
        "description": "SshProxyConfigurationViewModel",
        "properties": {
          "availablePortRange": {
            "description": "Range of unused ports available on the SSH Proxy endpoint to be used for Jumpbox port forwarding",
            "type": "string"
          },
          "daysToKeepOperationalLogs": {
            "description": "The number of days to store SSH proxy logs before they are rolled over",
            "type": "integer",
            "format": "int32"
          },
          "enablePasswordHiding": {
            "description": "Enable to hide passwords from SSH keystroke capture. This prevents logging user input on lines that are determined to be a password prompt.",
            "type": "boolean"
          },
          "enableProxyBlockListing": {
            "description": "Enable block listing of IP Addresses that connect and fail to authenticate too many times",
            "type": "boolean"
          },
          "enableProxyInactivityTimeout": {
            "description": "Whether or not the proxy should disconnect inactive sessions",
            "type": "boolean"
          },
          "enableSshProxy": {
            "description": "Whether or not the SSH proxy is enabled",
            "type": "boolean"
          },
          "enableSshPublicKeyAuth": {
            "description": "Whether or not the SSH Terminal can allow key authentication",
            "type": "boolean"
          },
          "enableSshTerminal": {
            "description": "Whether or not the SSH terminal is enabled",
            "type": "boolean"
          },
          "enableSshTunneling": {
            "description": "Whether or not to allow SSH tunneling through the proxy for proxied RDP sessions",
            "type": "boolean"
          },
          "enableTerminalInactivityTimeout": {
            "description": "Whether or not the SSH terminal should disconnect inactive sessions",
            "type": "boolean"
          },
          "enableWindowTitleChangeCommand": {
            "description": "Send window title change command on startup",
            "type": "boolean"
          },
          "isCloud": {
            "description": "IsCloud",
            "type": "boolean"
          },
          "passwordRegexFilter": {
            "description": "Regular Expression used to identify password prompts. The default expression search for either prompts beginning with 'sudo password for' or prompts ending with 'password:'",
            "type": "string"
          },
          "proxyAutoBlockListingMaxNum": {
            "description": "The number of failed authentication attempts before being blocked",
            "type": "integer",
            "format": "int32"
          },
          "proxyAutoBlockListingTimeFrameMinutes": {
            "description": "The time frame in which all the failed attempts must happen before being blocked",
            "type": "integer",
            "format": "int32"
          },
          "proxyInactivityTimeoutSeconds": {
            "description": "The amount of time in seconds to wait before disconnecting inactive proxy sessions",
            "type": "integer",
            "format": "int32"
          },
          "proxyNewSecretsByDefault": {
            "description": "Whether or not new SSH-enabled secrets should be created with 'Proxy Enabled' set",
            "type": "boolean"
          },
          "sshHostKey": {
            "description": "The host key that will the proxy will serve",
            "type": "string"
          },
          "sshProxyBanner": {
            "description": "The banner that is display when someone opens an shell connection to the proxy",
            "type": "string"
          },
          "sshProxyHostFingerprint": {
            "description": "The fingerprint of the host key that the proxy will serve",
            "type": "string"
          },
          "sshProxyPort": {
            "description": "The port that that SSH proxy runs on",
            "type": "integer",
            "format": "int32"
          },
          "sshTerminalBanner": {
            "description": "The banner that is displayed when someone authenticates to the SSH terminal",
            "type": "string"
          },
          "terminalInactivityTimeoutSeconds": {
            "description": "The amount of time in seconds to wait before disconnecting inactive terminal sessions",
            "type": "integer",
            "format": "int32"
          },
          "tunnelKeepAliveInSeconds": {
            "description": "Keep alive signals to local port forwarding tunnels at this interval (in seconds). Prevents port forwarding tunnels from closing. (0-86400) ",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RdpProxyConfigurationViewModel": {
        "description": "RdpProxyConfigurationViewModel",
        "properties": {
          "allowSiteSelectionForActiveDirectoryAccounts": {
            "description": "Allows users to select a site when launching or generating proxy credentials for a RDP proxied secret",
            "type": "boolean"
          },
          "daysToKeepOperationalLogs": {
            "description": "The number of days to store RDP proxy logs before they are rolled over",
            "type": "integer",
            "format": "int32"
          },
          "enableRdpProxy": {
            "description": "Whether or not to enable the RDP proxy",
            "type": "boolean"
          },
          "enableRemoteHostValidation": {
            "description": "Whether or not to enforce certificate validation on remote hosts that the proxy connects to",
            "type": "boolean"
          },
          "isCloud": {
            "description": "IsCloud",
            "type": "boolean"
          },
          "proxyNewSecretsByDefault": {
            "description": "Whether or not new RDP-enabled secrets should be created with 'Proxy Enabled' set",
            "type": "boolean"
          },
          "rdpProxyPort": {
            "description": "The port that the RDP proxy will run on",
            "type": "integer",
            "format": "int32"
          },
          "rdpServerCertificate": {
            "$ref": "#/components/schemas/RdpProxyCertificateViewModel"
          },
          "rdpServerCertificateMultipart": {
            "description": "The certificate that is server when connections begin to the RDP proxy (used \"Content-Type: multipart/form-data\" only)",
            "type": "file"
          },
          "rdpServerCertificateMultipartPassword": {
            "description": "The password used to protect the certificate (only used for updating with \"Content-Type: multipart/form-data\" only)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RdpProxyCertificateViewModel": {
        "description": "The certificate that is server when connections begin to the RDP proxy (used \"Content-Type: application/json\" only)",
        "properties": {
          "rdpServerCertificate": {
            "description": "The certificate (x509/pfx) that is served to users connecting to the RDP proxy.",
            "type": "string",
            "format": "binary"
          },
          "rdpServerCertificateFileName": {
            "description": "The name of the RDP server certificate file",
            "type": "string"
          },
          "rdpServerCertificatePassword": {
            "description": "The password used to protect the certificate (only used for updating)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProxyExplanationsViewModel": {
        "description": "ProxyExplanationsViewModel",
        "properties": {
          "rdpProxyExplanation": {
            "description": "RdpProxyExplanation",
            "type": "string"
          },
          "sshProxyExplanation": {
            "$ref": "#/components/schemas/DictionaryOfStringAndString"
          },
          "sshTerminalBlockListExplanation": {
            "description": "SshTerminalBlockListExplanation",
            "type": "string"
          },
          "sshTerminalBlockListOverrideExplanation": {
            "description": "SshTerminalBlockListOverrideExplanation",
            "type": "string"
          },
          "sshTerminalExplanation": {
            "description": "SshTerminalExplanation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfProxyAuditModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ProxyAuditModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ProxyAuditModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProxyEndpointsViewModel": {
        "description": "ProxyEndpointsViewModel",
        "properties": {
          "defaultRdpProxyPort": {
            "description": "DefaultRdpProxyPort",
            "type": "integer",
            "format": "int32"
          },
          "defaultSshProxyPort": {
            "description": "DefaultSshProxyPort",
            "type": "integer",
            "format": "int32"
          },
          "engines": {
            "description": "Engines",
            "items": {
              "$ref": "#/components/schemas/ProxyEngineViewModel"
            },
            "type": "array"
          },
          "nodes": {
            "description": "Nodes",
            "items": {
              "$ref": "#/components/schemas/ProxyNodeViewModel"
            },
            "type": "array"
          },
          "rdpProxyEnabled": {
            "description": "RdpProxyEnabled",
            "type": "boolean"
          },
          "sites": {
            "description": "Sites",
            "items": {
              "$ref": "#/components/schemas/ProxySiteViewModel"
            },
            "type": "array"
          },
          "sshProxyEnabled": {
            "description": "SshProxyEnabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ProxyEngineViewModel": {
        "description": "Engines",
        "properties": {
          "bindIpAddress": {
            "description": "BindIpAddress",
            "type": "string"
          },
          "engineId": {
            "description": "EngineId",
            "type": "integer",
            "format": "int32"
          },
          "friendlyName": {
            "description": "FriendlyName",
            "type": "string"
          },
          "publicHost": {
            "description": "PublicHost",
            "type": "string"
          },
          "siteName": {
            "description": "SiteName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProxyNodeViewModel": {
        "description": "Nodes",
        "properties": {
          "bindIpAddress": {
            "description": "BindIpAddress",
            "type": "string"
          },
          "jumpboxAvailablePortRange": {
            "description": "JumpboxAvailablePortRange",
            "type": "string"
          },
          "machineName": {
            "description": "MachineName",
            "type": "string"
          },
          "nodeId": {
            "description": "NodeId",
            "type": "integer",
            "format": "int32"
          },
          "publicHost": {
            "description": "PublicHost",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProxySiteViewModel": {
        "description": "Sites",
        "properties": {
          "enableRdpProxy": {
            "description": "EnableRdpProxy",
            "type": "boolean"
          },
          "enableSshProxy": {
            "description": "EnableSshProxy",
            "type": "boolean"
          },
          "rdpProxyPort": {
            "description": "RdpProxyPort",
            "type": "integer",
            "format": "int32"
          },
          "rdpProxyPortInherited": {
            "description": "RdpProxyPortInherited",
            "type": "boolean"
          },
          "siteId": {
            "description": "SiteId",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "SiteName",
            "type": "string"
          },
          "sshJumpboxAvailablePortRange": {
            "description": "SshJumpboxAvailablePortRange",
            "type": "string"
          },
          "sshProxyPort": {
            "description": "SshProxyPort",
            "type": "integer",
            "format": "int32"
          },
          "sshProxyPortInherited": {
            "description": "SshProxyPortInherited",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfProxyClientSummaryAndSshProxyClientsFilterQuery": {
        "description": "Specify filtering, paging, sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "$ref": "#/components/schemas/SshProxyClientsFilterQuery"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ProxyClientSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshProxyClientsFilterQuery": {
        "description": "Additional query options",
        "properties": {
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "terminalClientType": {
            "description": "TerminalClientType",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProxyClientSummary": {
        "description": "Query results",
        "properties": {
          "clientId": {
            "description": "ClientId",
            "type": "integer",
            "format": "int32"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "lastConnectionDate": {
            "description": "LastConnectionDate",
            "type": "string",
            "format": "date-time"
          },
          "terminalClientType": {
            "$ref": "#/components/schemas/ProxyClientType"
          }
        },
        "type": "object"
      },
      "PagingOfProxyClientHistorySummaryAndSshProxyClientHistoryFilterQuery": {
        "description": "Specify filtering, paging, sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "$ref": "#/components/schemas/SshProxyClientHistoryFilterQuery"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ProxyClientHistorySummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshProxyClientHistoryFilterQuery": {
        "description": "Additional query options",
        "properties": {
          "authenticateResult": {
            "description": "AuthenticateResult",
            "type": "string"
          },
          "endDate": {
            "description": "EndDate",
            "type": "string"
          },
          "engineIdentityGuid": {
            "description": "EngineIdentityGuid",
            "type": "string"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "startDate": {
            "description": "StartDate",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProxyClientHistorySummary": {
        "description": "Query results",
        "properties": {
          "authenticateResult": {
            "$ref": "#/components/schemas/TerminalAuthenticateResult"
          },
          "createdDate": {
            "description": "CreatedDate",
            "type": "string",
            "format": "date-time"
          },
          "engineIdentityGuid": {
            "description": "EngineIdentityGuid",
            "type": "string"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TerminalAuthenticateResult": {
        "description": "AuthenticateResult",
        "properties": {},
        "type": "string",
        "enum": [
          "Unknown",
          "Successful",
          "Failed",
          "Refused"
        ]
      },
      "ProxyingStateModel": {
        "description": "ProxyingStateModel",
        "properties": {
          "showLogs": {
            "description": "If the logs should be shown",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GenerateRdpCertificateArgs": {
        "description": "GenerateRdpCertificateArgs",
        "properties": {
          "dnsName": {
            "description": "The DNS name to use when generating the self-signed certificate",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PasswordTypeModel": {
        "description": "Displays the properties of a Password Type",
        "properties": {
          "active": {
            "description": "Whether the Password Type is Active ",
            "type": "boolean"
          },
          "allowsPrivilegedAccount": {
            "description": "Allows a Default Privileged Account",
            "type": "boolean"
          },
          "canEdit": {
            "description": "Whether the Password Type can be edited",
            "type": "boolean"
          },
          "customPort": {
            "description": "Custom Port",
            "type": "integer",
            "format": "int32"
          },
          "exitCommand": {
            "description": "Exit Command",
            "type": "string"
          },
          "fields": {
            "description": "Password Type Fields",
            "items": {
              "$ref": "#/components/schemas/IRestPasswordTypeField"
            },
            "type": "array"
          },
          "hasCommands": {
            "description": "Whether Commands Exist",
            "type": "boolean"
          },
          "hasLDAPSettings": {
            "description": "Whether LDAP Settings Exist",
            "type": "boolean"
          },
          "heartbeatScriptArgs": {
            "description": "Heartbeat Script Args",
            "type": "string"
          },
          "heartbeatScriptId": {
            "description": "Heartbeat Script Id",
            "type": "integer",
            "format": "int32"
          },
          "ignoreSSL": {
            "description": "Whether Password Type ignores SSL warnings",
            "type": "boolean"
          },
          "isWeb": {
            "description": "Whether Is Web",
            "type": "boolean"
          },
          "ldapConnectionSettingsId": {
            "description": "LDAP Connection Settings Id",
            "type": "integer",
            "format": "int32"
          },
          "lineEnding": {
            "$ref": "#/components/schemas/LineEnding"
          },
          "mainframeConnectionString": {
            "description": "Mainframe Connection String",
            "type": "string"
          },
          "name": {
            "description": "Password Type Name",
            "type": "string"
          },
          "odbcConnectionString": {
            "description": "ODBC Connection String",
            "type": "string"
          },
          "passwordTypeId": {
            "description": "Password Type Id",
            "type": "integer",
            "format": "int32"
          },
          "rpcScriptArgs": {
            "description": "RPC Script Args",
            "type": "string"
          },
          "rpcScriptId": {
            "description": "RPC Script Id",
            "type": "integer",
            "format": "int32"
          },
          "runnerType": {
            "$ref": "#/components/schemas/RunnerType"
          },
          "scanItemTemplateId": {
            "description": "Scan Template Id",
            "type": "integer",
            "format": "int32"
          },
          "typeName": {
            "description": "Federator Type",
            "type": "string"
          },
          "useSSL": {
            "description": "Whether Password Type uses SSL",
            "type": "boolean"
          },
          "useUsernameAndPassword": {
            "description": "Whether Password Type uses both Username and Password",
            "type": "boolean"
          },
          "validForTakeover": {
            "description": "Whether is Valid For Takeover",
            "type": "boolean"
          },
          "windowsCustomPorts": {
            "description": "Custom Ports for Windows",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IRestPasswordTypeField": {
        "description": "Password Type Fields",
        "properties": {
          "isOptional": {
            "description": "IsOptional",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "passwordTypeFieldId": {
            "description": "PasswordTypeFieldId",
            "type": "integer",
            "format": "int32"
          },
          "scanItemFieldId": {
            "description": "ScanItemFieldId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "LineEnding": {
        "description": "Line ending type",
        "properties": {},
        "type": "string",
        "enum": [
          "NewLine",
          "CarriageReturn",
          "CarriageReturnNewLine"
        ]
      },
      "RunnerType": {
        "description": "Runner Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Standard",
          "Legacy"
        ]
      },
      "PasswordTypeUpdateArgs": {
        "description": "PasswordTypeUpdateArgs",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "canEdit": {
            "description": "CanEdit",
            "type": "boolean"
          },
          "customPort": {
            "description": "CustomPort",
            "type": "integer",
            "format": "int32"
          },
          "exitCommand": {
            "description": "ExitCommand",
            "type": "string"
          },
          "hasCommands": {
            "description": "HasCommands",
            "type": "boolean"
          },
          "heartbeatScriptArgs": {
            "description": "HeartbeatScriptArgs",
            "type": "string"
          },
          "heartbeatScriptId": {
            "description": "HeartbeatScriptId",
            "type": "integer",
            "format": "int32"
          },
          "ignoreSSL": {
            "description": "IgnoreSSL",
            "type": "boolean"
          },
          "isWeb": {
            "description": "IsWeb",
            "type": "boolean"
          },
          "ldapConnectionSettingsId": {
            "description": "LdapConnectionSettingsId",
            "type": "integer",
            "format": "int32"
          },
          "lineEnding": {
            "$ref": "#/components/schemas/LineEnding"
          },
          "mainframeConnectionString": {
            "description": "MainframeConnectionString",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "odbcConnectionString": {
            "description": "ODBCConnectionString",
            "type": "string"
          },
          "rpcScriptArgs": {
            "description": "RPCScriptArgs",
            "type": "string"
          },
          "rpcScriptId": {
            "description": "RPCScriptId",
            "type": "integer",
            "format": "int32"
          },
          "runnerType": {
            "$ref": "#/components/schemas/RunnerType"
          },
          "scanItemTemplateId": {
            "description": "ScanItemTemplateId",
            "type": "integer",
            "format": "int32"
          },
          "useSSL": {
            "description": "UseSSL",
            "type": "boolean"
          },
          "useUsernameAndPassword": {
            "description": "UseUsernameAndPassword",
            "type": "boolean"
          },
          "validForTakeover": {
            "description": "ValidForTakeover",
            "type": "boolean"
          },
          "windowsCustomPorts": {
            "description": "WindowsCustomPorts",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfCustomCommandModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/CustomCommandModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CustomCommandModel": {
        "description": "Displays the properties of a Custom Command",
        "properties": {
          "command": {
            "description": "Command Text",
            "type": "string"
          },
          "commandTypeCode": {
            "description": "Command Type Code",
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "description": "Comment",
            "type": "string"
          },
          "concurrencyId": {
            "description": "Concurrency Id",
            "type": "string"
          },
          "customCommandId": {
            "description": "Custom Command Id",
            "type": "integer",
            "format": "int32"
          },
          "order": {
            "description": "Order number",
            "type": "integer",
            "format": "int32"
          },
          "passwordTypeId": {
            "description": "Password Type Id",
            "type": "integer",
            "format": "int32"
          },
          "pause": {
            "description": "Pause Duration (milliseconds)",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CustomCommandUpdateArgs": {
        "description": "CustomCommandUpdateArgs",
        "properties": {
          "command": {
            "description": "Command",
            "type": "string"
          },
          "commandTypeCode": {
            "description": "CommandTypeCode",
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "description": "Comment",
            "type": "string"
          },
          "concurrencyId": {
            "description": "ConcurrencyId",
            "type": "string"
          },
          "order": {
            "description": "Order",
            "type": "integer",
            "format": "int32"
          },
          "passwordTypeId": {
            "description": "PasswordTypeId",
            "type": "integer",
            "format": "int32"
          },
          "pause": {
            "description": "Pause",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfPasswordTypeSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/PasswordTypeSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PasswordTypeSummary": {
        "description": "Password Type summary",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "canEdit": {
            "description": "CanEdit",
            "type": "boolean"
          },
          "hasCommands": {
            "description": "HasCommands",
            "type": "boolean"
          },
          "heartbeatScriptId": {
            "description": "HeartbeatScriptId",
            "type": "integer",
            "format": "int32"
          },
          "ignoreSSL": {
            "description": "IgnoreSSL",
            "type": "boolean"
          },
          "isWeb": {
            "description": "IsWeb",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "passwordTypeId": {
            "description": "PasswordTypeId",
            "type": "integer",
            "format": "int32"
          },
          "requiredEdition": {
            "description": "RequiredEdition",
            "type": "string"
          },
          "rpcScriptId": {
            "description": "RPCScriptId",
            "type": "integer",
            "format": "int32"
          },
          "runnerType": {
            "$ref": "#/components/schemas/RunnerType"
          },
          "scanItemTemplateId": {
            "description": "ScanItemTemplateId",
            "type": "integer",
            "format": "int32"
          },
          "useSSL": {
            "description": "UseSSL",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PasswordTypeCreateArgs": {
        "description": "PasswordTypeCreateArgs",
        "properties": {
          "basePasswordTypeId": {
            "description": "BasePasswordTypeId",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomCommandCreateArgs": {
        "description": "CustomCommandCreateArgs",
        "properties": {
          "command": {
            "description": "Command",
            "type": "string"
          },
          "commandTypeCode": {
            "description": "CommandTypeCode",
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "description": "Comment",
            "type": "string"
          },
          "passwordTypeId": {
            "description": "PasswordTypeId",
            "type": "integer",
            "format": "int32"
          },
          "pause": {
            "description": "Pause",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportModel": {
        "description": "Report",
        "properties": {
          "categoryId": {
            "description": "The Report Category Id",
            "type": "integer",
            "format": "int32"
          },
          "chartType": {
            "description": "The report chart Type.  Null if no chart",
            "type": "string"
          },
          "description": {
            "description": "Report Description",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the Report is active",
            "type": "boolean"
          },
          "enableInheritPermissions": {
            "description": "When true, permissions will be inherited from the report category in which the report resides.",
            "type": "boolean"
          },
          "id": {
            "description": "Report ID",
            "type": "integer",
            "format": "int32"
          },
          "is3DReport": {
            "description": "Whether the Report chart is displayed in 3d",
            "type": "boolean"
          },
          "name": {
            "description": "Report name",
            "type": "string"
          },
          "pageSize": {
            "description": "The page size of the report",
            "type": "integer",
            "format": "int32"
          },
          "reportSql": {
            "description": "The SQL used to generate the report",
            "type": "string"
          },
          "systemReport": {
            "description": "Whether the Report is a system Report",
            "type": "boolean"
          },
          "useDatabasePaging": {
            "description": "When true paging of a report will be done in SQL server.  Not all SQL is compatible with this option.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReportUpdateArgs": {
        "description": "Report update options",
        "required": [
          "id"
        ],
        "properties": {
          "categoryId": {
            "description": "The Category that the report should be in",
            "type": "integer",
            "format": "int32"
          },
          "chartType": {
            "description": "The Chart type to use for the report",
            "type": "string"
          },
          "description": {
            "description": "The description of the new report",
            "type": "string"
          },
          "dualControlApproval": {
            "$ref": "#/components/schemas/DualControlApproval"
          },
          "id": {
            "description": "The ID of the Report to update. Must match the value in the path",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "is3DReport": {
            "description": "If the report chart should be 3D or not",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the new report",
            "type": "string"
          },
          "pageSize": {
            "description": "The number of records that the report should return per page",
            "type": "integer",
            "format": "int32"
          },
          "reportSql": {
            "description": "The SQL query that defines the report",
            "type": "string"
          },
          "useDatabasePaging": {
            "description": "If true the report will attempt to do paging in the database.  If false the paging will occur on the application server.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DualControlApproval": {
        "description": "The Dual control approval needed to update the report",
        "properties": {
          "domainId": {
            "description": "DomainId",
            "type": "integer",
            "format": "int32"
          },
          "password": {
            "description": "Password",
            "type": "string"
          },
          "twoFactor": {
            "description": "TwoFactor",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportCategoryDetailModel": {
        "description": "Report Category Detail",
        "properties": {
          "reportCategoryDescription": {
            "description": "Report Category Description",
            "type": "string"
          },
          "reportCategoryId": {
            "description": "Report Category Id",
            "type": "integer",
            "format": "int32"
          },
          "reportCategoryName": {
            "description": "Report Category Name",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort Order in which the category should appear",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportCategoryUpdateArgs": {
        "description": "Report Category Update Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportCategoryUpdateModel"
          }
        },
        "type": "object"
      },
      "ReportCategoryUpdateModel": {
        "description": "Report Category Update Model",
        "properties": {
          "reportCategoryDescription": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "reportCategoryName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "ReportScheduleModel": {
        "description": "Report Schedule Model",
        "properties": {
          "customParameterValue": {
            "description": "Custom Parameter Value",
            "type": "string"
          },
          "endDateParameterSpecificDateValue": {
            "description": "Specific Date Value for when Specfic date is specified for EndDateParameterValue",
            "type": "string",
            "format": "date-time"
          },
          "endDateParameterValue": {
            "description": "End Date Parameter Value",
            "type": "string"
          },
          "folderParameterValue": {
            "$ref": "#/components/schemas/ReportParameterValue"
          },
          "format": {
            "$ref": "#/components/schemas/ReportFormat"
          },
          "groupParameterValue": {
            "$ref": "#/components/schemas/ReportParameterValue"
          },
          "reportId": {
            "description": "Report Id",
            "type": "integer",
            "format": "int32"
          },
          "reportName": {
            "description": "Report Name",
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleViewModel"
          },
          "scheduleReportId": {
            "description": "Schedule Report Id",
            "type": "integer",
            "format": "int32"
          },
          "startDateParameterSpecificDateValue": {
            "description": "Specific Date Value for when Specfic date is specified for StartDateParameterValue",
            "type": "string",
            "format": "date-time"
          },
          "startDateParameterValue": {
            "description": "Start Date Parameter Value",
            "type": "string"
          },
          "userParameterValue": {
            "$ref": "#/components/schemas/ReportParameterValue"
          }
        },
        "type": "object"
      },
      "ReportParameterValue": {
        "description": "Folder Parameter Value",
        "properties": {
          "name": {
            "description": "Name of the Report Parameter",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/Object"
          },
          "valueDisplayName": {
            "description": "A display name representing the value.  For example, when a parameter is a user this will be the user display name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Object": {
        "description": "Value of the Report Parameter",
        "properties": {},
        "type": "object"
      },
      "ReportFormat": {
        "description": "How to show the report when emailed. Default is Inline which shows the report within the email. Otherwise, it will be an attachment in the selected format.",
        "properties": {},
        "type": "string",
        "enum": [
          "Html",
          "Csv"
        ]
      },
      "ScheduleViewModel": {
        "description": "Schedule",
        "properties": {
          "additionalEmailAddresses": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "changeType": {
            "$ref": "#/components/schemas/ViewFieldValueOfScheduleChangeType"
          },
          "days": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "emailGroups": {
            "$ref": "#/components/schemas/ViewFieldValueOfReportSubscriberArray"
          },
          "friday": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBoolean"
          },
          "healthCheck": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "historySize": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "monday": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBoolean"
          },
          "monthlyDay": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalScheduleMonthlyDayType"
          },
          "monthlyDayOfMonth": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "monthlyDayOrder": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalScheduleMonthlyDayOrderType"
          },
          "monthlyDayOrderRecurrence": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "monthlyDayRecurrence": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "monthlyScheduleType": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalScheduleMonthlyType"
          },
          "saturday": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBoolean"
          },
          "scheduleName": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "sendEmail": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "sendEmailWithHighPriority": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "startingOn": {
            "$ref": "#/components/schemas/ViewFieldValueOfDateTime"
          },
          "sunday": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBoolean"
          },
          "thursday": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBoolean"
          },
          "tuesday": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBoolean"
          },
          "wednesday": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalBoolean"
          },
          "weeks": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfScheduleChangeType": {
        "description": "ChangeType",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ScheduleChangeType"
          }
        },
        "type": "object"
      },
      "ScheduleChangeType": {
        "description": "Value",
        "properties": {},
        "type": "string",
        "enum": [
          "Daily",
          "Weekly",
          "Monthly"
        ]
      },
      "ReportSubscriber": {
        "description": "Value",
        "properties": {
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfOptionalBoolean": {
        "description": "Friday",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfOptionalScheduleMonthlyDayType": {
        "description": "MonthlyDay",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfOptionalScheduleMonthlyDayOrderType": {
        "description": "MonthlyDayOrder",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfOptionalScheduleMonthlyType": {
        "description": "MonthlyScheduleType",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfDateTime": {
        "description": "StartingOn",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "ReportScheduleUpdateArgs": {
        "description": "Report Schedule Update Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportScheduleUpdateModel"
          }
        },
        "type": "object"
      },
      "ReportScheduleUpdateModel": {
        "description": "Report Schedule Update Model",
        "properties": {
          "customParameterValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "endDateParameterSpecificDateValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalDateTime"
          },
          "endDateParameterValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalReportScheduleDateParameterType"
          },
          "folderParameterValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "format": {
            "$ref": "#/components/schemas/UpdateFieldValueOfReportFormat"
          },
          "groupParameterValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleUpdateModel"
          },
          "startDateParameterSpecificDateValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalDateTime"
          },
          "startDateParameterValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalReportScheduleDateParameterType"
          },
          "userParameterValue": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalReportScheduleDateParameterType": {
        "description": "End Date Parameter Value",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfReportFormat": {
        "description": "How to show the report when emailed. Inline will show the report within the email. Otherwise, it will be an attachment.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/ReportFormat"
          }
        },
        "type": "object"
      },
      "ScheduleUpdateModel": {
        "description": "Schedule",
        "properties": {
          "additionalEmailAddresses": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "changeType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfScheduleChangeType"
          },
          "days": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "emailGroups": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "friday": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "healthCheck": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "historySize": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "monday": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "monthlyDay": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalScheduleMonthlyDayType"
          },
          "monthlyDayOfMonth": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "monthlyDayOrder": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalScheduleMonthlyDayOrderType"
          },
          "monthlyDayOrderRecurrence": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "monthlyDayRecurrence": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "monthlyScheduleType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalScheduleMonthlyType"
          },
          "saturday": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "scheduleName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sendEmail": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "sendEmailWithHighPriority": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "startingOn": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDateTime"
          },
          "sunday": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "thursday": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "tuesday": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "wednesday": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "weeks": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfScheduleChangeType": {
        "description": "ChangeType",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/ScheduleChangeType"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalScheduleMonthlyDayType": {
        "description": "MonthlyDay",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalScheduleMonthlyDayOrderType": {
        "description": "MonthlyDayOrder",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalScheduleMonthlyType": {
        "description": "MonthlyScheduleType",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfReportAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ReportAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportAuditSummary": {
        "description": "Report Audit Summary",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "auditReportId": {
            "description": "Audit Report Id",
            "type": "integer",
            "format": "int32"
          },
          "database": {
            "description": "Database",
            "type": "string"
          },
          "dateRecorded": {
            "description": "Date Recorded",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "Display Name",
            "type": "string"
          },
          "ipAddress": {
            "description": "IP Address",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "reportName": {
            "description": "Report Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfReportSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ReportSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportSummary": {
        "description": "Report summary",
        "properties": {
          "categoryId": {
            "description": "Category ID",
            "type": "integer",
            "format": "int32"
          },
          "enabled": {
            "description": "Whether the Report is active",
            "type": "boolean"
          },
          "id": {
            "description": "Report ID",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Report name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportCreateArgs": {
        "description": "Report create options",
        "required": [
          "name",
          "description",
          "categoryId",
          "reportSql"
        ],
        "properties": {
          "categoryId": {
            "description": "The Category that the report should be in",
            "type": "integer",
            "format": "int32"
          },
          "chartType": {
            "description": "The Chart type to use for the report",
            "type": "string"
          },
          "description": {
            "description": "The description of the new report",
            "type": "string"
          },
          "dualControlApproval": {
            "$ref": "#/components/schemas/DualControlApproval"
          },
          "is3DReport": {
            "description": "If the report chart should be 3D or not",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the new report",
            "type": "string"
          },
          "pageSize": {
            "description": "The number of records that the report should return per page",
            "type": "integer",
            "format": "int32"
          },
          "reportSql": {
            "description": "The SQL query that defines the report",
            "type": "string"
          },
          "useDatabasePaging": {
            "description": "If true the report will attempt to do paging in the database.  If false the paging will occur on the application server.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfReportLookup": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ReportLookup"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportLookup": {
        "description": "Simple Report representation",
        "properties": {
          "id": {
            "description": "Report ID",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Report name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportCategory": {
        "description": "ReportCategory[]",
        "properties": {
          "description": {
            "description": "The report category description",
            "type": "string"
          },
          "id": {
            "description": "The Id value of the report category",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name of the report category",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportCategoryCreateArgs": {
        "description": "Report Category Create Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportCategoryCreateModel"
          }
        },
        "type": "object"
      },
      "ReportCategoryCreateModel": {
        "description": "Report Category Create Model",
        "properties": {
          "reportCategoryDescription": {
            "description": "Report Category Description",
            "type": "string"
          },
          "reportCategoryName": {
            "description": "Report Category Name",
            "type": "string"
          },
          "sortOrder": {
            "description": "Report Category Sort Order, when null will be added at the end",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportChartType": {
        "description": "ReportChartType[]",
        "properties": {
          "id": {
            "description": "The int value of the report chart type",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name of the report chart type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportDefaultParams": {
        "description": "ReportExecution",
        "properties": {
          "defaultParameterValues": {
            "description": "DefaultParameterValues",
            "items": {
              "$ref": "#/components/schemas/ICustomReportParameterValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ICustomReportParameterValue": {
        "description": "DefaultParameterValues",
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/Object"
          },
          "valueDisplayName": {
            "description": "ValueDisplayName",
            "type": "string"
          },
          "variableName": {
            "description": "VariableName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IPagingOfReportScheduleSummaryModel": {
        "description": "IPagingOfReportScheduleSummaryModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/ReportScheduleSummaryModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReportScheduleSummaryModel": {
        "description": "Report Schedule Summary",
        "properties": {
          "changeType": {
            "$ref": "#/components/schemas/ScheduleChangeType"
          },
          "deleted": {
            "description": "Deleted",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "lastRun": {
            "description": "DateTime of Last Run",
            "type": "string",
            "format": "date-time"
          },
          "lastRunHistoryId": {
            "description": "HistoryId of Last Run",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "reportId": {
            "description": "Report Id",
            "type": "integer",
            "format": "int32"
          },
          "reportName": {
            "description": "Report Name",
            "type": "string"
          },
          "scheduleReportId": {
            "description": "Schedule Report Id",
            "type": "integer",
            "format": "int32"
          },
          "sendEmail": {
            "description": "Send Report via Email",
            "type": "boolean"
          },
          "storedReportCount": {
            "description": "Number of reports stored for this schedule",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportScheduleCreateArgs": {
        "description": "Report Schedule Create Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportScheduleCreateModel"
          }
        },
        "type": "object"
      },
      "ReportScheduleCreateModel": {
        "description": "Report Schedule Create Model",
        "properties": {
          "customParameterValue": {
            "description": "Custom Parameter Value",
            "type": "string"
          },
          "endDateParameterSpecificDateValue": {
            "description": "Specific Date Value for when Specfic date is specified for EndDateParameterValue",
            "type": "string",
            "format": "date-time"
          },
          "endDateParameterValue": {
            "description": "End Date Parameter Value",
            "type": "string"
          },
          "folderParameterValue": {
            "description": "Folder Parameter Value",
            "type": "integer",
            "format": "int32"
          },
          "groupParameterValue": {
            "description": "Group Parameter Value",
            "type": "integer",
            "format": "int32"
          },
          "reportId": {
            "description": "Report Id",
            "type": "integer",
            "format": "int32"
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleCreateModel"
          },
          "startDateParameterSpecificDateValue": {
            "description": "Specific Date Value for when Specfic date is specified for StartDateParameterValue",
            "type": "string",
            "format": "date-time"
          },
          "startDateParameterValue": {
            "description": "Start Date Parameter Value",
            "type": "string"
          },
          "userParameterValue": {
            "description": "User Parameter Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ScheduleCreateModel": {
        "description": "Schedule Create Model",
        "properties": {
          "additionalEmailAddresses": {
            "description": "Additional email addresses to receive the email",
            "type": "string"
          },
          "changeType": {
            "$ref": "#/components/schemas/ScheduleChangeType"
          },
          "days": {
            "description": "Days of Recurrence if Daily ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "emailGroups": {
            "description": "Groups to receive the email",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "friday": {
            "description": "Occurs on Fridays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "healthCheck": {
            "description": "Health Check",
            "type": "boolean"
          },
          "historySize": {
            "description": "The number of generated reports that will be saved. Null if All",
            "type": "integer",
            "format": "int32"
          },
          "monday": {
            "description": "Occurs on Mondays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "monthlyDay": {
            "description": "Day(s) used if DayOfWeekMonth and Monthly ScheduleType",
            "type": "string"
          },
          "monthlyDayOfMonth": {
            "description": "Day of Month if DayOfMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyDayOrder": {
            "description": "Day Order used if DayOfWeekMonth and Monthly ScheduleType",
            "type": "string"
          },
          "monthlyDayOrderRecurrence": {
            "description": "Months of Recurrence if DayOfWeekMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyDayRecurrence": {
            "description": "Months of Recurrence if DayOfMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyScheduleType": {
            "description": "Selection used if Monthly ScheduleType",
            "type": "string"
          },
          "saturday": {
            "description": "Occurs on Saturdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "scheduleName": {
            "description": "Schedule Name",
            "type": "string"
          },
          "sendEmail": {
            "description": "Send Report via Email",
            "type": "boolean"
          },
          "sendEmailWithHighPriority": {
            "description": "Send Email With High Priority",
            "type": "boolean"
          },
          "startingOn": {
            "description": "Day for Report Schedule to start",
            "type": "string",
            "format": "date-time"
          },
          "sunday": {
            "description": "Occurs on Sundays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "thursday": {
            "description": "Occurs on Thursdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "tuesday": {
            "description": "Occurs on Tuesdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "wednesday": {
            "description": "Occurs on Wednesdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "weeks": {
            "description": "Weeks of Recurrence if Weekly ScheduleType",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "IPagingOfReportScheduleHistorySummaryModel": {
        "description": "IPagingOfReportScheduleHistorySummaryModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/ReportScheduleHistorySummaryModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReportScheduleHistorySummaryModel": {
        "description": "Report Schedule History Summary",
        "properties": {
          "dateRun": {
            "description": "Date Schedule was Run",
            "type": "string",
            "format": "date-time"
          },
          "scheduleReportHistoryId": {
            "description": "Id of Schedule Report History",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "IPagingOfReportPermissionModel": {
        "description": "IPagingOfReportPermissionModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/ReportPermissionModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReportPermissionModel": {
        "description": "Report Permission Model",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/ReportPermissionGroupModel"
          },
          "rolePermission": {
            "$ref": "#/components/schemas/ReportRolePermissionModel"
          }
        },
        "type": "object"
      },
      "ReportPermissionGroupModel": {
        "description": "Report Permission Group Model",
        "properties": {
          "domainName": {
            "description": "Domain Name of Group/User",
            "type": "string"
          },
          "groupId": {
            "description": "Group Id of Group/User",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Name of Group/User",
            "type": "string"
          },
          "isPersonal": {
            "description": "True if User",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReportRolePermissionModel": {
        "description": "Report Role Permission Model",
        "properties": {
          "rolePermissionId": {
            "description": "Role Permission Id",
            "type": "integer",
            "format": "int32"
          },
          "rolePermissionName": {
            "description": "Role Permission Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportPermissionsUpdateArgs": {
        "description": "Report Permissions Update Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportPermissionsUpdateModel"
          }
        },
        "type": "object"
      },
      "ReportPermissionsUpdateModel": {
        "description": "Report Permissions Update Model",
        "properties": {
          "allowRemoveEdit": {
            "description": "If true, this will allow the removal of the edit permission for the current user.",
            "type": "boolean"
          },
          "enableInheritPermissions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "permissions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfReportPermissionUpdateModelArray"
          }
        },
        "type": "object"
      },
      "ReportPermissionUpdateModel": {
        "description": "Report Permission Update Model",
        "properties": {
          "groupId": {
            "description": "Group Id of the User/Group",
            "type": "integer",
            "format": "int32"
          },
          "rolePermissionId": {
            "description": "Role Permission Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "IPagingOfReportCategoryPermissionModel": {
        "description": "IPagingOfReportCategoryPermissionModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/ReportCategoryPermissionModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReportCategoryPermissionModel": {
        "description": "Report Category Permission Model",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/ReportPermissionGroupModel"
          },
          "rolePermission": {
            "$ref": "#/components/schemas/ReportRolePermissionModel"
          }
        },
        "type": "object"
      },
      "ReportCategoryPermissionsUpdateArgs": {
        "description": "Report Category Permissions Update Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportCategoryPermissionsUpdateModel"
          }
        },
        "type": "object"
      },
      "ReportCategoryPermissionsUpdateModel": {
        "description": "Report Category Permissions Update Model",
        "properties": {
          "allowRemoveEdit": {
            "description": "If true, this will allow the removal of the edit permission for the current user.",
            "type": "boolean"
          },
          "permissions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfReportCategoryPermissionUpdateModelArray"
          }
        },
        "type": "object"
      },
      "ReportCategoryPermissionUpdateModel": {
        "description": "Report Category Permission Update Model",
        "properties": {
          "groupId": {
            "description": "Group Id of the User/Group",
            "type": "integer",
            "format": "int32"
          },
          "rolePermissionId": {
            "description": "Role Permission Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportPermissionOptionModel": {
        "description": "ReportPermissionOptionModel[]",
        "properties": {
          "rolePermissionId": {
            "description": "Report Permission Id",
            "type": "integer",
            "format": "int32"
          },
          "rolePermissionName": {
            "description": "Report Permission Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportCategoryPermissionOptionModel": {
        "description": "ReportCategoryPermissionOptionModel[]",
        "properties": {
          "rolePermissionId": {
            "description": "Report Permission Id",
            "type": "integer",
            "format": "int32"
          },
          "rolePermissionName": {
            "description": "Report Permission Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportExportArgs": {
        "description": "Report query options",
        "properties": {
          "delimiter": {
            "description": "Delimiter",
            "type": "string"
          },
          "dualControlApproval": {
            "$ref": "#/components/schemas/DualControlApproval"
          },
          "encodeHtml": {
            "description": "True to encode data as HTML, defaults to true if not provided",
            "type": "boolean"
          },
          "endRecordNumber": {
            "description": "End Record Number when taking a specific set of records, passing this will override PageNumber and RecordsPerPage",
            "type": "integer",
            "format": "int32"
          },
          "format": {
            "description": "Format",
            "type": "string"
          },
          "id": {
            "description": "The Id of the report to run. Optional: will use Name if provided",
            "type": "integer",
            "format": "int32"
          },
          "isAscending": {
            "description": "Flag determining sort direction of custom sort",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the report to run. Optional: will use Id if provided",
            "type": "string"
          },
          "orderByFieldOrdinal": {
            "description": "Ordinal of Field for custom OrderBy of results",
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "description": "Page number for paging results. All records returned if null",
            "type": "integer",
            "format": "int32"
          },
          "parameters": {
            "description": "The parameters of the report",
            "items": {
              "$ref": "#/components/schemas/ReportParameter"
            },
            "type": "array"
          },
          "previewSql": {
            "description": "When passed the report will be previewed with this sql",
            "type": "string"
          },
          "recordsPerPage": {
            "description": "Number of records per page for paging results",
            "type": "integer",
            "format": "int32"
          },
          "startRecordNumber": {
            "description": "Start Record Number when taking a specific set of records, passing this will override PageNumber and RecordsPerPage",
            "type": "integer",
            "format": "int32"
          },
          "timeZone": {
            "description": "TimeZone",
            "type": "string"
          },
          "useDefaultParameters": {
            "description": "If a report contains a parameter but it is not passed the default value will be used on the server",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReportParameter": {
        "description": "The parameters of the report",
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportExecuteArgs": {
        "description": "Report query options",
        "properties": {
          "dualControlApproval": {
            "$ref": "#/components/schemas/DualControlApproval"
          },
          "encodeHtml": {
            "description": "True to encode data as HTML, defaults to true if not provided",
            "type": "boolean"
          },
          "endRecordNumber": {
            "description": "End Record Number when taking a specific set of records, passing this will override PageNumber and RecordsPerPage",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The Id of the report to run. Optional: will use Name if provided",
            "type": "integer",
            "format": "int32"
          },
          "isAscending": {
            "description": "Flag determining sort direction of custom sort",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the report to run. Optional: will use Id if provided",
            "type": "string"
          },
          "orderByFieldOrdinal": {
            "description": "Ordinal of Field for custom OrderBy of results",
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "description": "Page number for paging results. All records returned if null",
            "type": "integer",
            "format": "int32"
          },
          "parameters": {
            "description": "The parameters of the report",
            "items": {
              "$ref": "#/components/schemas/ReportParameter"
            },
            "type": "array"
          },
          "previewSql": {
            "description": "When passed the report will be previewed with this sql",
            "type": "string"
          },
          "recordsPerPage": {
            "description": "Number of records per page for paging results",
            "type": "integer",
            "format": "int32"
          },
          "startRecordNumber": {
            "description": "Start Record Number when taking a specific set of records, passing this will override PageNumber and RecordsPerPage",
            "type": "integer",
            "format": "int32"
          },
          "useDefaultParameters": {
            "description": "If a report contains a parameter but it is not passed the default value will be used on the server",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ReportExecuteModel": {
        "description": "ReportExecution",
        "properties": {
          "columns": {
            "description": "Array of column names.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "columnTypes": {
            "description": "Array of column types",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enabled": {
            "description": "Whether the Report is active",
            "type": "boolean"
          },
          "id": {
            "description": "Report ID",
            "type": "integer",
            "format": "int32"
          },
          "localizedColumns": {
            "description": "Array of localized column names.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Report name",
            "type": "string"
          },
          "reportPreviewSql": {
            "description": "When passed this SQL will be used to run the report in a preview mode.  Used for testing SQL but not updating the report.",
            "type": "string"
          },
          "rows": {
            "description": "Rows of report data.",
            "items": {
              "items": {
                "$ref": "#/components/schemas/Object"
              },
              "type": "array"
            },
            "type": "array"
          },
          "systemReport": {
            "description": "Whether the Report is a system Report",
            "type": "boolean"
          },
          "totalRowCount": {
            "description": "Total number of rows",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ReportEmailArgs": {
        "description": "Report Email Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ReportEmailModel"
          }
        },
        "type": "object"
      },
      "ReportEmailModel": {
        "description": "Report Email Model",
        "properties": {
          "emailAddress": {
            "description": "Email Address to which the report will be sent",
            "type": "string"
          },
          "format": {
            "$ref": "#/components/schemas/ReportFormat"
          },
          "parameters": {
            "description": "Report Parameters to be used for the report execution",
            "items": {
              "$ref": "#/components/schemas/ReportParameterValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReportEmailResponse": {
        "description": "Report Email Response",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HttpResponseMessage": {
        "description": "HttpResponseMessage",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/HttpContent"
          },
          "headers": {
            "$ref": "#/components/schemas/HttpResponseHeaders"
          },
          "isSuccessStatusCode": {
            "description": "IsSuccessStatusCode",
            "type": "boolean"
          },
          "reasonPhrase": {
            "description": "ReasonPhrase",
            "type": "string"
          },
          "requestMessage": {
            "$ref": "#/components/schemas/HttpRequestMessage"
          },
          "statusCode": {
            "$ref": "#/components/schemas/HttpStatusCode"
          },
          "version": {
            "$ref": "#/components/schemas/Version"
          }
        },
        "type": "object"
      },
      "HttpContent": {
        "description": "Content",
        "properties": {
          "headers": {
            "$ref": "#/components/schemas/HttpContentHeaders"
          }
        },
        "type": "object"
      },
      "HttpResponseHeaders": {
        "description": "Headers",
        "properties": {
          "acceptRanges": {
            "description": "AcceptRanges",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "age": {
            "description": "Age",
            "type": "string",
            "format": "time-span"
          },
          "cacheControl": {
            "$ref": "#/components/schemas/CacheControlHeaderValue"
          },
          "connection": {
            "description": "Connection",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "connectionClose": {
            "description": "ConnectionClose",
            "type": "boolean"
          },
          "date": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "eTag": {
            "$ref": "#/components/schemas/EntityTagHeaderValue"
          },
          "location": {
            "$ref": "#/components/schemas/Uri"
          },
          "pragma": {
            "description": "Pragma",
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            },
            "type": "array"
          },
          "proxyAuthenticate": {
            "description": "ProxyAuthenticate",
            "items": {
              "$ref": "#/components/schemas/AuthenticationHeaderValue"
            },
            "type": "array"
          },
          "retryAfter": {
            "$ref": "#/components/schemas/RetryConditionHeaderValue"
          },
          "server": {
            "description": "Server",
            "items": {
              "$ref": "#/components/schemas/ProductInfoHeaderValue"
            },
            "type": "array"
          },
          "trailer": {
            "description": "Trailer",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "transferEncoding": {
            "description": "TransferEncoding",
            "items": {
              "$ref": "#/components/schemas/TransferCodingHeaderValue"
            },
            "type": "array"
          },
          "transferEncodingChunked": {
            "description": "TransferEncodingChunked",
            "type": "boolean"
          },
          "upgrade": {
            "description": "Upgrade",
            "items": {
              "$ref": "#/components/schemas/ProductHeaderValue"
            },
            "type": "array"
          },
          "vary": {
            "description": "Vary",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "via": {
            "description": "Via",
            "items": {
              "$ref": "#/components/schemas/ViaHeaderValue"
            },
            "type": "array"
          },
          "warning": {
            "description": "Warning",
            "items": {
              "$ref": "#/components/schemas/WarningHeaderValue"
            },
            "type": "array"
          },
          "wwwAuthenticate": {
            "description": "WwwAuthenticate",
            "items": {
              "$ref": "#/components/schemas/AuthenticationHeaderValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CacheControlHeaderValue": {
        "description": "CacheControl",
        "properties": {
          "extensions": {
            "description": "Extensions",
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            },
            "type": "array"
          },
          "maxAge": {
            "description": "MaxAge",
            "type": "string",
            "format": "time-span"
          },
          "maxStale": {
            "description": "MaxStale",
            "type": "boolean"
          },
          "maxStaleLimit": {
            "description": "MaxStaleLimit",
            "type": "string",
            "format": "time-span"
          },
          "minFresh": {
            "description": "MinFresh",
            "type": "string",
            "format": "time-span"
          },
          "mustRevalidate": {
            "description": "MustRevalidate",
            "type": "boolean"
          },
          "noCache": {
            "description": "NoCache",
            "type": "boolean"
          },
          "noCacheHeaders": {
            "description": "NoCacheHeaders",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "noStore": {
            "description": "NoStore",
            "type": "boolean"
          },
          "noTransform": {
            "description": "NoTransform",
            "type": "boolean"
          },
          "onlyIfCached": {
            "description": "OnlyIfCached",
            "type": "boolean"
          },
          "private": {
            "description": "Private",
            "type": "boolean"
          },
          "privateHeaders": {
            "description": "PrivateHeaders",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "proxyRevalidate": {
            "description": "ProxyRevalidate",
            "type": "boolean"
          },
          "public": {
            "description": "Public",
            "type": "boolean"
          },
          "sharedMaxAge": {
            "description": "SharedMaxAge",
            "type": "string",
            "format": "time-span"
          }
        },
        "type": "object"
      },
      "EntityTagHeaderValue": {
        "description": "ETag",
        "properties": {
          "isWeak": {
            "description": "IsWeak",
            "type": "boolean"
          },
          "tag": {
            "description": "Tag",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthenticationHeaderValue": {
        "description": "ProxyAuthenticate",
        "properties": {
          "parameter": {
            "description": "Parameter",
            "type": "string"
          },
          "scheme": {
            "description": "Scheme",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RetryConditionHeaderValue": {
        "description": "RetryAfter",
        "properties": {
          "date": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "delta": {
            "description": "Delta",
            "type": "string",
            "format": "time-span"
          }
        },
        "type": "object"
      },
      "ProductInfoHeaderValue": {
        "description": "Server",
        "properties": {
          "comment": {
            "description": "Comment",
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/ProductHeaderValue"
          }
        },
        "type": "object"
      },
      "ProductHeaderValue": {
        "description": "Product",
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          },
          "version": {
            "description": "Version",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransferCodingHeaderValue": {
        "description": "TransferEncoding",
        "properties": {
          "parameters": {
            "description": "Parameters",
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            },
            "type": "array"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViaHeaderValue": {
        "description": "Via",
        "properties": {
          "comment": {
            "description": "Comment",
            "type": "string"
          },
          "protocolName": {
            "description": "ProtocolName",
            "type": "string"
          },
          "protocolVersion": {
            "description": "ProtocolVersion",
            "type": "string"
          },
          "receivedBy": {
            "description": "ReceivedBy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WarningHeaderValue": {
        "description": "Warning",
        "properties": {
          "agent": {
            "description": "Agent",
            "type": "string"
          },
          "code": {
            "description": "Code",
            "type": "integer",
            "format": "int32"
          },
          "date": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "text": {
            "description": "Text",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRequestMessage": {
        "description": "RequestMessage",
        "properties": {},
        "type": "object"
      },
      "HttpStatusCode": {
        "description": "StatusCode",
        "properties": {},
        "type": "string",
        "enum": [
          "Continue",
          "SwitchingProtocols",
          "OK",
          "Created",
          "Accepted",
          "NonAuthoritativeInformation",
          "NoContent",
          "ResetContent",
          "PartialContent",
          "MultipleChoices",
          "Ambiguous",
          "MovedPermanently",
          "Moved",
          "Found",
          "Redirect",
          "SeeOther",
          "RedirectMethod",
          "NotModified",
          "UseProxy",
          "Unused",
          "TemporaryRedirect",
          "RedirectKeepVerb",
          "BadRequest",
          "Unauthorized",
          "PaymentRequired",
          "Forbidden",
          "NotFound",
          "MethodNotAllowed",
          "NotAcceptable",
          "ProxyAuthenticationRequired",
          "RequestTimeout",
          "Conflict",
          "Gone",
          "LengthRequired",
          "PreconditionFailed",
          "RequestEntityTooLarge",
          "RequestUriTooLong",
          "UnsupportedMediaType",
          "RequestedRangeNotSatisfiable",
          "ExpectationFailed",
          "UpgradeRequired",
          "InternalServerError",
          "NotImplemented",
          "BadGateway",
          "ServiceUnavailable",
          "GatewayTimeout",
          "HttpVersionNotSupported"
        ]
      },
      "Version": {
        "description": "Version",
        "properties": {
          "build": {
            "description": "Build",
            "type": "integer",
            "format": "int32"
          },
          "major": {
            "description": "Major",
            "type": "integer",
            "format": "int32"
          },
          "majorRevision": {
            "description": "MajorRevision",
            "type": "integer"
          },
          "minor": {
            "description": "Minor",
            "type": "integer",
            "format": "int32"
          },
          "minorRevision": {
            "description": "MinorRevision",
            "type": "integer"
          },
          "revision": {
            "description": "Revision",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UndeleteReportResponse": {
        "description": "UndeleteReportResponse",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfRoleAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/RoleAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RoleAuditSummary": {
        "description": "Role Audit",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "auditType": {
            "$ref": "#/components/schemas/RoleAuditType"
          },
          "databaseName": {
            "description": "Databse Name",
            "type": "string"
          },
          "dateRecorded": {
            "description": "Date Recorded",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "Role Audit ID",
            "type": "integer",
            "format": "int32"
          },
          "machineName": {
            "description": "Machine Name",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userName": {
            "description": "User Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoleAuditType": {
        "description": "Audit Type",
        "properties": {},
        "type": "string",
        "enum": [
          "All",
          "Permission",
          "Role"
        ]
      },
      "UnassignedPermissionsModel": {
        "description": "Permissions not assigned to any Role",
        "properties": {
          "permissions": {
            "description": "Names of all unassigned Permissions",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RoleModel": {
        "description": "Role",
        "properties": {
          "created": {
            "description": "Created",
            "type": "string",
            "format": "date-time"
          },
          "enabled": {
            "description": "Enabled",
            "type": "boolean"
          },
          "id": {
            "description": "Role Id",
            "type": "integer",
            "format": "int32"
          },
          "isSystem": {
            "description": "Is System Role",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RolePatchArgs": {
        "description": "RolePatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RolePatchModel"
          }
        },
        "type": "object"
      },
      "RolePatchModel": {
        "description": "Patch Role",
        "properties": {
          "enabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "PagingOfRoleModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/RoleModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RoleCreateArgs": {
        "description": "Role create options",
        "required": [
          "name",
          "enabled"
        ],
        "properties": {
          "enabled": {
            "description": "Whether the Role is active",
            "type": "boolean"
          },
          "name": {
            "description": "Role name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfRoleGroupSummaryAndGroupMembershipFilter": {
        "description": "Specify filtering, paging, sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "$ref": "#/components/schemas/GroupMembershipFilter"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/RoleGroupSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupMembershipFilter": {
        "description": "Group membership filter",
        "properties": {
          "includeInactiveUsersForGroup": {
            "description": "Whether to include inactive users in the results",
            "type": "boolean"
          },
          "userDomainId": {
            "description": "Filter only users in a specific domain",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RoleGroupSummary": {
        "description": "Group",
        "properties": {
          "created": {
            "description": "Created Date",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "Group display name",
            "type": "string"
          },
          "domainName": {
            "description": "Active Directory domain name",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the group is active",
            "type": "boolean"
          },
          "groupId": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Group name",
            "type": "string"
          },
          "personal": {
            "description": "Whether the group is for a single user",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfRolePermissionModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/RolePermissionModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RolePermissionModel": {
        "description": "Role Permission",
        "properties": {
          "name": {
            "description": "Role Name",
            "type": "string"
          },
          "rolePermissionId": {
            "description": "Role Permission ID",
            "type": "integer",
            "format": "int32"
          },
          "roleType": {
            "$ref": "#/components/schemas/RoleTypes"
          }
        },
        "type": "object"
      },
      "RoleTypes": {
        "description": "Role Type",
        "properties": {},
        "type": "string",
        "enum": [
          "GlobalRoleType",
          "FolderRoleType",
          "SecretRoleType",
          "SecretTemplateRoleType",
          "ReportRoleType",
          "ReportCategoryRoleType"
        ]
      },
      "RolePermissionsAssignmentRequest": {
        "description": "RolePermissionsAssignmentRequest",
        "properties": {
          "rolePermissionIds": {
            "description": "This list will be the exact RolePermissions for the Role",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RolePermissionsAssignmentResponse": {
        "description": "The status of the Role Permissions change action.",
        "properties": {
          "success": {
            "description": "The success or failure of the Role Permissions action.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RoleGroupsPatchArgs": {
        "description": "RoleGroupsPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RoleGroupsPatchModel"
          }
        },
        "type": "object"
      },
      "RoleGroupsPatchModel": {
        "description": "Data",
        "properties": {
          "groupIdsToAdd": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "groupIdsToRemove": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          }
        },
        "type": "object"
      },
      "RoleGroupsPatchResult": {
        "description": "RoleGroupsPatchResult",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RecurringScheduleModel": {
        "description": "A recurring schedule defines an interval that can trigger tasks",
        "properties": {
          "active": {
            "description": "Whether or not the schedule is active",
            "type": "boolean"
          },
          "duration": {
            "description": "How long is the iteration of this schedule.  A weekly schedule with an iteration of 2 would restart every other week.",
            "type": "integer",
            "format": "int32"
          },
          "durationStartDate": {
            "description": "When does the schedule iteration begin",
            "type": "string",
            "format": "date-time"
          },
          "entity": {
            "$ref": "#/components/schemas/RecurringScheduleEntityModel"
          },
          "notes": {
            "description": "TBD",
            "type": "string"
          },
          "recurringScheduleId": {
            "description": "Unique ID for this schedule",
            "type": "integer",
            "format": "int32"
          },
          "recurringScheduleType": {
            "$ref": "#/components/schemas/RecurringScheduleType"
          },
          "scheduleConstraints": {
            "description": "These indicate the rules for when a schedule should recur.  If all of the constraints are met then the schedule will trigger.",
            "items": {
              "$ref": "#/components/schemas/RecurringScheduleValueModel"
            },
            "type": "array"
          },
          "timeZoneId": {
            "description": "Time Zone of the times the schedule is run",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RecurringScheduleEntityModel": {
        "description": "These are entities that subcribe to this schedule",
        "properties": {
          "entityId": {
            "description": "The ID of the entity that is subscribing to this schedule",
            "type": "integer",
            "format": "int32"
          },
          "entityType": {
            "$ref": "#/components/schemas/RecurringScheduleEntityType"
          },
          "id": {
            "description": "The id of schedule entity map",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RecurringScheduleEntityType": {
        "description": "This is the type of entity",
        "properties": {},
        "type": "string",
        "enum": [
          "InboxRule"
        ]
      },
      "RecurringScheduleType": {
        "description": "The iteration period for the schedule.  The schedule will restart after this cycle.",
        "properties": {},
        "type": "string",
        "enum": [
          "Daily",
          "Weekly",
          "MonthlyDays",
          "MonthlyWeeks"
        ]
      },
      "RecurringScheduleValueModel": {
        "description": "A defined constraint for a schedule",
        "properties": {
          "recurrenceValue": {
            "description": "The value that applies to the constraint.",
            "type": "integer",
            "format": "int32"
          },
          "recurrenceValueType": {
            "$ref": "#/components/schemas/RecurringScheduleValueType"
          }
        },
        "type": "object"
      },
      "RecurringScheduleValueType": {
        "description": "The type of schedule constraint",
        "properties": {},
        "type": "string",
        "enum": [
          "SpecificTime",
          "DayOfWeek",
          "DayOfMonth",
          "WeekOfMonth",
          "WeekOfMonthDay"
        ]
      },
      "RecurringScheduleUpdateArgs": {
        "description": "RecurringScheduleUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecurringScheduleUpdateModel"
          }
        },
        "type": "object"
      },
      "RecurringScheduleUpdateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "duration": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "durationStartDate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfDateTime"
          },
          "notes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "recurringScheduleId": {
            "description": "Unique ID for this schedule",
            "type": "integer",
            "format": "int32"
          },
          "recurringScheduleType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfRecurringScheduleType"
          },
          "scheduleConstraints": {
            "$ref": "#/components/schemas/UpdateFieldValueOfRecurringScheduleValueModelArray"
          },
          "timeZoneId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfRecurringScheduleType": {
        "description": "The iteration period for the schedule.  The schedule will restart after this cycle.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/RecurringScheduleType"
          }
        },
        "type": "object"
      },
      "RecurringScheduleCreateArgs": {
        "description": "RecurringScheduleCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RecurringScheduleCreateModel"
          }
        },
        "type": "object"
      },
      "RecurringScheduleCreateModel": {
        "description": "Data",
        "properties": {
          "active": {
            "description": "Whether or not the schedule is active",
            "type": "boolean"
          },
          "duration": {
            "description": "How long is the iteration of this schedule.  A weekly schedule with an iteration of 2 would restart every other week.",
            "type": "integer",
            "format": "int32"
          },
          "durationStartDate": {
            "description": "When does the schedule iteration begin",
            "type": "string",
            "format": "date-time"
          },
          "entity": {
            "$ref": "#/components/schemas/RecurringScheduleEntityModel"
          },
          "notes": {
            "description": "TBD",
            "type": "string"
          },
          "recurringScheduleType": {
            "$ref": "#/components/schemas/RecurringScheduleType"
          },
          "scheduleConstraints": {
            "description": "Passing any constraints will update all of them and remove any not specified.",
            "items": {
              "$ref": "#/components/schemas/RecurringScheduleValueModel"
            },
            "type": "array"
          },
          "timeZoneId": {
            "description": "Time Zone of the times the schedule is run",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfScriptSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ScriptSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ScriptSummary": {
        "description": "Script Summary",
        "properties": {
          "active": {
            "description": "Whether the Script is Active",
            "type": "boolean"
          },
          "concurrencyId": {
            "description": "Unique Script Concurrency Id",
            "type": "string"
          },
          "description": {
            "description": "Script Description",
            "type": "string"
          },
          "name": {
            "description": "Script Name",
            "type": "string"
          },
          "scriptCategoryId": {
            "description": "Script Category Id",
            "type": "integer",
            "format": "int32"
          },
          "scriptCategoryName": {
            "description": "Script Category Name",
            "type": "string"
          },
          "scriptId": {
            "description": "Script Id",
            "type": "integer",
            "format": "int32"
          },
          "scriptType": {
            "$ref": "#/components/schemas/UserScriptType"
          }
        },
        "type": "object"
      },
      "UserScriptType": {
        "description": "Script Type (Powershell = 1, SQL = 2, SSH = 3)",
        "properties": {},
        "type": "string",
        "enum": [
          "PowerShell",
          "SQL",
          "SSH"
        ]
      },
      "ScriptCreateArgs": {
        "description": "Script Create Options",
        "properties": {
          "active": {
            "description": "Whether the Script is Active",
            "type": "boolean"
          },
          "additionalData": {
            "description": "Additional Data",
            "type": "string"
          },
          "description": {
            "description": "Script Description",
            "type": "string"
          },
          "name": {
            "description": "Script Name",
            "type": "string"
          },
          "odbcConnectionStringArgs": {
            "description": "ODBC Connection String Options",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "script": {
            "description": "Script Text",
            "type": "string"
          },
          "scriptCategoryId": {
            "description": "Script Category Id",
            "type": "integer",
            "format": "int32"
          },
          "scriptCategoryName": {
            "description": "Script Category Name",
            "type": "string"
          },
          "scriptType": {
            "$ref": "#/components/schemas/UserScriptType"
          },
          "usageCount": {
            "description": "Usage Count ",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ScriptModel": {
        "description": "Script",
        "properties": {
          "active": {
            "description": "Whether the Script is Active",
            "type": "boolean"
          },
          "additionalData": {
            "description": "Addition Data",
            "type": "string"
          },
          "concurrencyId": {
            "description": "Unique Script Concurrency Id",
            "type": "string"
          },
          "description": {
            "description": "Script Description",
            "type": "string"
          },
          "name": {
            "description": "Script Name",
            "type": "string"
          },
          "odbcConnectionStringArgs": {
            "description": "ODBC Connection String Options",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "script": {
            "description": "Script Text",
            "type": "string"
          },
          "scriptCategoryId": {
            "description": "Script Category Id",
            "type": "integer",
            "format": "int32"
          },
          "scriptCategoryName": {
            "description": "Script Category Name",
            "type": "string"
          },
          "scriptId": {
            "description": "Script Id",
            "type": "integer",
            "format": "int32"
          },
          "scriptType": {
            "$ref": "#/components/schemas/UserScriptType"
          },
          "usageCount": {
            "description": "Usage Count",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSdkClientAccountSummaryAndSdkClientAccountFilter": {
        "description": "Specify filtering, paging, sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "$ref": "#/components/schemas/SdkClientAccountFilter"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SdkClientAccountSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientAccountFilter": {
        "description": "Additional query options",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/FilterOperator"
          },
          "searchText": {
            "description": "SearchText",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "FilterOperator": {
        "description": "Operator",
        "properties": {},
        "type": "string",
        "enum": [
          "All",
          "Include",
          "Exclude"
        ]
      },
      "SdkClientAccountSummary": {
        "description": "Query results",
        "properties": {
          "clientId": {
            "description": "ClientId",
            "type": "string",
            "format": "uuid"
          },
          "details": {
            "description": "Details",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "userDisplayName": {
            "description": "UserDisplayName",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientAccountCreateArgs": {
        "description": "SdkClientAccountCreateArgs",
        "required": [
          "name",
          "description",
          "ruleName"
        ],
        "properties": {
          "clientId": {
            "description": "ClientId",
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "onboardingKey": {
            "description": "OnboardingKey",
            "type": "string"
          },
          "ruleName": {
            "description": "RuleName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SdkClientAccountModel": {
        "description": "SdkClientAccountModel",
        "properties": {
          "clientId": {
            "description": "ClientId",
            "type": "string",
            "format": "uuid"
          },
          "clientSecret": {
            "description": "ClientSecret",
            "type": "string"
          },
          "details": {
            "description": "Details",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "userDisplayName": {
            "description": "UserDisplayName",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientAccountUpdateArgs": {
        "description": "SdkClientAccountUpdateArgs",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSdkClientAuditSummaryAndSdkClientAuditFilter": {
        "description": "Specify filtering, paging, sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "$ref": "#/components/schemas/SdkClientAuditFilter"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SdkClientAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientAuditFilter": {
        "description": "Additional query options",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/FilterOperator"
          },
          "searchText": {
            "description": "SearchText",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientAuditSummary": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "correlationId": {
            "description": "CorrelationId",
            "type": "string",
            "format": "uuid"
          },
          "createdOn": {
            "description": "CreatedOn",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "sdkClientAccountId": {
            "description": "SdkClientAccountId",
            "type": "integer",
            "format": "int32"
          },
          "sdkClientAccountName": {
            "description": "SdkClientAccountName",
            "type": "string"
          },
          "userDisplayName": {
            "description": "UserDisplayName",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientRuleModel": {
        "description": "SdkClientRuleModel",
        "properties": {
          "details": {
            "description": "Details",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "requireOnboardingKey": {
            "description": "RequireOnboardingKey",
            "type": "boolean"
          },
          "userDisplayName": {
            "description": "UserDisplayName",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientRuleUpdateArgs": {
        "description": "SdkClientRuleUpdateArgs",
        "required": [
          "name"
        ],
        "properties": {
          "details": {
            "description": "Details",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "requireOnboardingKey": {
            "description": "RequireOnboardingKey",
            "type": "boolean"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSdkClientRuleSummaryAndSdkClientRuleFilter": {
        "description": "Specify filtering, paging, sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "$ref": "#/components/schemas/SdkClientRuleFilter"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SdkClientRuleSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientRuleFilter": {
        "description": "Additional query options",
        "properties": {
          "operator": {
            "$ref": "#/components/schemas/FilterOperator"
          },
          "searchText": {
            "description": "SearchText",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientRuleSummary": {
        "description": "Query results",
        "properties": {
          "details": {
            "description": "Details",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "requireOnboardingKey": {
            "description": "RequireOnboardingKey",
            "type": "boolean"
          },
          "userDisplayName": {
            "description": "UserDisplayName",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SdkClientRuleCreateArgs": {
        "description": "SdkClientRuleCreateArgs",
        "required": [
          "name"
        ],
        "properties": {
          "details": {
            "description": "Details",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "requireOnboardingKey": {
            "description": "RequireOnboardingKey",
            "type": "boolean"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSecretAccessModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretAccessModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretAccessModel": {
        "description": "The Secret Access model object",
        "properties": {
          "accessRequestWorkflowMapId": {
            "description": "The Id of the Access Request Workflow Map.",
            "type": "integer",
            "format": "int32"
          },
          "approverDisplayName": {
            "description": "The Display Name of the Approver of the request",
            "type": "string"
          },
          "completed": {
            "description": "Indicating if request has been completed",
            "type": "boolean"
          },
          "currentUserRestrictedFromReviewing": {
            "description": "Indicating if current user is restricted from viewing the request",
            "type": "boolean"
          },
          "expirationDate": {
            "description": "The Expiration Date of the request",
            "type": "string",
            "format": "date-time"
          },
          "folderId": {
            "description": "The Folder Id of the Secret associated to the access request.",
            "type": "integer",
            "format": "int32"
          },
          "hasWorkflow": {
            "description": "Indicating if request is associated to a Work Flow",
            "type": "boolean"
          },
          "requestComment": {
            "description": "The Comment of the request.",
            "type": "string"
          },
          "requestDate": {
            "description": "The Date of the request.",
            "type": "string",
            "format": "date-time"
          },
          "requestingUserId": {
            "description": "The Id of the User requesting access.",
            "type": "integer",
            "format": "int32"
          },
          "requestUsername": {
            "description": "The Username of the User requesting access.",
            "type": "string"
          },
          "responseComment": {
            "description": "The Comment of the response to the request",
            "type": "string"
          },
          "responseDate": {
            "description": "The Date of the response to the request",
            "type": "string",
            "format": "date-time"
          },
          "reviewStatusMessage": {
            "description": "The Review Status Message of the request",
            "type": "string"
          },
          "secretAccessRequestId": {
            "description": "The Id of the Secret Access Request.",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "The Id of the Secret associated to the access request.",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "The Name of the Secret associated to the access request.",
            "type": "string"
          },
          "startDate": {
            "description": "The Start Date of the request.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/AccessRequestState"
          },
          "statusDescription": {
            "description": "The Status Description of the request",
            "type": "string"
          },
          "ticketNumber": {
            "description": "The Ticket Number of the request",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "The Ticket System Id of the request",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AccessRequestState": {
        "description": "The Status of the request",
        "properties": {},
        "type": "string",
        "enum": [
          "WaitingForRequest",
          "Pending",
          "Approved",
          "Denied",
          "Canceled",
          "Expired"
        ]
      },
      "SecretAccessCreateArgs": {
        "description": "Secret Access Create paramaters",
        "required": [
          "secretId"
        ],
        "properties": {
          "expirationDate": {
            "description": "Expiration Date",
            "type": "string",
            "format": "date-time"
          },
          "requestComment": {
            "description": "Request Comment",
            "type": "string"
          },
          "secretId": {
            "description": "Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "description": "Start Date",
            "type": "string",
            "format": "date-time"
          },
          "ticketNumber": {
            "description": "Ticket Number",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "Ticket System ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretAccessUpdateArgs": {
        "description": "Secret Access Update paramaters",
        "properties": {
          "expirationDate": {
            "$ref": "#/components/schemas/DateTimeOffset"
          },
          "responseComment": {
            "description": "Response Comment",
            "type": "string"
          },
          "secretAccessRequestId": {
            "description": "Secret Access Request Id",
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "$ref": "#/components/schemas/DateTimeOffset"
          },
          "status": {
            "$ref": "#/components/schemas/SecretAccessModelStatus"
          }
        },
        "type": "object"
      },
      "DateTimeOffset": {
        "description": "Expiration Date",
        "properties": {
          "date": {
            "description": "Date",
            "type": "string",
            "format": "date-time"
          },
          "dateTime": {
            "description": "DateTime",
            "type": "string",
            "format": "date-time"
          },
          "day": {
            "description": "Day",
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeek"
          },
          "dayOfYear": {
            "description": "DayOfYear",
            "type": "integer",
            "format": "int32"
          },
          "hour": {
            "description": "Hour",
            "type": "integer",
            "format": "int32"
          },
          "localDateTime": {
            "description": "LocalDateTime",
            "type": "string",
            "format": "date-time"
          },
          "millisecond": {
            "description": "Millisecond",
            "type": "integer",
            "format": "int32"
          },
          "minute": {
            "description": "Minute",
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "description": "Month",
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "description": "Offset",
            "type": "string",
            "format": "time-span"
          },
          "second": {
            "description": "Second",
            "type": "integer",
            "format": "int32"
          },
          "ticks": {
            "description": "Ticks",
            "type": "integer",
            "format": "int64"
          },
          "timeOfDay": {
            "description": "TimeOfDay",
            "type": "string",
            "format": "time-span"
          },
          "utcDateTime": {
            "description": "UtcDateTime",
            "type": "string",
            "format": "date-time"
          },
          "utcTicks": {
            "description": "UtcTicks",
            "type": "integer",
            "format": "int64"
          },
          "year": {
            "description": "Year",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretAccessModelStatus": {
        "description": "New status for the request: Pending, Approved, Denied, Canceled",
        "properties": {},
        "type": "string",
        "enum": [
          "Pending",
          "Approved",
          "Denied",
          "Canceled"
        ]
      },
      "SecretAccessActionResultModel": {
        "description": "The Secret Access model object",
        "properties": {
          "accessRequestWorkflowMapId": {
            "description": "The Id of the Access Request Workflow Map.",
            "type": "integer",
            "format": "int32"
          },
          "actionResultMessage": {
            "description": "ActionResultMessage",
            "type": "string"
          },
          "approverDisplayName": {
            "description": "The Display Name of the Approver of the request",
            "type": "string"
          },
          "completed": {
            "description": "Indicating if request has been completed",
            "type": "boolean"
          },
          "currentUserRestrictedFromReviewing": {
            "description": "Indicating if current user is restricted from viewing the request",
            "type": "boolean"
          },
          "expirationDate": {
            "description": "The Expiration Date of the request",
            "type": "string",
            "format": "date-time"
          },
          "folderId": {
            "description": "The Folder Id of the Secret associated to the access request.",
            "type": "integer",
            "format": "int32"
          },
          "hasWorkflow": {
            "description": "Indicating if request is associated to a Work Flow",
            "type": "boolean"
          },
          "requestComment": {
            "description": "The Comment of the request.",
            "type": "string"
          },
          "requestDate": {
            "description": "The Date of the request.",
            "type": "string",
            "format": "date-time"
          },
          "requestingUserId": {
            "description": "The Id of the User requesting access.",
            "type": "integer",
            "format": "int32"
          },
          "requestUsername": {
            "description": "The Username of the User requesting access.",
            "type": "string"
          },
          "responseComment": {
            "description": "The Comment of the response to the request",
            "type": "string"
          },
          "responseDate": {
            "description": "The Date of the response to the request",
            "type": "string",
            "format": "date-time"
          },
          "reviewStatusMessage": {
            "description": "The Review Status Message of the request",
            "type": "string"
          },
          "secretAccessRequestId": {
            "description": "The Id of the Secret Access Request.",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "The Id of the Secret associated to the access request.",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "The Name of the Secret associated to the access request.",
            "type": "string"
          },
          "startDate": {
            "description": "The Start Date of the request.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/AccessRequestState"
          },
          "statusDescription": {
            "description": "The Status Description of the request",
            "type": "string"
          },
          "ticketNumber": {
            "description": "The Ticket Number of the request",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "The Ticket System Id of the request",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSecretAccessRequestHistoryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretAccessRequestHistoryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretAccessRequestHistoryModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "details": {
            "description": "Details",
            "type": "string"
          },
          "fullName": {
            "description": "FullName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretAccessPendingRequestModel": {
        "description": "The Secret Access Pending model object",
        "properties": {
          "accessRequestWorkflowMapId": {
            "description": "The Id of the Access Request Workflow Map.",
            "type": "integer",
            "format": "int32"
          },
          "approverDisplayName": {
            "description": "The Display Name of the Approver of the request",
            "type": "string"
          },
          "completed": {
            "description": "Indicating if request has been completed",
            "type": "boolean"
          },
          "currentStepApprovers": {
            "description": "The List of approving reviewers for the current approval step.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "currentStepReviewers": {
            "description": "The List of reviewers for the current approval step.",
            "items": {
              "$ref": "#/components/schemas/SecretAccessReviewer"
            },
            "type": "array"
          },
          "currentUserRestrictedFromReviewing": {
            "description": "Indicating if current user is restricted from viewing the request",
            "type": "boolean"
          },
          "expirationDate": {
            "description": "The Expiration Date of the request",
            "type": "string",
            "format": "date-time"
          },
          "folderId": {
            "description": "The Folder Id of the Secret associated to the access request.",
            "type": "integer",
            "format": "int32"
          },
          "hasWorkflow": {
            "description": "Indicating if request is associated to a Work Flow",
            "type": "boolean"
          },
          "requestComment": {
            "description": "The Comment of the request.",
            "type": "string"
          },
          "requestDate": {
            "description": "The Date of the request.",
            "type": "string",
            "format": "date-time"
          },
          "requestingUserId": {
            "description": "The Id of the User requesting access.",
            "type": "integer",
            "format": "int32"
          },
          "requestUsername": {
            "description": "The Username of the User requesting access.",
            "type": "string"
          },
          "responseComment": {
            "description": "The Comment of the response to the request",
            "type": "string"
          },
          "responseDate": {
            "description": "The Date of the response to the request",
            "type": "string",
            "format": "date-time"
          },
          "reviewStatusMessage": {
            "description": "The Review Status Message of the request",
            "type": "string"
          },
          "secretAccessRequestId": {
            "description": "The Id of the Secret Access Request.",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "The Id of the Secret associated to the access request.",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "The Name of the Secret associated to the access request.",
            "type": "string"
          },
          "startDate": {
            "description": "The Start Date of the request.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "The Status of the request",
            "type": "string"
          },
          "statusDescription": {
            "description": "The Status Description of the request",
            "type": "string"
          },
          "ticketNumber": {
            "description": "The Ticket Number of the request",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "The Ticket System Id of the request",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretAccessReviewer": {
        "description": "The Secret Access Approver model object",
        "properties": {
          "displayName": {
            "description": "The Displayname of Id of the Secret Access Approver.",
            "type": "string"
          },
          "groupId": {
            "description": "The Id of the approver group.",
            "type": "integer",
            "format": "int32"
          },
          "isUser": {
            "description": "Indication if the approver is an individual user.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretAccessOptionsModel": {
        "description": "SecretAccessOptionsModel",
        "properties": {
          "customCheckoutIntervalDays": {
            "description": "How many days is the checkout interval",
            "type": "integer",
            "format": "int32"
          },
          "customCheckoutIntervalHours": {
            "description": "How many hours is the checkout interval",
            "type": "integer",
            "format": "int32"
          },
          "customCheckoutIntervalMinutes": {
            "description": "How many minutes is the checkout interval",
            "type": "integer",
            "format": "int32"
          },
          "editorsAlsoRequireApproval": {
            "description": "When true editors cannot bypass approval when enabled",
            "type": "boolean"
          },
          "enableDoubleLock": {
            "description": "Is Doublelock enabled",
            "type": "boolean"
          },
          "enableRequiresApprovalForAccess": {
            "description": "When true approval is required to access this Secret",
            "type": "boolean"
          },
          "isDefaultCheckoutInterval": {
            "description": "Is the checkout interval using the default or is an override time period provided",
            "type": "boolean"
          },
          "ownersAndApproversAlsoRequireApproval": {
            "description": "When true editors and owners cannot bypass approval when enabled",
            "type": "boolean"
          },
          "requireCheckout": {
            "description": "This secret requires checkout",
            "type": "boolean"
          },
          "requireCommentTicketNumber": {
            "description": "This secret requires a comment and ticket number",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretAccessViewCommentArgs": {
        "description": "SecretAccessViewCommentArgs",
        "properties": {
          "comment": {
            "description": "Comment",
            "type": "string"
          },
          "ticketNumber": {
            "description": "Ticket Number",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "Ticket System Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDependencyModel": {
        "description": "The Secret Dependency model object",
        "properties": {
          "active": {
            "description": "Whether or not the Secret Dependency is active.",
            "type": "boolean"
          },
          "childDependencyStatus": {
            "description": "The last run status of the child Secret Dependency.",
            "type": "boolean"
          },
          "conditionDependencyId": {
            "description": "The Id of the dependency that will be looked at when  Condition Mode is set to 'DEPENDENCYPASS', 'DEPENDENCYFAIL'. The Dependency must have a SortOrder lower than the current one.",
            "type": "integer",
            "format": "int32"
          },
          "conditionMode": {
            "description": "Condition Mode governs if this dependency's run relies on the result of other dependencies above it. The Default is ALWAYSRUN. Other values maybe 'All Pass', 'Any Fail', 'DEPENDENCYPASS', 'DEPENDENCYFAIL'.",
            "type": "string"
          },
          "dependencyTemplate": {
            "$ref": "#/components/schemas/SecretDependencyTemplate"
          },
          "description": {
            "description": "A description for the Secret Dependency.",
            "type": "string"
          },
          "groupId": {
            "description": "The Id of the Dependency Group that contains the Secret Dependency.",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The Id of the Secret Dependency.",
            "type": "integer",
            "format": "int32"
          },
          "logMessage": {
            "description": "The last Log message for the Secret Dependency.",
            "type": "string"
          },
          "privilegedAccountSecretId": {
            "description": "The Id of the Privileged Secret that the Secret Dependency will use to run.",
            "type": "integer",
            "format": "int32"
          },
          "runScript": {
            "$ref": "#/components/schemas/SecretDependencyRunScript"
          },
          "secretDependencyStatus": {
            "description": "The last run status of the Secret Dependency.",
            "type": "boolean"
          },
          "secretId": {
            "description": "The Id of the Secret that the Secret Dependency is assigned to.",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "The Name of the Secret that the Secret Dependency is assigned to.",
            "type": "string"
          },
          "settings": {
            "description": "The Settings used by the Secret Dependency. (Ex: WaitBeforeSeconds, Database, Port, SSHKeyDigest). If a setting exists with the same name (or intent in the case of Port and SqlPort) as a field on the Dependency template's DependencyScanItemFields collection, the value assigned to the setting takes precedence and will overwrite the corresponding DependencyScanItemField.",
            "items": {
              "$ref": "#/components/schemas/SecretDependencySettingMapForDisplay"
            },
            "type": "array"
          },
          "sortOrder": {
            "description": "The sort order of the Secret Dependency in the group.  Determines the order of execution of the dependencies within a group.",
            "type": "integer",
            "format": "int32"
          },
          "sshKeySecretId": {
            "description": "The Id of the Secret containing the SSH key. (If dependency is tied to SSH key Secret",
            "type": "integer",
            "format": "int32"
          },
          "sshKeySecretName": {
            "description": "The Name of the Secret containing the SSH key. (If dependency is tied to SSH key Secret",
            "type": "string"
          },
          "typeId": {
            "description": "The Id of the type of Secret Dependency.",
            "type": "integer",
            "format": "int32"
          },
          "typeName": {
            "description": "The name of the type of Secret Dependency.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDependencyTemplate": {
        "description": "Object filled and used for Secret Dependencies that refer to a Dependency Template",
        "properties": {
          "changerScriptId": {
            "description": "The id of the script (if any) used by the Dependency Template",
            "type": "integer",
            "format": "int32"
          },
          "dependencyScanItemFields": {
            "description": "The Scan Item Fields used by the Dependency Template",
            "items": {
              "$ref": "#/components/schemas/SecretDependencyScanItemField"
            },
            "type": "array"
          },
          "scriptName": {
            "description": "The name of the script (if any) used by the Dependency Template",
            "type": "string"
          },
          "secretDependencyChangerId": {
            "description": "The id of the Dependency Changer used by the Dependency Template",
            "type": "integer",
            "format": "int32"
          },
          "secretDependencyTemplateId": {
            "description": "The id of the Dependency Template",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDependencyScanItemField": {
        "description": "Represents the ScanItemField used for Discovery dependency matching",
        "properties": {
          "id": {
            "description": "Id of the ScanItemField",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name of the ScanItemField",
            "type": "string"
          },
          "parentName": {
            "description": "ScanItemField Parent name.  Will Match Name if no parent is inherited.",
            "type": "string"
          },
          "value": {
            "description": "Value of the ScanItemField",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDependencyRunScript": {
        "description": "The RunScript details of a Dependency that directly runs a Script",
        "properties": {
          "machineName": {
            "description": "The machine name that the Secret Dependency runs on",
            "type": "string"
          },
          "odbcConnectionArguments": {
            "description": "Connection arguments used for ODBC connections",
            "items": {
              "$ref": "#/components/schemas/SecretDependencyOdbcConnectionArg"
            },
            "type": "array"
          },
          "scriptArguments": {
            "description": "Parameter script arguments used by the script",
            "items": {
              "$ref": "#/components/schemas/SecretDependencyUniversalScriptArgument"
            },
            "type": "array"
          },
          "scriptId": {
            "description": "The Id of the script that the Secret Dependency runs. (If directly running a script)",
            "type": "integer",
            "format": "int32"
          },
          "scriptName": {
            "description": "The Name of the script that the Secret Dependency runs.",
            "type": "string"
          },
          "serviceName": {
            "description": "The service name of the Secret Dependency",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDependencyOdbcConnectionArg": {
        "description": "Connection arguments used for ODBC connections",
        "properties": {
          "name": {
            "description": "Name of the argument",
            "type": "string"
          },
          "value": {
            "description": "Value for the argument",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDependencyUniversalScriptArgument": {
        "description": "Arguments used for Run Script Dependencies",
        "properties": {
          "name": {
            "description": "Name of the argument",
            "type": "string"
          },
          "type": {
            "description": "Argument type",
            "type": "string"
          },
          "value": {
            "description": "Argument value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDependencySettingMapForDisplay": {
        "description": "Settings used by Secret Dependency Templates",
        "properties": {
          "changerSettingValue": {
            "description": "The default read-only setting value on the changer that will be used if no setting value has been given.",
            "type": "string"
          },
          "setting": {
            "$ref": "#/components/schemas/SecretDependencySetting"
          },
          "settingId": {
            "description": "The Setting Id",
            "type": "integer",
            "format": "int32"
          },
          "settingName": {
            "description": "The Setting Name",
            "type": "string"
          },
          "settingValue": {
            "description": "The value for the setting that will be stored in the database.  This value should be set when editing or creating a Dependency. If not set the default value will be calculated by looking at the Changer or Script.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDependencySetting": {
        "description": "Secret Dependency Settings - Mostly used internally",
        "properties": {
          "active": {
            "description": "Indicates the setting is active.",
            "type": "boolean"
          },
          "canEdit": {
            "description": "Indicates the setting details may be editted.",
            "type": "boolean"
          },
          "canEditValue": {
            "description": "Indicates the setting value may be editted.",
            "type": "boolean"
          },
          "childSettings": {
            "description": "The Child Settings that would be used  for list of options.",
            "items": {
              "$ref": "#/components/schemas/SecretDependencySetting"
            },
            "type": "array"
          },
          "defaultValue": {
            "description": "Default value if the setting is not given a value",
            "type": "string"
          },
          "displayName": {
            "description": "Setting Display Name",
            "type": "string"
          },
          "id": {
            "description": "Id of the setting",
            "type": "integer",
            "format": "int32"
          },
          "isVisibile": {
            "description": "Indicates the setting is visible on the UI.",
            "type": "boolean"
          },
          "parentSettingId": {
            "description": "Parent Setting Id used when a setting has child options.",
            "type": "integer",
            "format": "int32"
          },
          "regexValidation": {
            "description": "Regex used to validate the input",
            "type": "string"
          },
          "settingName": {
            "description": "Name of the setting",
            "type": "string"
          },
          "settingSectionId": {
            "description": "Section Id of the setting",
            "type": "integer",
            "format": "int32"
          },
          "settingType": {
            "description": "Type of Setting (Default (string) = 0, Integer = 1, String = 2, Boolean = 3, StringArray = 4, DropDown = 5,DropDownItem = 6",
            "type": "integer",
            "format": "int32"
          },
          "subSettingSectionId": {
            "description": "Subsetting Section Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDependencyUpdateArgs": {
        "description": "SecretDependencyUpdateArgs",
        "properties": {
          "active": {
            "description": "Whether or not the Secret Dependency is active",
            "type": "boolean"
          },
          "conditionDependencyId": {
            "description": "The Id of the dependency that will be looked at when  Condition Mode is set to 'DEPENDENCYPASS', 'DEPENDENCYFAIL'. The Dependency must have a SortOrder lower than the current one.",
            "type": "integer",
            "format": "int32"
          },
          "conditionMode": {
            "description": "Condition Mode governs if this dependency's run relies on the result of other dependencies above it. The Default is ALWAYSRUN. Other values maybe 'All Pass', 'Any Fail', 'DEPENDENCYPASS', 'DEPENDENCYFAIL'.",
            "type": "string"
          },
          "dependencyTemplate": {
            "$ref": "#/components/schemas/SecretDependencyTemplate"
          },
          "description": {
            "description": "A description for the Secret Dependency",
            "type": "string"
          },
          "groupId": {
            "description": "The Id of the Dependency Group that contains the Secret Dependency. If set to 0 or a group id that does not exist on the secret, an error will be thrown.",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The Id of the Secret Dependency",
            "type": "integer",
            "format": "int32"
          },
          "machineName": {
            "description": "The machine name that the Secret Dependency runs on",
            "type": "string"
          },
          "privilegedAccountSecretId": {
            "description": "The Id of the Privileged Secret that the Secret Dependency will use to run",
            "type": "integer",
            "format": "int32"
          },
          "runScript": {
            "$ref": "#/components/schemas/SecretDependencyRunScript"
          },
          "secretId": {
            "description": "Read Only. The Id of the Secret that the Secret Dependency is assigned to. Cannot move a dependency to another secret by changing its SecretId.",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "Read Only. The Name of the Secret that the Secret Dependency is assigned to",
            "type": "string"
          },
          "serviceName": {
            "description": "The service name of the Secret Dependency",
            "type": "string"
          },
          "settings": {
            "description": "The Settings used by the Secret Dependency. (Ex: WaitBeforeSeconds, Database, Port, SSHKeyDigest)",
            "items": {
              "$ref": "#/components/schemas/SecretDependencySettingMapForDisplay"
            },
            "type": "array"
          },
          "sortOrder": {
            "description": "The sort order of the Secret Dependency in the group.  Determines the order of execution of the dependencies within a group. If not set (default value 0), the dependency will be added at the end of the group. If less than zero the dependency will be added as the first dependency in the group and all other dependencies in the group will be adjusted.",
            "type": "integer",
            "format": "int32"
          },
          "sshKeySecretId": {
            "description": "The Id of the Secret containing the SSH key. (If dependency is tied to SSH key Secret",
            "type": "integer",
            "format": "int32"
          },
          "typeId": {
            "description": "The Id of the type of Secret Dependency",
            "type": "integer",
            "format": "int32"
          },
          "typeName": {
            "description": "Read Only. The name of the type of Secret Dependency",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDependencyGroup": {
        "description": "A Secret Dependency Group Object. A container for a logical collection of Secret Dependencies that use the same site.",
        "properties": {
          "id": {
            "description": "The Id of the Secret Dependency Group",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name of the Secret Dependency Group",
            "type": "string"
          },
          "siteId": {
            "description": "The Id of the Site that all dependencies in this group use",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "The Name of the Site that all dependencies in this group use",
            "type": "string"
          },
          "statusFailedCount": {
            "description": "Total Enabled Secret dependencies in this group with a Failed status",
            "type": "integer",
            "format": "int32"
          },
          "statusNotRunCount": {
            "description": "Total Enabled Secret dependencies in this group that have not yet run",
            "type": "integer",
            "format": "int32"
          },
          "statusSuccessCount": {
            "description": "Total Enabled Secret dependencies in this group with a Success status",
            "type": "integer",
            "format": "int32"
          },
          "totalDependencies": {
            "description": "Total Enabled Secret dependencies in this group",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDependencyGroupCreateArgs": {
        "description": "A Secret Dependency Group Object. A container for a logical collection of Secret Dependencies that use the same site.",
        "properties": {
          "secretDependencyGroupName": {
            "description": "The name of the Secret Dependency Group",
            "type": "string"
          },
          "siteId": {
            "description": "The Id of the Site that all dependencies in this group use",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UpdateSecretDependencyGroupArgs": {
        "description": "UpdateSecretDependencyGroupArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UpdateSecretDependencyGroupModel"
          }
        },
        "type": "object"
      },
      "UpdateSecretDependencyGroupModel": {
        "description": "Update Secret Dependency Group Options",
        "properties": {
          "secretDependencyGroupId": {
            "description": "Id of the Secret Dependency Group to update.",
            "type": "integer",
            "format": "int32"
          },
          "secretDependencyGroupName": {
            "description": "Name for the Secret Dependency Group.",
            "type": "string"
          },
          "siteId": {
            "description": "Id of the Site to assign to the Dependency Group.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDependencyGroupModel": {
        "description": "A Secret Dependency Group Object. A container for a logical collection of Secret Dependencies that use the same site.",
        "properties": {
          "name": {
            "description": "The name of the Secret Dependency Group",
            "type": "string"
          },
          "secretDependencyGroupId": {
            "description": "The Id of the Secret Dependency Group",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "The Id of the Secret assigned to the Secret Dependency Group",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "The Id of the Site that all dependencies in this group use",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "The Name of the Site that all dependencies in this group use",
            "type": "string"
          },
          "statusFailedCount": {
            "description": "Total Enabled Secret dependencies in this group with a Failed status",
            "type": "integer",
            "format": "int32"
          },
          "statusNotRunCount": {
            "description": "Total Enabled Secret dependencies in this group that have not yet run",
            "type": "integer",
            "format": "int32"
          },
          "statusSuccessCount": {
            "description": "Total Enabled Secret dependencies in this group with a Success status",
            "type": "integer",
            "format": "int32"
          },
          "totalDependencies": {
            "description": "Total Enabled Secret dependencies in this group",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DependencyScript": {
        "description": "DependencyScript[]",
        "properties": {
          "arguments": {
            "description": "The Settings of the script used for arguments",
            "items": {
              "$ref": "#/components/schemas/SecretDependencyUniversalScriptArgument"
            },
            "type": "array"
          },
          "id": {
            "description": "The Script Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name of the script",
            "type": "string"
          },
          "odbcConnectionArguments": {
            "description": "The connection arguments of the script if it is a SQL based script",
            "items": {
              "$ref": "#/components/schemas/SecretDependencyOdbcConnectionArg"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DependencyTemplate": {
        "description": "DependencyTemplate[]",
        "properties": {
          "active": {
            "description": "Whether or not the Depenency Template is Active",
            "type": "boolean"
          },
          "dependencyChangerId": {
            "description": "The Depenency Template Changer Id",
            "type": "integer",
            "format": "int32"
          },
          "dependencyTypeId": {
            "description": "The Dependency Template Type Id",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The Dependency Template Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The Dependency Template Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSecretDependencySummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretDependencySummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDependencySummary": {
        "description": "The Summary object for a Secret Dependency",
        "properties": {
          "canTest": {
            "description": "Whether or not this dependency can be tested",
            "type": "boolean"
          },
          "enabled": {
            "description": "Whether or not this dependency is enabled",
            "type": "boolean"
          },
          "groupId": {
            "description": "The Id of the Dependency Group that contains the Secret Dependency",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The Id of the Secret Dependency",
            "type": "integer",
            "format": "int32"
          },
          "machineName": {
            "description": "The machine name that the Secret Dependency runs on",
            "type": "string"
          },
          "order": {
            "description": "The order for this dependency within its group",
            "type": "integer",
            "format": "int32"
          },
          "runResult": {
            "$ref": "#/components/schemas/DependencyRunResultStatus"
          },
          "secretId": {
            "description": "The Id of the Secret that the Secret Dependency is assigned to",
            "type": "integer",
            "format": "int32"
          },
          "serviceName": {
            "description": "The service name of the Secret Dependency",
            "type": "string"
          },
          "typeId": {
            "description": "The Id of the type of Secret Dependency",
            "type": "integer",
            "format": "int32"
          },
          "typeName": {
            "description": "The name of the type of Secret Dependency",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DependencyRunResultStatus": {
        "description": "The last run result for this dependency",
        "properties": {},
        "type": "string",
        "enum": [
          "Success",
          "Failed",
          "NotRun"
        ]
      },
      "SecretDependencyCreateArgs": {
        "description": "The Secret Dependency Create Arguments object",
        "properties": {
          "active": {
            "description": "Whether or not the Secret Dependency is active.",
            "type": "boolean"
          },
          "conditionDependencyId": {
            "description": "The Id of the dependency that will be looked at when  Condition Mode is set to 'DEPENDENCYPASS', 'DEPENDENCYFAIL'. The Dependency must have a SortOrder lower than the current one.",
            "type": "integer",
            "format": "int32"
          },
          "conditionMode": {
            "description": "Condition Mode governs if this dependency's run relies on the result of other dependencies above it. The Default is ALWAYSRUN. Other values maybe 'All Pass', 'Any Fail', 'DEPENDENCYPASS', 'DEPENDENCYFAIL'.",
            "type": "string"
          },
          "dependencyTemplate": {
            "$ref": "#/components/schemas/SecretDependencyTemplate"
          },
          "description": {
            "description": "A description for the Secret Dependency.",
            "type": "string"
          },
          "groupId": {
            "description": "The Id of the Dependency Group that contains the Secret Dependency. If set to default value of 0, it will be added to the first group on the secret.",
            "type": "integer",
            "format": "int32"
          },
          "machineName": {
            "description": "The machine name that the Secret Dependency runs on.",
            "type": "string"
          },
          "privilegedAccountSecretId": {
            "description": "The Id of the Privileged Secret that the Secret Dependency will use to run.",
            "type": "integer",
            "format": "int32"
          },
          "runScript": {
            "$ref": "#/components/schemas/SecretDependencyRunScript"
          },
          "secretId": {
            "description": "The Id of the Secret that the Secret Dependency is assigned to.",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "Read Only. The Name of the Secret that the Secret Dependency is assigned to.",
            "type": "string"
          },
          "serviceName": {
            "description": "The service name of the Secret Dependency.",
            "type": "string"
          },
          "settings": {
            "description": "The Settings used by the Secret Dependency. (Ex: WaitBeforeSeconds, Database, Port, SSHKeyDigest)",
            "items": {
              "$ref": "#/components/schemas/SecretDependencySettingMapForDisplay"
            },
            "type": "array"
          },
          "sortOrder": {
            "description": "The sort order of the Secret Dependency in the group.  Determines the order of execution of the dependencies within a group. If set to the default value of 0, the dependency will be added at the end of the group. If less than zero the dependency will be added as the first dependency in the group and all other dependencies in the group will be adjusted.",
            "type": "integer",
            "format": "int32"
          },
          "sshKeySecretId": {
            "description": "The Id of the Secret containing the SSH key. (If dependency is tied to SSH key Secret)",
            "type": "integer",
            "format": "int32"
          },
          "typeId": {
            "description": "The Id of the type of Secret Dependency.",
            "type": "integer",
            "format": "int32"
          },
          "typeName": {
            "description": "Read Only. The name of the type of Secret Dependency.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaskProgress": {
        "description": "Information about the current status of a running task",
        "properties": {
          "errors": {
            "description": "A list of errors for the task",
            "items": {
              "$ref": "#/components/schemas/TaskError"
            },
            "type": "array"
          },
          "isComplete": {
            "description": "True if the task is complete",
            "type": "boolean"
          },
          "percentageComplete": {
            "description": "The estimated percentage complete of the task",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "The current status of the task",
            "type": "string"
          },
          "taskIdentifier": {
            "description": "The task identifier",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaskError": {
        "description": "A description of an error for a task",
        "properties": {
          "errorMessage": {
            "description": "The error message",
            "type": "string"
          },
          "itemName": {
            "description": "The name of the item that had the error",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSecretEraseRequestHistoryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretEraseRequestHistoryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretEraseRequestHistoryModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "details": {
            "description": "Details",
            "type": "string"
          },
          "fullName": {
            "description": "FullName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretEraseRequestModel": {
        "description": "SecretEraseRequestModel",
        "properties": {
          "canApproveOrDeny": {
            "description": "CanApproveOrDeny",
            "type": "boolean"
          },
          "canCancel": {
            "description": "CanCancel",
            "type": "boolean"
          },
          "eraseAfter": {
            "description": "EraseAfter",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "requestComment": {
            "description": "RequestComment",
            "type": "string"
          },
          "requestDate": {
            "description": "RequestDate",
            "type": "string",
            "format": "date-time"
          },
          "requestUserId": {
            "description": "RequestUserId",
            "type": "integer",
            "format": "int32"
          },
          "requestUserName": {
            "description": "RequestUserName",
            "type": "string"
          },
          "responseComment": {
            "description": "ResponseComment",
            "type": "string"
          },
          "reviewStatusMessage": {
            "description": "ReviewStatusMessage",
            "type": "string"
          },
          "secretCount": {
            "description": "SecretCount",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "Status",
            "type": "integer",
            "format": "int32"
          },
          "statusDescription": {
            "description": "StatusDescription",
            "type": "string"
          },
          "timeErased": {
            "description": "TimeErased",
            "type": "string",
            "format": "date-time"
          },
          "workflowInstanceId": {
            "description": "WorkflowInstanceId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSecretEraseRequestSecretModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretEraseRequestSecretModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretEraseRequestSecretModel": {
        "description": "Query results",
        "properties": {
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "requestId": {
            "description": "RequestId",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "SecretId",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "SecretName",
            "type": "string"
          },
          "timeErased": {
            "description": "TimeErased",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "PagingOfSecretEraseRequestModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretEraseRequestModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretEraseRequestCreateArgs": {
        "description": "SecretEraseRequestCreateArgs",
        "properties": {
          "eraseAfter": {
            "description": "Erase After Date",
            "type": "string",
            "format": "date-time"
          },
          "requestComment": {
            "description": "Request Comment",
            "type": "string"
          },
          "secretIds": {
            "description": "Ids of Secrets to Erase",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretEraseRequestActionResultModel": {
        "description": "SecretEraseRequestActionResultModel",
        "properties": {
          "actionResultMessage": {
            "description": "ActionResultMessage",
            "type": "string"
          },
          "request": {
            "$ref": "#/components/schemas/SecretEraseRequestModel"
          }
        },
        "type": "object"
      },
      "SecretEraseRequestUpdateArgs": {
        "description": "SecretEraseRequestUpdateArgs",
        "properties": {
          "eraseAfter": {
            "$ref": "#/components/schemas/OptionalDateTimeOffset"
          },
          "responseComment": {
            "description": "Response Comment",
            "type": "string"
          },
          "secretEraseRequestId": {
            "description": "Secret Erase Request Id",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "$ref": "#/components/schemas/SecretEraseRequestModelStatus"
          }
        },
        "type": "object"
      },
      "SecretEraseRequestModelStatus": {
        "description": "New status for the request: Pending, Approved, Denied, Canceled, Completed",
        "properties": {},
        "type": "string",
        "enum": [
          "Pending",
          "Approved",
          "Denied",
          "Canceled",
          "Completed",
          "CompletedWithErrors"
        ]
      },
      "SecretTemplateModel": {
        "description": "SecretTemplateModel[]",
        "properties": {
          "fields": {
            "description": "Secret template fields",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateField"
            },
            "type": "array"
          },
          "id": {
            "description": "Secret template Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Secret template name",
            "type": "string"
          },
          "passwordTypeId": {
            "description": "Password Type Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateField": {
        "description": "Secret template field",
        "properties": {
          "description": {
            "description": "Field description",
            "type": "string"
          },
          "displayName": {
            "description": "Field display name",
            "type": "string"
          },
          "editablePermission": {
            "description": "Who has editing rights",
            "type": "integer",
            "format": "int32"
          },
          "editRequires": {
            "$ref": "#/components/schemas/EditRequiresOptions"
          },
          "fieldSlugName": {
            "description": "Field Slug Name",
            "type": "string"
          },
          "generatePasswordCharacterSet": {
            "description": "Generate password character set. Only returned if user can manage secret templates",
            "type": "string"
          },
          "generatePasswordLength": {
            "description": "Generate password length.  Only returned if user can manage secret templates",
            "type": "integer",
            "format": "int32"
          },
          "hideOnView": {
            "description": "Hide this field when viewing",
            "type": "boolean"
          },
          "historyLength": {
            "description": "History length",
            "type": "integer",
            "format": "int32"
          },
          "isExpirationField": {
            "description": "Is expiration field",
            "type": "boolean"
          },
          "isFile": {
            "description": "Is this field a file type",
            "type": "boolean"
          },
          "isIndexable": {
            "description": "Is able to be indexed",
            "type": "boolean"
          },
          "isList": {
            "description": "Is this field a list field type",
            "type": "boolean"
          },
          "isNotes": {
            "description": "Is this field a notes field type",
            "type": "boolean"
          },
          "isPassword": {
            "description": "Is this field a password field type",
            "type": "boolean"
          },
          "isRequired": {
            "description": "Is this field required",
            "type": "boolean"
          },
          "isUrl": {
            "description": "Is this field a url field type",
            "type": "boolean"
          },
          "listType": {
            "$ref": "#/components/schemas/ListType"
          },
          "mustEncrypt": {
            "description": "Must encrypt.  Only returned if user can manage secret templates",
            "type": "boolean"
          },
          "name": {
            "description": "Field name",
            "type": "string"
          },
          "passwordRequirementId": {
            "description": "ID For Password Requirement assigned to field",
            "type": "integer",
            "format": "int32"
          },
          "passwordTypeFieldId": {
            "description": "Type of password field",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplateFieldId": {
            "description": "Field Id",
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "description": "Sort Order for Field",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "EditRequiresOptions": {
        "description": "What option is required to edit this field including Owner, Edit, and Not Editable",
        "properties": {},
        "type": "string",
        "enum": [
          "Edit",
          "Owner",
          "NotEditable"
        ]
      },
      "ListType": {
        "description": "What type of contents does this list field contain",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "Generic",
          "URL"
        ]
      },
      "SecretSearchByUrlSummary": {
        "description": "SecretSearchByUrlSummary[]",
        "properties": {
          "hasOwnerOrEditAccess": {
            "description": "HasOwnerOrEditAccess",
            "type": "boolean"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "isButtonBound": {
            "description": "IsButtonBound",
            "type": "boolean"
          },
          "isFavoriteSecret": {
            "description": "IsFavoriteSecret",
            "type": "boolean"
          },
          "isSystemFolder": {
            "description": "IsSystemFolder",
            "type": "boolean"
          },
          "matchOrderType": {
            "$ref": "#/components/schemas/MatchType"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "redirectUrl": {
            "description": "RedirectUrl",
            "type": "string"
          },
          "requireComment": {
            "description": "RequireComment",
            "type": "boolean"
          },
          "resultPriority": {
            "description": "ResultPriority",
            "type": "integer",
            "format": "int32"
          },
          "secretTypeId": {
            "description": "SecretTypeId",
            "type": "integer",
            "format": "int32"
          },
          "secretUrl": {
            "description": "SecretUrl",
            "type": "string"
          },
          "shouldRedirect": {
            "description": "ShouldRedirect",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MatchType": {
        "description": "MatchOrderType",
        "properties": {},
        "type": "string",
        "enum": [
          "Loose",
          "Partial",
          "Exact"
        ]
      },
      "SecretExtensionSearchSummary": {
        "description": "SecretExtensionSearchSummary[]",
        "properties": {
          "hasOwnerOrEditAccess": {
            "description": "HasOwnerOrEditAccess",
            "type": "boolean"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "isButtonBound": {
            "description": "IsButtonBound",
            "type": "boolean"
          },
          "isFavoriteSecret": {
            "description": "IsFavoriteSecret",
            "type": "boolean"
          },
          "isSystemFolder": {
            "description": "IsSystemFolder",
            "type": "boolean"
          },
          "matchOrderType": {
            "$ref": "#/components/schemas/MatchType"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "redirectUrl": {
            "description": "RedirectUrl",
            "type": "string"
          },
          "requireComment": {
            "description": "RequireComment",
            "type": "boolean"
          },
          "resultPriority": {
            "description": "ResultPriority",
            "type": "integer",
            "format": "int32"
          },
          "secretTypeId": {
            "description": "SecretTypeId",
            "type": "integer",
            "format": "int32"
          },
          "shouldRedirect": {
            "description": "ShouldRedirect",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ExtensionAutoFillValueArgs": {
        "description": "ExtensionAutoFillValueArgs",
        "properties": {
          "secretId": {
            "description": "The SecretId for the Secret to retrieve the auto-fill values from.",
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "description": "The URL for which the auto-fill values are being retrieved.  Must be the same origin as the URL on the Secret.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretExtensionAutoFillResult": {
        "description": "SecretExtensionAutoFillResult",
        "properties": {
          "password": {
            "description": "Password",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "type": "string"
          },
          "useSessionRecording": {
            "description": "UseSessionRecording",
            "type": "boolean"
          },
          "webLauncherRequiresIncognitoMode": {
            "description": "WebLauncherRequiresIncognitoMode",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfSecretViewedByUserModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretViewedByUserModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretViewedByUserModel": {
        "description": "Query results",
        "properties": {
          "canView": {
            "description": "CanView",
            "type": "boolean"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "displayNameAndUserName": {
            "description": "DisplayNameAndUserName",
            "type": "string"
          },
          "domain": {
            "description": "Domain",
            "type": "string"
          },
          "enabled": {
            "description": "Enabled",
            "type": "boolean"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "UserName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailHookUpdateArgs": {
        "description": "SecretDetailHookUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailHookUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailHookUpdateModel": {
        "description": "Secret Detail Hook Update Model",
        "properties": {
          "arguments": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "database": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "eventActionId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "failureMessage": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "parameters": {
            "description": "Parameters",
            "items": {
              "$ref": "#/components/schemas/SecretDetailHookParameterViewModel"
            },
            "type": "array"
          },
          "port": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "prePostOption": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "privilegedSecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "scriptId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "scriptTypeId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "serverKeyDigest": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "serverName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "sshKeySecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "status": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "stopOnFailure": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "SecretDetailHookParameterViewModel": {
        "description": "Hook Parameter",
        "properties": {
          "parameterName": {
            "description": "Parameter Name",
            "type": "string"
          },
          "parameterType": {
            "description": "Parameter Type",
            "type": "string"
          },
          "parameterValue": {
            "description": "Parameter Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailHookModel": {
        "description": "Secret Detail Hook View Model",
        "properties": {
          "arguments": {
            "description": "Arguments",
            "type": "string"
          },
          "database": {
            "description": "Database",
            "type": "string"
          },
          "description": {
            "description": "Hook Description",
            "type": "string"
          },
          "eventActionId": {
            "description": "Event Action Id",
            "type": "integer",
            "format": "int32"
          },
          "failureMessage": {
            "description": "Failure Message",
            "type": "string"
          },
          "hookId": {
            "description": "Hook Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Hook Name",
            "type": "string"
          },
          "parameters": {
            "description": "Parameters",
            "items": {
              "$ref": "#/components/schemas/SecretDetailHookParameterViewModel"
            },
            "type": "array"
          },
          "port": {
            "description": "Port",
            "type": "string"
          },
          "prePostOption": {
            "description": "Hook PRE or POST Option",
            "type": "string"
          },
          "privilegedSecretId": {
            "description": "Privilige Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "scriptId": {
            "description": "Script Id",
            "type": "integer",
            "format": "int32"
          },
          "scriptTypeId": {
            "description": "Script Type Id",
            "type": "integer",
            "format": "int32"
          },
          "secretHookId": {
            "description": "Secret Hook Id",
            "type": "integer",
            "format": "int32"
          },
          "serverKeyDigest": {
            "description": "Server Key Digest",
            "type": "string"
          },
          "serverName": {
            "description": "Server Name",
            "type": "string"
          },
          "sortOrder": {
            "description": "Hook Sort Order",
            "type": "integer",
            "format": "int32"
          },
          "sshKeySecretId": {
            "description": "SSH Key Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "Hook Status",
            "type": "boolean"
          },
          "stopOnFailure": {
            "description": "Stop on Failure",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretDetailHookSummaryViewModel": {
        "description": "SecretDetailHookSummaryViewModel[]",
        "properties": {
          "description": {
            "description": "Hook Description",
            "type": "string"
          },
          "eventActionName": {
            "description": "Event Action Name",
            "type": "string"
          },
          "hookId": {
            "description": "Hook Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Hook Name",
            "type": "string"
          },
          "prePostOption": {
            "description": "Hook PRE or POST Option",
            "type": "string"
          },
          "scriptName": {
            "description": "Script Name",
            "type": "string"
          },
          "scriptTypeName": {
            "description": "Script Type Name",
            "type": "string"
          },
          "secretHookId": {
            "description": "Secret Hook Id",
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "description": "Hook Sort Order",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "Hook Status",
            "type": "boolean"
          },
          "stopOnFailure": {
            "description": "Stop On Failure",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretDetailHookCreateArgs": {
        "description": "Create Secret Hook Arguments",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailHooksCreateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailHooksCreateModel": {
        "description": "Secret Detail Hook Create Model",
        "properties": {
          "arguments": {
            "description": "Arguments",
            "type": "string"
          },
          "database": {
            "description": "Database",
            "type": "string"
          },
          "description": {
            "description": "Hook Description",
            "type": "string"
          },
          "eventActionId": {
            "description": "Event Action Id",
            "type": "integer",
            "format": "int32"
          },
          "failureMessage": {
            "description": "Failure MEssage",
            "type": "string"
          },
          "name": {
            "description": "Hook Name",
            "type": "string"
          },
          "parameters": {
            "description": "Hook Parameters",
            "items": {
              "$ref": "#/components/schemas/SecretDetailHookParameterViewModel"
            },
            "type": "array"
          },
          "port": {
            "description": "Port",
            "type": "string"
          },
          "prePostOption": {
            "description": "Hook Pre or Post Option",
            "type": "string"
          },
          "privilegedSecretId": {
            "description": "Privileged Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "scriptId": {
            "description": "Script Id",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "serverKeyDigest": {
            "description": "Server Key Digest",
            "type": "string"
          },
          "serverName": {
            "description": "Server Name",
            "type": "string"
          },
          "sshKeySecretId": {
            "description": "SSH Key Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "stopOnFailure": {
            "description": "Stop On Failure",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretPermissionModel": {
        "description": "Secret permission",
        "properties": {
          "groupId": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group name",
            "type": "string"
          },
          "id": {
            "description": "Secret permission ID",
            "type": "integer",
            "format": "int32"
          },
          "knownAs": {
            "description": "KnownAs",
            "type": "string"
          },
          "secretAccessRoleId": {
            "description": "Granted role ID",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleName": {
            "description": "Granted role name",
            "type": "string"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretPermissionUpdateArgs": {
        "description": "Secret permission update options",
        "required": [
          "id",
          "secretId",
          "secretAccessRoleName"
        ],
        "properties": {
          "id": {
            "description": "Secret permission ID. Must match ID in path",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleName": {
            "description": "Granted role name",
            "type": "string"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSecretPermissionSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretPermissionSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPermissionSummary": {
        "description": "Secret permission summary",
        "properties": {
          "groupId": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group name",
            "type": "string"
          },
          "id": {
            "description": "Secret permission ID",
            "type": "integer",
            "format": "int32"
          },
          "knownAs": {
            "description": "KnownAs",
            "type": "string"
          },
          "secretAccessRoleId": {
            "description": "Granted role ID",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleName": {
            "description": "Granted role name",
            "type": "string"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretPermissionCreateArgs": {
        "description": "Secret permission create options",
        "properties": {
          "domainName": {
            "description": "Domain Name",
            "type": "string"
          },
          "groupId": {
            "description": "Group ID being granted permission. Leave empty if granting to a user",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group Name",
            "type": "string"
          },
          "secretAccessRoleName": {
            "description": "Role name being granted",
            "type": "string"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "User ID being granted permission. Leave empty if granting to a group",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretShareUpdateArgs": {
        "description": "SecretShareUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretShareUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretShareUpdateModel": {
        "description": "Share permissions for a specific Secret.  Currently only inherits",
        "properties": {
          "inheritPermissions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "SecretShareModel": {
        "description": "Share permissions for a specific Secret.  Currently only inherits",
        "properties": {
          "inheritPermissions": {
            "description": "Whether or not this secret inherits permissions from the folder that contains it.",
            "type": "boolean"
          },
          "secretId": {
            "description": "The secret to which the share permissions apply",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPermissionsIsCurrentUserSecretOwnerArgs": {
        "description": "SecretPermissionsIsCurrentUserSecretOwnerArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretPermissionsIsCurrentUserSecretOwnerModel"
          }
        },
        "type": "object"
      },
      "SecretPermissionsIsCurrentUserSecretOwnerModel": {
        "description": "SecretPermissionsIsCurrentUserSecretOwnerModel options",
        "properties": {
          "groupSecretAccessRoles": {
            "description": "GroupSecretAccessRoleModels to check current user is Secret Owner against.",
            "items": {
              "$ref": "#/components/schemas/SecretPermissionsGroupSecretAccessRoleModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretPermissionsGroupSecretAccessRoleModel": {
        "description": "Group Id and SecretAccessRole Id",
        "properties": {
          "groupId": {
            "description": "Id of Group",
            "type": "integer",
            "format": "int32"
          },
          "secretAccessRoleId": {
            "description": "Id of SecretAccessRole",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPermissionsIsCurrentUserSecretOwnerResponseModel": {
        "description": "SecretPermissionsIsCurrentUserSecretOwner ResponseModel",
        "properties": {
          "isCurrentUserSecretOwner": {
            "description": "True if the current user is a Secret Owner given the supplied Secret Permission Models.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "IPagingOfSecretPolicyModel": {
        "description": "IPagingOfSecretPolicyModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/SecretPolicyModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretPolicyDetailModelV2": {
        "description": "Secret Policy Detail Model V2",
        "properties": {
          "active": {
            "description": "Indicates the policy is active",
            "type": "boolean"
          },
          "affectedFolderCount": {
            "description": "The count of total folders that would be affected by changing this policy",
            "type": "integer",
            "format": "int32"
          },
          "affectedInheritingFoldersCount": {
            "description": "The count of inherited secrets that would be affected by changing this policy",
            "type": "integer",
            "format": "int32"
          },
          "affectedInheritingSecretsCount": {
            "description": "The count of inherited secrets that would be affected by changing this policy",
            "type": "integer",
            "format": "int32"
          },
          "affectedSecretCount": {
            "description": "The count of total secrets that would be affected by changing this policy",
            "type": "integer",
            "format": "int32"
          },
          "generalItems": {
            "$ref": "#/components/schemas/SecretPolicyGeneralItemsModel"
          },
          "launcherItems": {
            "$ref": "#/components/schemas/SecretPolicyLauncherItemsModel"
          },
          "rpcItems": {
            "$ref": "#/components/schemas/SecretPolicyRpcItemsModel"
          },
          "secretPolicyDescription": {
            "description": "Secret Policy Description",
            "type": "string"
          },
          "secretPolicyId": {
            "description": "Secret Policy Id",
            "type": "integer",
            "format": "int32"
          },
          "secretPolicyName": {
            "description": "Secret Policy Name",
            "type": "string"
          },
          "securityItems": {
            "$ref": "#/components/schemas/SecretPolicySecurityItemsModel"
          }
        },
        "type": "object"
      },
      "SecretPolicyGeneralItemsModel": {
        "description": "Secret Policy General Item Model",
        "properties": {
          "jumpboxRouteId": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalGuid"
          },
          "siteId": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "SecretPolicyItemOfOptionalGuid": {
        "description": "Jumpbox Route Id",
        "properties": {
          "parentPolicyItemId": {
            "description": "ParentPolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "policyItemId": {
            "description": "PolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "PolicyApplyType": {
        "description": "PolicyApplyType",
        "properties": {},
        "type": "string",
        "enum": [
          "NotSet",
          "Default",
          "Enforced"
        ]
      },
      "SecretPolicyItemOfOptionalInt32": {
        "description": "Site Id",
        "properties": {
          "parentPolicyItemId": {
            "description": "ParentPolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "policyItemId": {
            "description": "PolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPolicyLauncherItemsModel": {
        "description": "Secret Policy Launcher Item Model",
        "properties": {
          "launcherSettings": {
            "$ref": "#/components/schemas/SecretPolicyItemOfLauncherSettingsModel"
          },
          "webLauncherRequiresIncognitoMode": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          }
        },
        "type": "object"
      },
      "SecretPolicyItemOfLauncherSettingsModel": {
        "description": "Launcher Settings defined by the secret policy",
        "properties": {
          "parentPolicyItemId": {
            "description": "ParentPolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "policyItemId": {
            "description": "PolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/LauncherSettingsModel"
          }
        },
        "type": "object"
      },
      "LauncherSettingsModel": {
        "description": "RDP Launcher Settings",
        "properties": {
          "allowClipboard": {
            "description": "Allow Clipboard",
            "type": "boolean"
          },
          "allowDrives": {
            "description": "Allow Drives",
            "type": "boolean"
          },
          "allowPrinters": {
            "description": "Allow Printers",
            "type": "boolean"
          },
          "allowSmartCards": {
            "description": "Allow SmartCards",
            "type": "boolean"
          },
          "connectToConsole": {
            "description": "Connect To Console",
            "type": "boolean"
          },
          "launcherHeight": {
            "description": "Launcher Height",
            "type": "integer",
            "format": "int32"
          },
          "launcherWidth": {
            "description": "Launcher Height",
            "type": "integer",
            "format": "int32"
          },
          "useCustomLauncherResolution": {
            "description": "Use Custom Launcher Resolution",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretPolicyItemOfOptionalBoolean": {
        "description": "Web Launcher Requires Incognito Mode",
        "properties": {
          "parentPolicyItemId": {
            "description": "ParentPolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "policyItemId": {
            "description": "PolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretPolicyRpcItemsModel": {
        "description": "Secret Policy RPC Items Model",
        "properties": {
          "associatedSecretId1": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          },
          "associatedSecretId2": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          },
          "autoChangeOnExpiration": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "autoChangeSchedule": {
            "$ref": "#/components/schemas/SecretPolicyItemOfAutoChangeScheduleModel"
          },
          "heartBeatEnabled": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "passwordTypeWebScriptId": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          },
          "privilegedSecretId": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "SecretPolicyItemOfAutoChangeScheduleModel": {
        "description": "Auto Change Schedule depends on Auto Change On Expiration being set",
        "properties": {
          "parentPolicyItemId": {
            "description": "ParentPolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "policyItemId": {
            "description": "PolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/AutoChangeScheduleModel"
          }
        },
        "type": "object"
      },
      "AutoChangeScheduleModel": {
        "description": "Auto Change Schedule Model",
        "properties": {
          "changeOnlyWhenExpired": {
            "description": "The password will only be changed when the Secret has expired",
            "type": "boolean"
          },
          "changeType": {
            "description": "Schedule Change Type",
            "type": "string"
          },
          "days": {
            "description": "Days of Recurrence if Daily ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "friday": {
            "description": "Occurs on Fridays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "monday": {
            "description": "Occurs on Mondays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "monthlyDay": {
            "description": "Day(s) used if DayOfWeekMonth and Monthly ScheduleType",
            "type": "string"
          },
          "monthlyDayOfMonth": {
            "description": "Day of Month if DayOfMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyDayOrder": {
            "description": "Day Order used if DayOfWeekMonth and Monthly ScheduleType",
            "type": "string"
          },
          "monthlyDayOrderRecurrence": {
            "description": "Months of Recurrence if DayOfWeekMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyDayRecurrence": {
            "description": "Months of Recurrence if DayOfMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyScheduleType": {
            "description": "Selection used if Monthly ScheduleType",
            "type": "string"
          },
          "saturday": {
            "description": "Occurs on Saturdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "startingOn": {
            "description": "Day for Schedule to start",
            "type": "string",
            "format": "date-time"
          },
          "sunday": {
            "description": "Occurs on Sundays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "thursday": {
            "description": "Occurs on Thursdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "tuesday": {
            "description": "Occurs on Tuesdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "wednesday": {
            "description": "Occurs on Wednesdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "weeks": {
            "description": "Weeks of Recurrence if Weekly ScheduleType",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPolicySecurityItemsModel": {
        "description": "Secret Policy Security Item Model",
        "properties": {
          "allowOwnersUnrestrictedSshCommands": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "approvalGroups": {
            "$ref": "#/components/schemas/SecretPolicyItemOfUserGroupMapModelArray"
          },
          "approvalWorkflow": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          },
          "checkOutChangePassword": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "checkOutEnabled": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "checkOutIntervalMinutes": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          },
          "enableSshCommandRestrictions": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "eventPipelinePolicy": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          },
          "hideLauncherPassword": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "isProxyEnabled": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "isSessionRecordingEnabled": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "requireApprovalForAccess": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "requireApprovalForAccessForEditors": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "requireApprovalForAccessForOwnersAndApprovers": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "requireViewComment": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalBoolean"
          },
          "runLauncherUsingSSHKeySecretId": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalInt32"
          },
          "sshCommandBlocklistEditors": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalGuid"
          },
          "sshCommandBlocklistOwners": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalGuid"
          },
          "sshCommandBlocklistViewers": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalGuid"
          },
          "sshCommandMenuGroups": {
            "$ref": "#/components/schemas/SecretPolicyItemOfSshCommandMenuGroupMapModelArray"
          },
          "sshCommandRestrictionType": {
            "$ref": "#/components/schemas/SecretPolicyItemOfOptionalCommandRestrictionType"
          }
        },
        "type": "object"
      },
      "UserGroupMapModel": {
        "description": "User Group Map Model",
        "properties": {
          "displayName": {
            "description": "Group Name",
            "type": "string"
          },
          "groupId": {
            "description": "Group Id",
            "type": "integer",
            "format": "int32"
          },
          "userGroupMapType": {
            "$ref": "#/components/schemas/UserGroupMapType"
          }
        },
        "type": "object"
      },
      "UserGroupMapType": {
        "description": "User Group Map Type",
        "properties": {},
        "type": "string",
        "enum": [
          "User",
          "Group"
        ]
      },
      "SshCommandMenuGroupMapModel": {
        "description": "Ssh Command Menu Group Map Model",
        "properties": {
          "groupId": {
            "description": "Group Id",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandMenuId": {
            "description": "Ssh Command Menu Id",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandMenuName": {
            "description": "Ssh Command Menu Name",
            "type": "string"
          },
          "userGroupDisplayName": {
            "description": "User Or Group Display Name",
            "type": "string"
          },
          "userGroupMapType": {
            "$ref": "#/components/schemas/UserGroupMapType"
          }
        },
        "type": "object"
      },
      "SecretPolicyItemOfOptionalCommandRestrictionType": {
        "description": "Ssh Command Restriction Type depends on Enable Ssh Command Restrictions being set",
        "properties": {
          "parentPolicyItemId": {
            "description": "ParentPolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "policyItemId": {
            "description": "PolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretPolicyUpdateArgsV2": {
        "description": "SecretPolicyUpdateArgsV2",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretPolicyUpdateModelV2"
          }
        },
        "type": "object"
      },
      "SecretPolicyUpdateModelV2": {
        "description": "Secret Policy Update Model V2",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "generalItems": {
            "$ref": "#/components/schemas/SecretPolicyGeneralItemsUpdateModel"
          },
          "launcherItems": {
            "$ref": "#/components/schemas/SecretPolicyLauncherItemsUpdateModel"
          },
          "rpcItems": {
            "$ref": "#/components/schemas/SecretPolicyRpcItemsUpdateModel"
          },
          "secretPolicyDescription": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "secretPolicyName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "securityItems": {
            "$ref": "#/components/schemas/SecretPolicySecurityItemsUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretPolicyGeneralItemsUpdateModel": {
        "description": "Secret Policy General Update Item Model",
        "properties": {
          "jumpboxRouteId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalGuid"
          },
          "siteId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretPolicyDataItemOfOptionalGuid": {
        "description": "Jumpbox Route Id",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalGuid"
          }
        },
        "type": "object"
      },
      "SecretPolicyDataItemOfOptionalGuid": {
        "description": "Value",
        "properties": {
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32": {
        "description": "Site Id",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "SecretPolicyDataItemOfOptionalInt32": {
        "description": "Value",
        "properties": {
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "value": {
            "description": "Value",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPolicyLauncherItemsUpdateModel": {
        "description": "Secret Policy Launcher Item Update Model",
        "properties": {
          "launcherSettings": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfLauncherSettingsData"
          },
          "webLauncherRequiresIncognitoMode": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretPolicyDataItemOfLauncherSettingsData": {
        "description": "RDP Launcher Settings as defined by the Secret Policy",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfLauncherSettingsData"
          }
        },
        "type": "object"
      },
      "SecretPolicyDataItemOfLauncherSettingsData": {
        "description": "Value",
        "properties": {
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "value": {
            "$ref": "#/components/schemas/LauncherSettingsData"
          }
        },
        "type": "object"
      },
      "LauncherSettingsData": {
        "description": "Value",
        "properties": {
          "allowClipboard": {
            "description": "AllowClipboard",
            "type": "boolean"
          },
          "allowDrives": {
            "description": "AllowDrives",
            "type": "boolean"
          },
          "allowPrinters": {
            "description": "AllowPrinters",
            "type": "boolean"
          },
          "allowSmartCards": {
            "description": "AllowSmartCards",
            "type": "boolean"
          },
          "connectToConsole": {
            "description": "ConnectToConsole",
            "type": "boolean"
          },
          "launcherHeight": {
            "description": "LauncherHeight",
            "type": "integer",
            "format": "int32"
          },
          "launcherWidth": {
            "description": "LauncherWidth",
            "type": "integer",
            "format": "int32"
          },
          "useCustomLauncherResolution": {
            "description": "UseCustomLauncherResolution",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean": {
        "description": "Web Launcher Requires Incognito Mode",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          }
        },
        "type": "object"
      },
      "SecretPolicyDataItemOfOptionalBoolean": {
        "description": "Value",
        "properties": {
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "value": {
            "description": "Value",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretPolicyRpcItemsUpdateModel": {
        "description": "Secret Policy RPC Items Update Model",
        "properties": {
          "associatedSecretId1": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          },
          "associatedSecretId2": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          },
          "autoChangeOnExpiration": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "autoChangeSchedule": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfAutoChangeScheduleDataModel"
          },
          "heartBeatEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "passwordTypeWebScriptId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          },
          "privilegedSecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretPolicyDataItemOfAutoChangeScheduleDataModel": {
        "description": "Auto Change Schedule depends on Auto Change On Expiration being set",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfAutoChangeScheduleDataModel"
          }
        },
        "type": "object"
      },
      "SecretPolicyDataItemOfAutoChangeScheduleDataModel": {
        "description": "Value",
        "properties": {
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "value": {
            "$ref": "#/components/schemas/AutoChangeScheduleDataModel"
          }
        },
        "type": "object"
      },
      "AutoChangeScheduleDataModel": {
        "description": "Auto Change Schedule Data Model",
        "properties": {
          "changeOnlyWhenExpired": {
            "description": "The password will only be changed when the Secret has expired",
            "type": "boolean"
          },
          "changeType": {
            "description": "Schedule Change Type",
            "type": "string"
          },
          "days": {
            "description": "Days of Recurrence if Daily ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "friday": {
            "description": "Occurs on Fridays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "monday": {
            "description": "Occurs on Mondays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "monthlyDay": {
            "description": "Day(s) used if DayOfWeekMonth and Monthly ScheduleType",
            "type": "string"
          },
          "monthlyDayOfMonth": {
            "description": "Day of Month if DayOfMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyDayOrder": {
            "description": "Day Order used if DayOfWeekMonth and Monthly ScheduleType",
            "type": "string"
          },
          "monthlyDayOrderRecurrence": {
            "description": "Months of Recurrence if DayOfWeekMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyDayRecurrence": {
            "description": "Months of Recurrence if DayOfMonth and Monthly ScheduleType",
            "type": "integer",
            "format": "int32"
          },
          "monthlyScheduleType": {
            "description": "Selection used if Monthly ScheduleType",
            "type": "string"
          },
          "saturday": {
            "description": "Occurs on Saturdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "startingOn": {
            "description": "Day for Schedule to start",
            "type": "string",
            "format": "date-time"
          },
          "sunday": {
            "description": "Occurs on Sundays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "thursday": {
            "description": "Occurs on Thursdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "tuesday": {
            "description": "Occurs on Tuesdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "wednesday": {
            "description": "Occurs on Wednesdays when set if Weekly ScheduleType",
            "type": "boolean"
          },
          "weeks": {
            "description": "Weeks of Recurrence if Weekly ScheduleType",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPolicySecurityItemsUpdateModel": {
        "description": "Secret Policy Security Item Update Model",
        "properties": {
          "allowOwnersUnrestrictedSshCommands": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "approvalGroups": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfUserGroupMapDataModelArray"
          },
          "approvalWorkflow": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          },
          "checkOutChangePassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "checkOutEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "checkOutIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          },
          "enableSshCommandRestrictions": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "eventPipelinePolicy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          },
          "hideLauncherPassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "isProxyEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "isSessionRecordingEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "requireApprovalForAccess": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "requireApprovalForAccessForEditors": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "requireApprovalForAccessForOwnersAndApprovers": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "requireViewComment": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalBoolean"
          },
          "runLauncherUsingSSHKeySecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalInt32"
          },
          "sshCommandBlocklistEditors": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalGuid"
          },
          "sshCommandBlocklistOwners": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalGuid"
          },
          "sshCommandBlocklistViewers": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalGuid"
          },
          "sshCommandMenuGroups": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfSshCommandMenuGroupModelArray"
          },
          "sshCommandRestrictionType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfOptionalCommandRestrictionType"
          }
        },
        "type": "object"
      },
      "UserGroupMapDataModel": {
        "description": "User Group Map Data Model",
        "properties": {
          "groupId": {
            "description": "User/Group Id",
            "type": "integer",
            "format": "int32"
          },
          "userGroupMapType": {
            "$ref": "#/components/schemas/UserGroupMapType"
          }
        },
        "type": "object"
      },
      "SshCommandMenuGroupModel": {
        "description": "Ssh Command Menu Group Model",
        "properties": {
          "groupId": {
            "description": "Group Id",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandMenuId": {
            "description": "Ssh Command Menu Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretPolicyDataItemOfOptionalCommandRestrictionType": {
        "description": "Ssh Command Restriction Type depends on Enable Ssh Command Restrictions being set",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalCommandRestrictionType"
          }
        },
        "type": "object"
      },
      "SecretPolicyDataItemOfOptionalCommandRestrictionType": {
        "description": "Value",
        "properties": {
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IPagingOfSecretPolicyAuditSummary": {
        "description": "IPagingOfSecretPolicyAuditSummary",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/SecretPolicyAuditSummary"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretPolicyAuditSummary": {
        "description": "Records",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "databaseName": {
            "description": "DatabaseName",
            "type": "string"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "machineName": {
            "description": "MachineName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "secretPolicyAuditId": {
            "description": "SecretPolicyAuditId",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "description": "Username",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretPolicyStatusModel": {
        "description": "Secret Policy Status Model",
        "properties": {
          "inProgressSecretCount": {
            "description": "Number of secrets that are queued to change to the queried policy.",
            "type": "number",
            "format": "double"
          },
          "secretCount": {
            "description": "Number of secrets the policy is applied to.",
            "type": "number",
            "format": "double"
          },
          "secretPercentComplete": {
            "description": "Completion percentage for the applied secrets. Value is between 0 and 1",
            "type": "number",
            "format": "double"
          },
          "secretPolicyId": {
            "description": "Id of the Secret Policy",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretPolicyCreateArgsV2": {
        "description": "SecretPolicyCreateArgsV2",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretPolicyCreateModelV2"
          }
        },
        "type": "object"
      },
      "SecretPolicyCreateModelV2": {
        "description": "Secret Policy Create Model V2",
        "properties": {
          "active": {
            "description": "Indicates the policy is active",
            "type": "boolean"
          },
          "generalItems": {
            "$ref": "#/components/schemas/SecretPolicyGeneralItemsCreateModel"
          },
          "launcherItems": {
            "$ref": "#/components/schemas/SecretPolicyLauncherItemsCreateModel"
          },
          "rpcItems": {
            "$ref": "#/components/schemas/SecretPolicyRpcItemsCreateModel"
          },
          "secretPolicyDescription": {
            "description": "Secret Policy Description",
            "type": "string"
          },
          "secretPolicyName": {
            "description": "Secret Policy Name",
            "type": "string"
          },
          "securityItems": {
            "$ref": "#/components/schemas/SecretPolicySecurityItemsCreateModel"
          }
        },
        "type": "object"
      },
      "SecretPolicyGeneralItemsCreateModel": {
        "description": "Secret Policy General Create Item Model",
        "properties": {
          "jumpboxRouteId": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalGuid"
          },
          "siteId": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "SecretPolicyLauncherItemsCreateModel": {
        "description": "Secret Policy Launcher Item Create Model",
        "properties": {
          "launcherSettings": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretPolicyDataItemOfLauncherSettingsData"
          },
          "webLauncherRequiresIncognitoMode": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          }
        },
        "type": "object"
      },
      "SecretPolicyRpcItemsCreateModel": {
        "description": "Secret Policy RPC Items Create Model",
        "properties": {
          "associatedSecretId1": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          },
          "associatedSecretId2": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          },
          "autoChangeOnExpiration": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "autoChangeSchedule": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfAutoChangeScheduleDataModel"
          },
          "heartBeatEnabled": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "passwordTypeWebScriptId": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          },
          "privilegedSecretId": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "SecretPolicySecurityItemsCreateModel": {
        "description": "Secret Policy Security Item Create Model",
        "properties": {
          "allowOwnersUnrestrictedSshCommands": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "approvalGroups": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfUserGroupMapDataModelArray"
          },
          "approvalWorkflow": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          },
          "checkOutChangePassword": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "checkOutEnabled": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "checkOutIntervalMinutes": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          },
          "enableSshCommandRestrictions": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "eventPipelinePolicy": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          },
          "hideLauncherPassword": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "isProxyEnabled": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "isSessionRecordingEnabled": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "requireApprovalForAccess": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "requireApprovalForAccessForEditors": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "requireApprovalForAccessForOwnersAndApprovers": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "requireViewComment": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalBoolean"
          },
          "runLauncherUsingSSHKeySecretId": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalInt32"
          },
          "sshCommandBlocklistEditors": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalGuid"
          },
          "sshCommandBlocklistOwners": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalGuid"
          },
          "sshCommandBlocklistViewers": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalGuid"
          },
          "sshCommandMenuGroups": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfSshCommandMenuGroupModelArray"
          },
          "sshCommandRestrictionType": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfOptionalCommandRestrictionType"
          }
        },
        "type": "object"
      },
      "SecretUpdateArgs": {
        "description": "Secret update options",
        "required": [
          "id",
          "name",
          "items"
        ],
        "properties": {
          "accessRequestWorkflowMapId": {
            "description": "The id of the mapping entity that associates this secret to a specific access request workflow.",
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "description": "Whether the secret is in an active or deleted state.",
            "type": "boolean"
          },
          "autoChangeEnabled": {
            "description": "Whether the secret’s password is automatically rotated on a schedule.",
            "type": "boolean"
          },
          "autoChangeNextPassword": {
            "description": "Whether the secret should be flagged for immediate password change.",
            "type": "string"
          },
          "checkOutChangePasswordEnabled": {
            "description": "Whether the secret’s password is automatically changed when a secret is checked in. This is a security feature that prevents a use of the password retrieved from check-out after the secret is checked in.",
            "type": "boolean"
          },
          "checkOutEnabled": {
            "description": "Whether the user must check-out the secret to view it. Checking out gives the user exclusive access to the secret for a specified period or until the secret is checked in.",
            "type": "boolean"
          },
          "checkOutIntervalMinutes": {
            "description": "The number of minutes that a secret will remain checked out.",
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "description": "If the secret requires a comment to view or requires approval to view, a reason for accessing the secret must be provided.",
            "type": "string"
          },
          "doubleLockPassword": {
            "description": "If the secret is DoubleLocked, this is the DoubleLock password needed to access the secret.",
            "type": "string"
          },
          "enableInheritPermissions": {
            "description": "Whether the secret inherits permissions from the containing folder.",
            "type": "boolean"
          },
          "enableInheritSecretPolicy": {
            "description": "Whether the secret policy is inherited from the containing folder.",
            "type": "boolean"
          },
          "folderId": {
            "description": "If the secret is contained in a folder, the id of the containing folder. Set to null or -1 for secrets that are in the root folder.",
            "type": "integer",
            "format": "int32"
          },
          "forceCheckIn": {
            "description": "Force the secret to be checked in, even if checked out by someone else. The user must have the \"Force Check In\" permission.",
            "type": "boolean"
          },
          "id": {
            "description": "The id of the Secret to update. Must match the {id} in the path.",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "includeInactive": {
            "description": "If the secret is deactivated, this must be set to true in order to access the secret. The user must also have the \"View Deleted Secrets\" permission.",
            "type": "boolean"
          },
          "items": {
            "description": "A list of secret item field values.",
            "items": {
              "$ref": "#/components/schemas/RestSecretItem"
            },
            "type": "array"
          },
          "launcherConnectAsSecretId": {
            "description": "When an SSH secret is proxied, you can choose to connect as another user and then do an su to the current secret’s user. This is a common practice for connecting with a lower privileged account and then switching to the root user.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name to display for the secret.",
            "type": "string"
          },
          "newPassword": {
            "description": "New secret password.",
            "type": "string"
          },
          "noAutoCheckout": {
            "description": "Don't check out the secret automatically.",
            "type": "boolean"
          },
          "passwordTypeWebScriptId": {
            "description": "The id of the password change script to use on applicable web password secrets.",
            "type": "integer",
            "format": "int32"
          },
          "proxyEnabled": {
            "description": "Whether sessions launched on this secret use Secret Server’s proxying or connect directly.",
            "type": "boolean"
          },
          "requiresComment": {
            "description": "Whether the user must enter a comment to view the secret.",
            "type": "boolean"
          },
          "secretPolicyId": {
            "description": "The id of the secret policy that controls the security and other settings of the secret. Set to null to not assign a secret policy.",
            "type": "integer",
            "format": "int32"
          },
          "sessionRecordingEnabled": {
            "description": "Whether session recording is enabled.",
            "type": "boolean"
          },
          "siteId": {
            "description": "The id of the distributed engine site that is used by this secret for operations such as password changing.",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "sshKeyArgs": {
            "$ref": "#/components/schemas/SshKeyArgs"
          },
          "ticketNumber": {
            "description": "If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the ticket number to the help desk request.",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the id of the help desk system configured in Secret Server that should be used to validate the ticket number.",
            "type": "integer",
            "format": "int32"
          },
          "webLauncherRequiresIncognitoMode": {
            "description": "Whether the web launcher will require the browser to run in incognito mode.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RestSecretItem": {
        "description": "Secret data field item",
        "properties": {
          "fieldDescription": {
            "description": "Longer description of the secret field.",
            "type": "string"
          },
          "fieldId": {
            "description": "The id of the field definition from the secret template.",
            "type": "integer",
            "format": "int32"
          },
          "fieldName": {
            "description": "The display name of the secret field.",
            "type": "string"
          },
          "fileAttachmentId": {
            "description": "If the field is a file attachment field, the id of the file attachment.",
            "type": "integer",
            "format": "int32"
          },
          "filename": {
            "description": "If the field is a file attachment field, the name of the attached file.",
            "type": "string"
          },
          "isFile": {
            "description": "Whether the field is a file attachment.",
            "type": "boolean"
          },
          "isList": {
            "description": "Whether or not the secret field is a list.",
            "type": "boolean"
          },
          "isNotes": {
            "description": "Whether the field is represented as a multi-line text box. Used for long-form text fields.",
            "type": "boolean"
          },
          "isPassword": {
            "description": "Whether the field is a password. Password fields are hidden by default in the UI and their value is not returned in GET calls that return secrets. To retrieve a password field value, make a GET call to /api/secrets/{secretId}/fields/{slug}.",
            "type": "boolean"
          },
          "itemId": {
            "description": "The id of the secret field item. Leave empty when creating a new secret.",
            "type": "integer",
            "format": "int32"
          },
          "itemValue": {
            "description": "The value of the secret field item. For list fields, this is a comma-delimited list of the list id guids that are assigned to this field.",
            "type": "string"
          },
          "listType": {
            "$ref": "#/components/schemas/SecretFieldListType"
          },
          "slug": {
            "description": "A unique name for the secret field on the template. Slugs cannot contain spaces and are used in many places to easily refer to a secret field without having to know the field id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretFieldListType": {
        "description": "The type of list. Valid values are “None”, “Generic”, and “URL”.",
        "properties": {},
        "type": "string",
        "enum": [
          "Generic",
          "URL",
          "None"
        ]
      },
      "SshKeyArgs": {
        "description": "SSH key options",
        "properties": {
          "generatePassphrase": {
            "description": "Whether to generate an SSH private key passphrase.  Only applicable when the Secret template has a password changer with the Private Key Passphrase field mapped.  If it is not mapped, this setting is ignored.",
            "type": "boolean"
          },
          "generateSshKeys": {
            "description": "Whether to generate an SSH private key",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretModel": {
        "description": "Secret",
        "properties": {
          "accessRequestWorkflowMapId": {
            "description": "AccessRequestWorkflowMapId",
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "description": "Whether the secret is active",
            "type": "boolean"
          },
          "allowOwnersUnrestrictedSshCommands": {
            "description": "AllowOwnersUnrestrictedSshCommands",
            "type": "boolean"
          },
          "autoChangeEnabled": {
            "description": "AutoChangeEnabled",
            "type": "boolean"
          },
          "autoChangeNextPassword": {
            "description": "AutoChangeNextPassword",
            "type": "string"
          },
          "checkedOut": {
            "description": "Whether the secret is currently checked out",
            "type": "boolean"
          },
          "checkOutChangePasswordEnabled": {
            "description": "CheckOutChangePasswordEnabled",
            "type": "boolean"
          },
          "checkOutEnabled": {
            "description": "Whether secret checkout is enabled",
            "type": "boolean"
          },
          "checkOutIntervalMinutes": {
            "description": "Checkout interval, in minutes",
            "type": "integer",
            "format": "int32"
          },
          "checkOutMinutesRemaining": {
            "description": "Minutes remaining in current checkout interval",
            "type": "integer",
            "format": "int32"
          },
          "checkOutUserDisplayName": {
            "description": "Name of user who has checked out the secret",
            "type": "string"
          },
          "checkOutUserId": {
            "description": "ID of user who has checked out the secret",
            "type": "integer",
            "format": "int32"
          },
          "doubleLockId": {
            "description": "DoubleLockId",
            "type": "integer",
            "format": "int32"
          },
          "enableInheritPermissions": {
            "description": "EnableInheritPermissions",
            "type": "boolean"
          },
          "enableInheritSecretPolicy": {
            "description": "Whether the secret policy is inherited from the containing folder",
            "type": "boolean"
          },
          "failedPasswordChangeAttempts": {
            "description": "Number of failed password change attempts",
            "type": "integer",
            "format": "int32"
          },
          "folderId": {
            "description": "Containing folder ID",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "isDoubleLock": {
            "description": "Whether double lock is enabled",
            "type": "boolean"
          },
          "isOutOfSync": {
            "description": "Out of sync indicates that a Password is setup for autochange and has failed its last password change attempt or has exceeded the maximum RPC attempts",
            "type": "boolean"
          },
          "isRestricted": {
            "description": "Whether the secret is restricted",
            "type": "boolean"
          },
          "items": {
            "description": "Secret data fields",
            "items": {
              "$ref": "#/components/schemas/RestSecretItem"
            },
            "type": "array"
          },
          "jumpboxRouteId": {
            "description": "JumpboxRouteId",
            "type": "string",
            "format": "uuid"
          },
          "lastHeartBeatCheck": {
            "description": "Time of last heartbeat check",
            "type": "string",
            "format": "date-time"
          },
          "lastHeartBeatStatus": {
            "$ref": "#/components/schemas/HeartbeatStatus"
          },
          "lastPasswordChangeAttempt": {
            "description": "Time of most recent password change attempt",
            "type": "string",
            "format": "date-time"
          },
          "launcherConnectAsSecretId": {
            "description": "LauncherConnectAsSecretId",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Secret name",
            "type": "string"
          },
          "outOfSyncReason": {
            "description": "Reason message if the secret is out of sync",
            "type": "string"
          },
          "passwordTypeWebScriptId": {
            "description": "PasswordTypeWebScriptId",
            "type": "integer",
            "format": "int32"
          },
          "proxyEnabled": {
            "description": "ProxyEnabled",
            "type": "boolean"
          },
          "requiresApprovalForAccess": {
            "description": "RequiresApprovalForAccess",
            "type": "boolean"
          },
          "requiresComment": {
            "description": "RequiresComment",
            "type": "boolean"
          },
          "responseCodes": {
            "description": "ResponseCodes",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "restrictSshCommands": {
            "description": "RestrictSshCommands",
            "type": "boolean"
          },
          "secretPolicyId": {
            "description": "SecretPolicyId",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplateId": {
            "description": "Secret template ID",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplateName": {
            "description": "Name of secret template",
            "type": "string"
          },
          "sessionRecordingEnabled": {
            "description": "Whether session recording is enabled",
            "type": "boolean"
          },
          "siteId": {
            "description": "SiteId",
            "type": "integer",
            "format": "int32"
          },
          "webLauncherRequiresIncognitoMode": {
            "description": "WebLauncherRequiresIncognitoMode",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HeartbeatStatus": {
        "description": "Current status of heartbeat",
        "properties": {},
        "type": "string",
        "enum": [
          "Failed",
          "Success",
          "Pending",
          "Disabled",
          "UnableToConnect",
          "UnknownError",
          "IncompatibleHost",
          "AccountLockedOut",
          "DnsMismatch",
          "UnableToValidateServerPublicKey",
          "Processing",
          "ArgumentError",
          "AccessDenied"
        ]
      },
      "SecretListFieldListArgs": {
        "description": "Secret List Field List Args",
        "properties": {
          "listGuids": {
            "description": "Array of List GUIDs",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PagingOfSecretSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretSummary": {
        "description": "Secret summary",
        "properties": {
          "active": {
            "description": "Whether the secret is active",
            "type": "boolean"
          },
          "autoChangeEnabled": {
            "description": "Indicates whether or not this Secret an auto changing password",
            "type": "boolean"
          },
          "checkedOut": {
            "description": "Whether the secret is currently checked out",
            "type": "boolean"
          },
          "checkOutEnabled": {
            "description": "Indicates whether or not checkout is enabled for the Secret",
            "type": "boolean"
          },
          "createDate": {
            "description": "When the Secret was created",
            "type": "string",
            "format": "date-time"
          },
          "daysUntilExpiration": {
            "description": "How many days until this Secret expires",
            "type": "integer",
            "format": "int32"
          },
          "doubleLockEnabled": {
            "description": "Indicates whether or not DoubleLock is enabled for this password",
            "type": "boolean"
          },
          "extendedFields": {
            "description": "Any requested extended fields from a lookup request",
            "items": {
              "$ref": "#/components/schemas/ISecretSummaryExtendedField"
            },
            "type": "array"
          },
          "folderId": {
            "description": "Containing folder ID",
            "type": "integer",
            "format": "int32"
          },
          "hasLauncher": {
            "description": "Indicates if this Secret has any launchers",
            "type": "boolean"
          },
          "hidePassword": {
            "description": "Indicates if the launcher password is set to be hidden",
            "type": "boolean"
          },
          "id": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "inheritsPermissions": {
            "description": "Indicates if this Secret inherits permissions from its folder",
            "type": "boolean"
          },
          "isOutOfSync": {
            "description": "Out of sync indicates that a Password is setup for autochange and has failed its last password change attempt or has exceeded the maximum RPC attempts",
            "type": "boolean"
          },
          "isRestricted": {
            "description": "Whether the secret is restricted",
            "type": "boolean"
          },
          "lastAccessed": {
            "description": "When the Secret was last viewed, only populated when scope is Recent",
            "type": "string",
            "format": "date-time"
          },
          "lastHeartBeatStatus": {
            "$ref": "#/components/schemas/HeartbeatStatus"
          },
          "lastPasswordChangeAttempt": {
            "description": "Time of most recent password change attempt",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Secret name",
            "type": "string"
          },
          "outOfSyncReason": {
            "description": "Reason message if the secret is out of sync",
            "type": "string"
          },
          "requiresApproval": {
            "description": "Indicates if this Secret requires approval",
            "type": "boolean"
          },
          "requiresComment": {
            "description": "Indicates if this Secret requires comment",
            "type": "boolean"
          },
          "responseCodes": {
            "description": "ResponseCodes",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "secretTemplateId": {
            "description": "Secret template ID",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplateName": {
            "description": "Name of secret template",
            "type": "string"
          },
          "siteId": {
            "description": "SiteId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ISecretSummaryExtendedField": {
        "description": "Any requested extended fields from a lookup request",
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSecretLookup": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretLookup"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretLookup": {
        "description": "Simple secret representation",
        "properties": {
          "id": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Secret name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretModelV2": {
        "description": "Secret V2",
        "properties": {
          "accessRequestWorkflowMapId": {
            "description": "Access Request Workflow Map Id",
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "description": "Whether the secret is active",
            "type": "boolean"
          },
          "allowOwnersUnrestrictedSshCommands": {
            "description": "Allow Owners Unrestricted SSH Commands",
            "type": "boolean"
          },
          "autoChangeEnabled": {
            "description": "Auto Change Enabled",
            "type": "boolean"
          },
          "autoChangeNextPassword": {
            "description": "Auto Change Next Password",
            "type": "string"
          },
          "checkedOut": {
            "description": "Whether the secret is currently checked out",
            "type": "boolean"
          },
          "checkOutChangePasswordEnabled": {
            "description": "Check Out Change Password Enabled",
            "type": "boolean"
          },
          "checkOutEnabled": {
            "description": "Whether secret checkout is enabled",
            "type": "boolean"
          },
          "checkOutIntervalMinutes": {
            "description": "Checkout interval, in minutes",
            "type": "integer",
            "format": "int32"
          },
          "checkOutMinutesRemaining": {
            "description": "Minutes remaining in current checkout interval",
            "type": "integer",
            "format": "int32"
          },
          "checkOutUserDisplayName": {
            "description": "Name of user who has checked out the secret",
            "type": "string"
          },
          "checkOutUserId": {
            "description": "ID of user who has checked out the secret",
            "type": "integer",
            "format": "int32"
          },
          "doubleLockId": {
            "description": "DoubleLock Id",
            "type": "integer",
            "format": "int32"
          },
          "enableInheritPermissions": {
            "description": "Enable Inherit Permissions",
            "type": "boolean"
          },
          "enableInheritSecretPolicy": {
            "description": "Whether the secret policy is inherited from the containing folder",
            "type": "boolean"
          },
          "failedPasswordChangeAttempts": {
            "description": "Number of failed password change attempts",
            "type": "integer",
            "format": "int32"
          },
          "folderId": {
            "description": "Containing folder ID",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "isDoubleLock": {
            "description": "Whether double lock is enabled",
            "type": "boolean"
          },
          "isOutOfSync": {
            "description": "Out of sync indicates that a Password is setup for autochange and has failed its last password change attempt or has exceeded the maximum RPC attempts",
            "type": "boolean"
          },
          "isRestricted": {
            "description": "Whether the secret is restricted",
            "type": "boolean"
          },
          "items": {
            "description": "Secret data fields",
            "items": {
              "$ref": "#/components/schemas/RestSecretItem"
            },
            "type": "array"
          },
          "jumpboxRouteId": {
            "description": "Jumpbox Route Id",
            "type": "string",
            "format": "uuid"
          },
          "lastHeartBeatCheck": {
            "description": "Time of last heartbeat check",
            "type": "string",
            "format": "date-time"
          },
          "lastHeartBeatStatus": {
            "$ref": "#/components/schemas/HeartbeatStatus"
          },
          "lastPasswordChangeAttempt": {
            "description": "Time of most recent password change attempt",
            "type": "string",
            "format": "date-time"
          },
          "launcherConnectAsSecretId": {
            "description": "LauncherConnectAsSecretId",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Secret name",
            "type": "string"
          },
          "outOfSyncReason": {
            "description": "Reason message if the secret is out of sync",
            "type": "string"
          },
          "passwordTypeWebScriptId": {
            "description": "Password Type Web Script Id",
            "type": "integer",
            "format": "int32"
          },
          "proxyEnabled": {
            "description": "Proxy Enabled",
            "type": "boolean"
          },
          "requiresApprovalForAccess": {
            "description": "Requires Approval For Access",
            "type": "boolean"
          },
          "requiresComment": {
            "description": "Requires Comment",
            "type": "boolean"
          },
          "responseCodes": {
            "description": "Response Codes",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "restrictSshCommands": {
            "description": "Restrict SSH Commands",
            "type": "boolean"
          },
          "secretPolicyId": {
            "description": "Secret Policy Id",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplateId": {
            "description": "Secret template ID",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplateName": {
            "description": "Name of secret template",
            "type": "string"
          },
          "sessionRecordingEnabled": {
            "description": "Whether session recording is enabled",
            "type": "boolean"
          },
          "siteId": {
            "description": "Site Id",
            "type": "integer",
            "format": "int32"
          },
          "webLauncherRequiresIncognitoMode": {
            "description": "Web Launcher Requires Incognito Mode",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DashboardViewSecret": {
        "description": "DashboardViewSecret",
        "properties": {
          "errorMessage": {
            "description": "errorMessage",
            "type": "string"
          },
          "favorite": {
            "description": "favorite",
            "type": "boolean"
          },
          "hasLauncher": {
            "description": "hasLauncher",
            "type": "boolean"
          },
          "id": {
            "description": "id",
            "type": "integer",
            "format": "int32"
          },
          "isTotpEnabled": {
            "description": "isTotpEnabled",
            "type": "boolean"
          },
          "items": {
            "description": "items",
            "items": {
              "$ref": "#/components/schemas/DashboardViewSecretItem"
            },
            "type": "array"
          },
          "launchers": {
            "description": "launchers",
            "items": {
              "$ref": "#/components/schemas/DashboardViewLauncherInfo"
            },
            "type": "array"
          },
          "secretName": {
            "description": "secretName",
            "type": "string"
          },
          "showViewButton": {
            "description": "showViewButton",
            "type": "boolean"
          },
          "userCanEdit": {
            "description": "userCanEdit",
            "type": "boolean"
          },
          "userCanShare": {
            "description": "userCanShare",
            "type": "boolean"
          },
          "userCanViewAudit": {
            "description": "userCanViewAudit",
            "type": "boolean"
          },
          "usesClickOnce": {
            "description": "usesClickOnce",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DashboardViewSecretItem": {
        "description": "items",
        "properties": {
          "fileAttachmentId": {
            "description": "fileAttachmentId",
            "type": "integer",
            "format": "int32"
          },
          "fileName": {
            "description": "fileName",
            "type": "string"
          },
          "isAllowedToViewPassword": {
            "description": "isAllowedToViewPassword",
            "type": "boolean"
          },
          "isFile": {
            "description": "isFile",
            "type": "boolean"
          },
          "isNotes": {
            "description": "isNotes",
            "type": "boolean"
          },
          "isPassword": {
            "description": "isPassword",
            "type": "boolean"
          },
          "isUrl": {
            "description": "isUrl",
            "type": "boolean"
          },
          "label": {
            "description": "label",
            "type": "string"
          },
          "neverShowPassword": {
            "description": "neverShowPassword",
            "type": "boolean"
          },
          "passwordIsMaskedByDefault": {
            "description": "passwordIsMaskedByDefault",
            "type": "boolean"
          },
          "secretFieldId": {
            "description": "secretFieldId",
            "type": "integer",
            "format": "int32"
          },
          "secretItemId": {
            "description": "secretItemId",
            "type": "integer",
            "format": "int32"
          },
          "slug": {
            "description": "slug",
            "type": "string"
          },
          "value": {
            "description": "value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardViewLauncherInfo": {
        "description": "launchers",
        "properties": {
          "defaultSiteId": {
            "description": "defaultSiteId",
            "type": "integer",
            "format": "int32"
          },
          "hasProxyCredentials": {
            "description": "hasProxyCredentials",
            "type": "boolean"
          },
          "launcherClientClick": {
            "description": "launcherClientClick",
            "type": "string"
          },
          "launcherDisplayName": {
            "description": "launcherDisplayName",
            "type": "string"
          },
          "launcherImage": {
            "description": "launcherImage",
            "type": "string"
          },
          "launcherPromptName": {
            "description": "launcherPromptName",
            "type": "string"
          },
          "launcherTooltip": {
            "description": "launcherTooltip",
            "type": "string"
          },
          "launcherTypeId": {
            "description": "launcherTypeId",
            "type": "integer",
            "format": "int32"
          },
          "restrictedHosts": {
            "description": "restrictedHosts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "restrictHost": {
            "description": "restrictHost",
            "type": "boolean"
          },
          "restrictHostType": {
            "description": "restrictHostType",
            "type": "integer",
            "format": "int32"
          },
          "sitePrompt": {
            "description": "sitePrompt",
            "type": "string"
          },
          "siteSelection": {
            "description": "siteSelection",
            "items": {
              "$ref": "#/components/schemas/SiteModel"
            },
            "type": "array"
          },
          "useProtocolHandler": {
            "description": "useProtocolHandler",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SiteModel": {
        "description": "Site Model",
        "properties": {
          "active": {
            "description": "Active flag",
            "type": "boolean"
          },
          "siteId": {
            "description": "Site Id",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "Site Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretItemUpdateArgs": {
        "description": "Secret field update options",
        "properties": {
          "comment": {
            "description": "If the secret requires a comment to view or requires approval to view, a reason for accessing the secret must be provided.",
            "type": "string"
          },
          "doubleLockPassword": {
            "description": "If the secret is DoubleLocked, this is the DoubleLock password needed to access the secret.",
            "type": "string"
          },
          "file": {
            "description": "Uploaded file (used for file attachment fields with \"Content-Type: multipart/form-data\")",
            "type": "file"
          },
          "fileAttachment": {
            "description": "Binary file data (used for file attachment fields with \"Content-Type: application/json\")",
            "type": "string",
            "format": "binary"
          },
          "fileName": {
            "description": "File name (used for file attachment fields with \"Content-Type: application/json\"))",
            "type": "string"
          },
          "forceCheckIn": {
            "description": "Force the secret to be checked in, even if checked out by someone else. The user must have the \"Force Check In\" permission.",
            "type": "boolean"
          },
          "includeInactive": {
            "description": "If the secret is deactivated, this must be set to true in order to access the secret. The user must also have the \"View Deleted Secrets\" permission.",
            "type": "boolean"
          },
          "newPassword": {
            "description": "New secret password.",
            "type": "string"
          },
          "noAutoCheckout": {
            "description": "Don't check out the secret automatically.",
            "type": "boolean"
          },
          "ticketNumber": {
            "description": "If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the ticket number to the help desk request.",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the id of the help desk system configured in Secret Server that should be used to validate the ticket number.",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "New value to assign to the secret field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CategorizedListItemValueResult": {
        "description": "CategorizedListItemValueResult",
        "properties": {
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/ICategorizedListItemValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WidgetSecretModel": {
        "description": "WidgetSecretModel[]",
        "properties": {
          "folderId": {
            "description": "FolderId",
            "type": "integer",
            "format": "int32"
          },
          "folderPath": {
            "description": "FolderPath",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "SecretName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSecretAuditModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretAuditModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretAuditModel": {
        "description": "Secret Audit Model",
        "properties": {
          "action": {
            "description": "Action of Audit",
            "type": "string"
          },
          "actionForDisplay": {
            "description": "Action For Display",
            "type": "string"
          },
          "byUserDisplayName": {
            "description": "User that performed action",
            "type": "string"
          },
          "databaseName": {
            "description": "Database Name",
            "type": "string"
          },
          "dateRecorded": {
            "description": "Date Audit was Recorded",
            "type": "string",
            "format": "date-time"
          },
          "hasProxySessionData": {
            "description": "Has Proxy Session Data",
            "type": "boolean"
          },
          "id": {
            "description": "Id of Audit",
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "description": "Notes of Audit",
            "type": "string"
          },
          "recordingMessage": {
            "description": "Recording Message",
            "type": "string"
          },
          "recordingSessionId": {
            "description": "Recording Session Id",
            "type": "string"
          },
          "recordingStatus": {
            "description": "Status of Recording",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "Status",
            "type": "string"
          },
          "ticketNumber": {
            "description": "Ticket Number of Audit",
            "type": "string"
          },
          "username": {
            "description": "Username",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailStateViewModel": {
        "description": "Secret Detail State View Model",
        "properties": {
          "actions": {
            "description": "Allowed action for current user",
            "items": {
              "$ref": "#/components/schemas/SecretDetailActionType"
            },
            "type": "array"
          },
          "approvalEnd": {
            "description": "Date when the current approval expires, or null if there is no open approval",
            "type": "string",
            "format": "date-time"
          },
          "availableActions": {
            "$ref": "#/components/schemas/SecretDetailStateActionsModel"
          },
          "checkedOutUserDisplayName": {
            "description": "Display Name of User that has the secret checked out",
            "type": "string"
          },
          "checkedOutUserId": {
            "description": "User Secret is checked out to",
            "type": "integer",
            "format": "int32"
          },
          "checkOutIntervalMinutes": {
            "description": "Number of minutes before checkout ",
            "type": "integer",
            "format": "int32"
          },
          "checkOutMinutesRemaining": {
            "description": "Minutes remaining in check out",
            "type": "integer",
            "format": "int32"
          },
          "folderId": {
            "description": "Folder Id",
            "type": "integer",
            "format": "int32"
          },
          "folderName": {
            "description": "Folder Name",
            "type": "string"
          },
          "id": {
            "description": "Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "description": "Active indicator",
            "type": "boolean"
          },
          "isCheckedOut": {
            "description": "Is the Secret checked out",
            "type": "boolean"
          },
          "isCheckedOutByCurrentUser": {
            "description": "Indicates whether the Secret is checked out by the current user",
            "type": "boolean"
          },
          "passwordChangePending": {
            "description": "Pending Password change on secret indicator",
            "type": "boolean"
          },
          "remainingTimeWarningMinuteMarker": {
            "description": "Minute mark to show check out warning",
            "type": "integer",
            "format": "int32"
          },
          "role": {
            "description": "Role that current user has on Secret",
            "type": "string"
          },
          "secretName": {
            "description": "Secret Name",
            "type": "string"
          },
          "secretState": {
            "$ref": "#/components/schemas/SecretAccessRequired"
          },
          "warningMinutesRemaining": {
            "description": "Minutes remaining before showing check in warning",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDetailActionType": {
        "description": "Secret Detail Action Type",
        "properties": {},
        "type": "string",
        "enum": [
          "ChangePasswordNow",
          "ConvertTemplate",
          "Copy",
          "Delete",
          "Edit",
          "EditExpiration",
          "EditRpc",
          "EditSecurity",
          "Expire",
          "Heartbeat",
          "EditShare",
          "ShowSshProxyCredentials",
          "StopChangePasswordNow",
          "ViewAudit",
          "ViewDependencies",
          "ViewLaunchers",
          "ViewExpiration",
          "ViewHooks",
          "ViewRpc",
          "ViewSecurity",
          "ViewSettings",
          "Undelete",
          "ForceCheckin",
          "ViewShare",
          "EditHooks",
          "EditDependencies",
          "ViewGeneralDetails",
          "ViewHeartbeatStatus",
          "Checkin",
          "Checkout",
          "GenerateOneTimePassword",
          "ShowSshTerminalDetails",
          "ShowRdpProxyCredentials",
          "ViewMetadata",
          "ViewSecretExposure",
          "ViewCheckOut",
          "ViewApproval",
          "ViewListFields",
          "Erase"
        ]
      },
      "SecretDetailStateActionsModel": {
        "description": "Available Secret Detail State Actions",
        "properties": {
          "extendCheckOut": {
            "description": "The user may extend the remaining check out time of the secret.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretAccessRequired": {
        "description": "Secret Access Required",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "RequiresApproval",
          "RequiresCheckout",
          "RequiresComment",
          "RequiresDoubleLockPassword",
          "CreateDoubleLockPassword",
          "DoubleLockNoAccess",
          "CannotView",
          "RequiresUndelete",
          "RequiresCheckoutPendingRPC",
          "RequiresCheckoutAndComment"
        ]
      },
      "SecretDetailGeneralModel": {
        "description": "Secret Detail General",
        "properties": {
          "active": {
            "description": "Whether the secret is active",
            "type": "boolean"
          },
          "autoChangePassword": {
            "description": "Whether the password should automatically change upon expiration.",
            "type": "boolean"
          },
          "canGenerateSshKey": {
            "description": "Can Generate SSH Key",
            "type": "boolean"
          },
          "enableInheritSecretPolicy": {
            "description": "Whether the secret policy is inherited from the containing folder",
            "type": "boolean"
          },
          "expiration": {
            "description": "Expiration",
            "type": "string"
          },
          "fields": {
            "description": "Secret Fields",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "folder": {
            "description": "Containing folder ID",
            "type": "integer",
            "format": "int32"
          },
          "heartbeatEnabled": {
            "description": "Heartbeat Enabled",
            "type": "boolean"
          },
          "id": {
            "description": "Secret Detail General Id",
            "type": "integer",
            "format": "int32"
          },
          "isFavorite": {
            "description": "Is Favorite",
            "type": "boolean"
          },
          "isOutOfSync": {
            "description": "Whether the secret is out of sync",
            "type": "boolean"
          },
          "isTotpEnabled": {
            "description": "Is One Time Password Enabled",
            "type": "boolean"
          },
          "lastHeartBeatCheck": {
            "description": "Time of last heartbeat check",
            "type": "string",
            "format": "date-time"
          },
          "lastHeartBeatStatus": {
            "$ref": "#/components/schemas/SecretDetailHeartbeatStatus"
          },
          "launchers": {
            "description": "Launchers",
            "items": {
              "$ref": "#/components/schemas/SecretDetailLauncher"
            },
            "type": "array"
          },
          "name": {
            "description": "Secret Detail General Name",
            "type": "string"
          },
          "outOfSyncReason": {
            "description": "Reason message if the secret is out of sync",
            "type": "string"
          },
          "secretPolicy": {
            "description": "Secret Policy",
            "type": "integer",
            "format": "int32"
          },
          "site": {
            "description": "Site",
            "type": "integer",
            "format": "int32"
          },
          "slugPrivateKey": {
            "description": "Private Key Field Slug",
            "type": "string"
          },
          "slugPublicKey": {
            "description": "Public Key Field Slug",
            "type": "string"
          },
          "template": {
            "description": "Secret template",
            "type": "integer",
            "format": "int32"
          },
          "totpPasswordSlug": {
            "description": "One Time Password Field Slug",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailHeartbeatStatus": {
        "description": "Current status of heartbeat",
        "properties": {},
        "type": "string",
        "enum": [
          "Failed",
          "Success",
          "Pending",
          "Disabled",
          "UnableToConnect",
          "UnknownError",
          "IncompatibleHost",
          "AccountLockedOut",
          "DnsMismatch",
          "UnableToValidateServerPublicKey",
          "Processing"
        ]
      },
      "SecretDetailLauncher": {
        "description": "Launchers",
        "properties": {
          "hasProxyCredentials": {
            "description": "HasProxyCredentials",
            "type": "boolean"
          },
          "imagePath": {
            "description": "ImagePath",
            "type": "string"
          },
          "isRecorded": {
            "description": "IsRecorded",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "typeId": {
            "description": "TypeId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDetailSettingsModel": {
        "description": "Secret Detail Settings",
        "properties": {
          "expirationDate": {
            "description": "Expiration Date",
            "type": "string",
            "format": "date-time"
          },
          "expirationDayInterval": {
            "description": "Expiration Day Interval",
            "type": "integer",
            "format": "int32"
          },
          "expirationTemplateText": {
            "description": "Expiration Template Text",
            "type": "string"
          },
          "expirationType": {
            "$ref": "#/components/schemas/SecretDetailExpirationType"
          },
          "jumpboxRouteSelection": {
            "$ref": "#/components/schemas/JumpboxRouteSummaryModel"
          },
          "oneTimePasswordSettings": {
            "$ref": "#/components/schemas/OneTimePasswordSettingsModel"
          },
          "rdpLauncherSettings": {
            "$ref": "#/components/schemas/RdpLauncherSettingsModel"
          },
          "sendEmailWhenChanged": {
            "description": "Send Email When Changed",
            "type": "boolean"
          },
          "sendEmailWhenHeartbeatFails": {
            "description": "Send Email When Heartbeat Fails",
            "type": "boolean"
          },
          "sendEmailWhenViewed": {
            "description": "Send Email When Viewed",
            "type": "boolean"
          },
          "sshLauncherSettings": {
            "$ref": "#/components/schemas/SshLauncherSettingsModel"
          }
        },
        "type": "object"
      },
      "SecretDetailExpirationType": {
        "description": "Expiration Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Template",
          "DayInterval",
          "SpecificDate",
          "Disabled"
        ]
      },
      "OneTimePasswordSettingsModel": {
        "description": "One Time Password Settings",
        "properties": {
          "backupCodes": {
            "description": "Backup Codes",
            "type": "string"
          },
          "dateChanged": {
            "description": "Date Changed",
            "type": "string",
            "format": "date-time"
          },
          "enabled": {
            "description": "Enabled",
            "type": "boolean"
          },
          "enabledOnTemplate": {
            "description": "Enabled On Template",
            "type": "boolean"
          },
          "key": {
            "description": "Key",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RdpLauncherSettingsModel": {
        "description": "RDP Launcher Settings",
        "properties": {
          "allowClipboard": {
            "$ref": "#/components/schemas/YesNoPreferenceOption"
          },
          "allowDrives": {
            "$ref": "#/components/schemas/YesNoPreferenceOption"
          },
          "allowPrinters": {
            "$ref": "#/components/schemas/YesNoPreferenceOption"
          },
          "allowSmartCards": {
            "$ref": "#/components/schemas/YesNoPreferenceOption"
          },
          "connectToConsole": {
            "$ref": "#/components/schemas/YesNoPreferenceOption"
          },
          "launcherHeight": {
            "description": "Launcher Height",
            "type": "integer",
            "format": "int32"
          },
          "launcherWidth": {
            "description": "Launcher Height",
            "type": "integer",
            "format": "int32"
          },
          "useCustomLauncherResolution": {
            "$ref": "#/components/schemas/YesNoPreferenceOption"
          }
        },
        "type": "object"
      },
      "YesNoPreferenceOption": {
        "description": "Allow Clipboard",
        "properties": {},
        "type": "string",
        "enum": [
          "No",
          "Yes",
          "UsePreferenceNo",
          "UsePreferenceYes"
        ]
      },
      "SshLauncherSettingsModel": {
        "description": "SSH Launcher Settings",
        "properties": {
          "canConnectAsCredentials": {
            "description": "Can Connect As Credentials",
            "type": "boolean"
          },
          "launcherType": {
            "$ref": "#/components/schemas/SshRunLauncherType"
          },
          "secretId": {
            "description": "Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "Secret Name",
            "type": "string"
          },
          "sshKeyExtendedTypeId": {
            "description": "SSH Key Extended Type Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshRunLauncherType": {
        "description": "Launcher Type",
        "properties": {},
        "type": "string",
        "enum": [
          "ConnectAsSecret",
          "ConnectAsDifferentSecret",
          "UseSshKeyOnSecret"
        ]
      },
      "PagingOfSecretLauncherSessionSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretLauncherSessionSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretLauncherSessionSummary": {
        "description": "Secret Launcher Session Summary",
        "properties": {
          "active": {
            "description": "Is the session currently Active?",
            "type": "boolean"
          },
          "endDate": {
            "description": "The date the session ended",
            "type": "string",
            "format": "date-time"
          },
          "secretId": {
            "description": "The Id of the Secret",
            "type": "integer",
            "format": "int32"
          },
          "secretSessionId": {
            "description": "The Id of the Secret Session",
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "description": "The date the session started",
            "type": "string",
            "format": "date-time"
          },
          "userName": {
            "description": "The display user name of the person in the Secret Session",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretLauncherSessionArgs": {
        "description": "Secret Launcher Session Args",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/SessionActions"
          },
          "message": {
            "description": "Message To Send",
            "type": "string"
          },
          "secretId": {
            "description": "Secret Associated To Session",
            "type": "integer",
            "format": "int32"
          },
          "secretSessionId": {
            "description": "Launcher Session Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SessionActions": {
        "description": "Action To Take",
        "properties": {},
        "type": "string",
        "enum": [
          "Terminate",
          "LimitSession",
          "MessageOnly"
        ]
      },
      "SecretLauncherSessionActionResult": {
        "description": "Secret Launcher Session Action Result",
        "properties": {
          "success": {
            "description": "Was the operation a Success?",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretDetailRestrictedSshCommandViewModel": {
        "description": "SecretDetailRestrictedSshCommandViewModel",
        "properties": {
          "commandRestrictionType": {
            "$ref": "#/components/schemas/CommandRestrictionType"
          },
          "sshCommandBlocklists": {
            "description": "Blocklists",
            "items": {
              "$ref": "#/components/schemas/SecretDetailRestrictedSshCommandBlocklistViewModel"
            },
            "type": "array"
          },
          "sshCommandMenus": {
            "description": "Allowed menus",
            "items": {
              "$ref": "#/components/schemas/SecretDetailRestrictedSshCommandMenuViewModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CommandRestrictionType": {
        "description": "Command restriction type (AllowedMenu, Blocklist)",
        "properties": {},
        "type": "string",
        "enum": [
          "AllowedMenu",
          "BlockedList"
        ]
      },
      "SecretDetailRestrictedSshCommandBlocklistViewModel": {
        "description": "Blocklists",
        "properties": {
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "rolePermissionId": {
            "description": "RolePermissionId",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandBlocklistId": {
            "description": "SshCommandBlocklistId",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandBlocklistName": {
            "description": "SshCommandBlocklistName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailRestrictedSshCommandMenuViewModel": {
        "description": "Allowed menus",
        "properties": {
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandMenuId": {
            "description": "SshCommandMenuId",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandMenuName": {
            "description": "SshCommandMenuName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailUpdateGeneralArgs": {
        "description": "Secret General Settings Update Message",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailGeneralUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailGeneralUpdateModel": {
        "description": "Secret General Settings Update",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableInheritSecretPolicy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "folder": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "generateSshKeys": {
            "description": "When true autogenerate new SSH keys",
            "type": "boolean"
          },
          "heartbeatEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "isOutOfSync": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "secretFields": {
            "description": "Secret Fields",
            "items": {
              "$ref": "#/components/schemas/UpdateTemplateFieldOfString"
            },
            "type": "array"
          },
          "secretPolicy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "site": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "template": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "UpdateTemplateFieldOfString": {
        "description": "Update Secret Template Field",
        "properties": {
          "dirty": {
            "description": "Whether or not the field is dirty.  If false, the field value will not be updated.  If true, the field value will be updated.",
            "type": "boolean"
          },
          "slug": {
            "description": "Secret template slug name",
            "type": "string"
          },
          "value": {
            "description": "Secret field vlaue",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailGeneralViewModel": {
        "description": "Secret Detail General View Model",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "autoChangePassword": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "canGenerateSshKey": {
            "description": "CanGenerateSshKey",
            "type": "boolean"
          },
          "enableInheritSecretPolicy": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "expiration": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "fields": {
            "description": "Fields",
            "items": {
              "$ref": "#/components/schemas/ViewTemplateFieldOfString"
            },
            "type": "array"
          },
          "folder": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "heartbeatEnabled": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "isFavorite": {
            "description": "IsFavorite",
            "type": "boolean"
          },
          "isOutOfSync": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "isTotpEnabled": {
            "description": "IsTotpEnabled",
            "type": "boolean"
          },
          "lastHeartBeatCheck": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalDateTime"
          },
          "lastHeartBeatStatus": {
            "$ref": "#/components/schemas/ViewFieldValueOfSecretDetailHeartbeatStatus"
          },
          "launchers": {
            "description": "Launchers",
            "items": {
              "$ref": "#/components/schemas/SecretDetailLauncher"
            },
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "outOfSyncReason": {
            "$ref": "#/components/schemas/ViewFieldValueOfString"
          },
          "secretPolicy": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "site": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "slugPrivateKey": {
            "description": "SlugPrivateKey",
            "type": "string"
          },
          "slugPublicKey": {
            "description": "SlugPublicKey",
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "totpPasswordSlug": {
            "description": "TotpPasswordSlug",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewTemplateFieldOfString": {
        "description": "Fields",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "dropDownOptions": {
            "description": "DropDownOptions",
            "items": {
              "$ref": "#/components/schemas/ViewTemplateFieldDropDownOption"
            },
            "type": "array"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "listType": {
            "$ref": "#/components/schemas/SecretFieldListType"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "passwordRequirementId": {
            "description": "PasswordRequirementId",
            "type": "integer",
            "format": "int32"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "slug": {
            "description": "Slug",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/SecretFieldType"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewTemplateFieldDropDownOption": {
        "description": "DropDownOptions",
        "properties": {
          "fieldValue": {
            "description": "FieldValue",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "description": "Text",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretFieldType": {
        "description": "Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Text",
          "Notes",
          "Url",
          "Password",
          "File",
          "DropDown",
          "List"
        ]
      },
      "ViewFieldValueOfOptionalDateTime": {
        "description": "Time of last heartbeat check",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfSecretDetailHeartbeatStatus": {
        "description": "Current status of heartbeat",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/SecretDetailHeartbeatStatus"
          }
        },
        "type": "object"
      },
      "SecretDetailUpdateEmailArgs": {
        "description": "Secret User Email Update Message",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailEmailUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailEmailUpdateModel": {
        "description": "Secret Email User Settings",
        "properties": {
          "sendEmailWhenChanged": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "sendEmailWhenHeartbeatFails": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "sendEmailWhenViewed": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "SecretDetailUpdateSecurityGeneralArgs": {
        "description": "Secret General Information Update Message",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailSecurityGeneralUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailSecurityGeneralUpdateModel": {
        "description": "Secret General Information Update",
        "properties": {
          "doubleLockId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableDoubleLock": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "hideLauncherPassword": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "proxyEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "requiresComment": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "sessionRecordingEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "webLauncherRequiresIncognitoMode": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "SecretDetailSecurityViewModel": {
        "description": "SecretDetailSecurityViewModel",
        "properties": {
          "allowOwnersUnrestrictedSshCommands": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "approvalWorkflow": {
            "$ref": "#/components/schemas/ViewFieldValueOfWorkflowTemplate"
          },
          "approvalWorkflowOptions": {
            "$ref": "#/components/schemas/ViewFieldValueOfWorkflowTemplateArray"
          },
          "approvers": {
            "$ref": "#/components/schemas/ViewFieldValueOfSecretDetailUserViewModelArray"
          },
          "availableDoubleLocks": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfViewTemplateFieldDropDownOptionArray"
          },
          "availableRequireApprovalTypes": {
            "$ref": "#/components/schemas/ViewFieldValueOfSecretDetailApprovalTypeArray"
          },
          "checkOutChangePasswordEnabled": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "checkOutDefaultIntervalDisplay": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "checkOutEnabled": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "checkOutIntervalDisplay": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "checkOutIntervalMinutes": {
            "$ref": "#/components/schemas/ViewFieldValueOfOptionalInt32"
          },
          "commandRestrictionType": {
            "$ref": "#/components/schemas/ViewFieldValueOfCommandRestrictionType"
          },
          "doubleLockId": {
            "$ref": "#/components/schemas/ViewFieldValueOfInt32"
          },
          "doubleLockName": {
            "$ref": "#/components/schemas/ViewFieldValueReadOnlyOfString"
          },
          "hideLauncherPassword": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "isDoubleLock": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "passwordRequirements": {
            "$ref": "#/components/schemas/SecretDetailSecurityPasswordRequirements"
          },
          "proxyEnabled": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "requireApprovalType": {
            "$ref": "#/components/schemas/ViewFieldValueOfSecretDetailApprovalType"
          },
          "requiresComment": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "restrictedSshCommandCount": {
            "description": "RestrictedSshCommandCount",
            "type": "integer",
            "format": "int32"
          },
          "restrictSshCommands": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "sessionRecordingEnabled": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          },
          "webLauncherRequiresIncognitoMode": {
            "$ref": "#/components/schemas/ViewFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfWorkflowTemplate": {
        "description": "ApprovalWorkflow",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/WorkflowTemplate"
          }
        },
        "type": "object"
      },
      "WorkflowTemplate": {
        "description": "Value",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "configurationJson": {
            "description": "ConfigurationJson",
            "type": "string"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "expirationMinutes": {
            "description": "ExpirationMinutes",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "reusable": {
            "description": "Reusable",
            "type": "boolean"
          },
          "typeName": {
            "description": "TypeName",
            "type": "string"
          },
          "workflowTemplateId": {
            "description": "WorkflowTemplateId",
            "type": "integer",
            "format": "int32"
          },
          "workflowType": {
            "$ref": "#/components/schemas/WorkflowType"
          }
        },
        "type": "object"
      },
      "WorkflowType": {
        "description": "WorkflowType",
        "properties": {},
        "type": "string",
        "enum": [
          "AccessRequest",
          "SecretEraseRequest"
        ]
      },
      "SecretDetailUserViewModel": {
        "description": "Value",
        "properties": {
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "isGroup": {
            "description": "IsGroup",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretDetailApprovalType": {
        "description": "Secret Security Approval Type",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "RequireApproval",
          "RequireEditorsApproval",
          "RequireEveryoneApproval"
        ]
      },
      "ViewFieldValueOfCommandRestrictionType": {
        "description": "CommandRestrictionType",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/CommandRestrictionType"
          }
        },
        "type": "object"
      },
      "SecretDetailSecurityPasswordRequirements": {
        "description": "PasswordRequirements",
        "properties": {
          "requirements": {
            "description": "Requirements",
            "items": {
              "$ref": "#/components/schemas/SecretDetailSecurityPasswordRequirement"
            },
            "type": "array"
          },
          "validateOnCreate": {
            "description": "ValidateOnCreate",
            "type": "boolean"
          },
          "validateOnEdit": {
            "description": "ValidateOnEdit",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretDetailSecurityPasswordRequirement": {
        "description": "Requirements",
        "properties": {
          "fieldDisplayName": {
            "description": "FieldDisplayName",
            "type": "string"
          },
          "fieldName": {
            "description": "FieldName",
            "type": "string"
          },
          "isCustom": {
            "description": "IsCustom",
            "type": "boolean"
          },
          "passwordRequirementId": {
            "description": "PasswordRequirementId",
            "type": "integer",
            "format": "int32"
          },
          "passwordRequirementName": {
            "description": "PasswordRequirementName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfSecretDetailApprovalType": {
        "description": "RequireApprovalType",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/SecretDetailApprovalType"
          }
        },
        "type": "object"
      },
      "SecretDetailUpdateSecurityCheckoutArgs": {
        "description": "Secret Security Checkout Message",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailSecurityCheckoutUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailSecurityCheckoutUpdateModel": {
        "description": "Secret Security Checkout Update",
        "properties": {
          "checkOutChangePasswordEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "checkOutEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "checkOutIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "SecretSecurityUpdateResponse": {
        "description": "Response to indicate if the Secret security settings saved properly.  If you still have access to the model the updated model will be returned.  If checkout is now enabled then model will be null.",
        "properties": {
          "model": {
            "$ref": "#/components/schemas/SecretDetailSecurityModel"
          },
          "success": {
            "description": "Returns as true if the update was successful.  Note that any failures should throw an error",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretDetailSecurityModel": {
        "description": "Secret Detail Security",
        "properties": {
          "allowOwnersUnrestrictedSshCommands": {
            "description": "Allow Owners Unrestricted SSH Commands",
            "type": "boolean"
          },
          "approvalWorkflow": {
            "$ref": "#/components/schemas/WorkflowTemplate"
          },
          "approvers": {
            "description": "Approvers",
            "items": {
              "$ref": "#/components/schemas/SecretDetailUserViewModel"
            },
            "type": "array"
          },
          "checkOutChangePasswordEnabled": {
            "description": "Check Out Change Password Enabled",
            "type": "boolean"
          },
          "checkOutDefaultIntervalDisplay": {
            "description": "Check Out Default Interval Display",
            "type": "string"
          },
          "checkOutEnabled": {
            "description": "Whether secret checkout is enabled",
            "type": "boolean"
          },
          "checkOutIntervalDisplay": {
            "description": "Check Out Interval Display",
            "type": "string"
          },
          "checkOutIntervalMinutes": {
            "description": "Checkout interval, in minutes",
            "type": "integer",
            "format": "int32"
          },
          "commandRestrictionType": {
            "$ref": "#/components/schemas/CommandRestrictionType"
          },
          "doubleLockId": {
            "description": "DoubleLock Id",
            "type": "integer",
            "format": "int32"
          },
          "doubleLockName": {
            "description": "DoubleLock Name",
            "type": "string"
          },
          "hideLauncherPassword": {
            "description": "Hide Launcher Password",
            "type": "boolean"
          },
          "isDoubleLock": {
            "description": "Whether double lock is enabled",
            "type": "boolean"
          },
          "passwordRequirements": {
            "$ref": "#/components/schemas/SecretDetailSecurityPasswordRequirements"
          },
          "proxyEnabled": {
            "description": "Proxy Enabled",
            "type": "boolean"
          },
          "requireApprovalType": {
            "$ref": "#/components/schemas/SecretDetailApprovalType"
          },
          "requiresComment": {
            "description": "Requires Comment",
            "type": "boolean"
          },
          "restrictedSshCommandCount": {
            "description": "Restricted SSH Command Count",
            "type": "integer",
            "format": "int32"
          },
          "restrictSshCommands": {
            "description": "Restrict SSH Commands",
            "type": "boolean"
          },
          "sessionRecordingEnabled": {
            "description": "Whether session recording is enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretSearchExtendedArgs": {
        "description": "SecretSearchExtendedArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretSearchExtendedData"
          }
        },
        "type": "object"
      },
      "SecretSearchExtendedData": {
        "description": "Data",
        "properties": {
          "secretIds": {
            "description": "Pass an array of secret IDs to get back settings on these secrets for the current user",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretSearchExtendedSummary": {
        "description": "SecretSearchExtendedSummary[]",
        "properties": {
          "hasLaunchers": {
            "description": "Does this Secret have launchers the current user can use",
            "type": "boolean"
          },
          "isFavorite": {
            "description": "Is this a favorite secret for the current user",
            "type": "boolean"
          },
          "lastAccessed": {
            "description": "Does this Secret have launchers the current user can use",
            "type": "string",
            "format": "date-time"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "Secret Name",
            "type": "string"
          },
          "totalSecretViews": {
            "description": "Does this Secret have launchers the current user can use",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretRestrictedArgs": {
        "description": "Restricted secret update options",
        "properties": {
          "comment": {
            "description": "If the secret requires a comment to view or requires approval to view, a reason for accessing the secret must be provided.",
            "type": "string"
          },
          "doubleLockPassword": {
            "description": "If the secret is DoubleLocked, this is the DoubleLock password needed to access the secret.",
            "type": "string"
          },
          "forceCheckIn": {
            "description": "Force the secret to be checked in, even if checked out by someone else. The user must have the \"Force Check In\" permission.",
            "type": "boolean"
          },
          "includeInactive": {
            "description": "If the secret is deactivated, this must be set to true in order to access the secret. The user must also have the \"View Deleted Secrets\" permission.",
            "type": "boolean"
          },
          "newPassword": {
            "description": "New secret password.",
            "type": "string"
          },
          "noAutoCheckout": {
            "description": "Don't check out the secret automatically.",
            "type": "boolean"
          },
          "ticketNumber": {
            "description": "If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the ticket number to the help desk request.",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the id of the help desk system configured in Secret Server that should be used to validate the ticket number.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretCreateArgs": {
        "description": "Secret create options",
        "required": [
          "name",
          "secretTemplateId",
          "items"
        ],
        "properties": {
          "autoChangeEnabled": {
            "description": "Whether the secret’s password is automatically rotated on a schedule.",
            "type": "boolean"
          },
          "checkOutChangePasswordEnabled": {
            "description": "Whether the secret’s password is automatically changed when a secret is checked in. This is a security feature that prevents a use of the password retrieved from check-out after the secret is checked in.",
            "type": "boolean"
          },
          "checkOutEnabled": {
            "description": "Whether the user must check-out the secret to view it. Checking out gives the user exclusive access to the secret for a specified period or until the secret is checked in.",
            "type": "boolean"
          },
          "checkOutIntervalMinutes": {
            "description": "The number of minutes that a secret will remain checked out.",
            "type": "integer",
            "format": "int32"
          },
          "delayIndexing": {
            "description": "Whether the search indexing should be delayed to the background process. This can speed up bulk secret creation scripts by offloading the task of indexing the new secrets to the background task at the trade-off of not having search indexes immediately available.",
            "type": "boolean"
          },
          "enableInheritPermissions": {
            "description": "Whether the secret inherits permissions from the containing folder.",
            "type": "boolean"
          },
          "enableInheritSecretPolicy": {
            "description": "Whether the secret policy is inherited from the containing folder.",
            "type": "boolean"
          },
          "folderId": {
            "description": "If the secret is contained in a folder, the id of the containing folder. Set to null or -1 for secrets that are in the root folder.",
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "description": "An array of values for the secret fields defined in the secret template.",
            "items": {
              "$ref": "#/components/schemas/RestSecretItem"
            },
            "type": "array"
          },
          "launcherConnectAsSecretId": {
            "description": "When an SSH secret is proxied, you can choose to connect as another user and then do an su to the current secret’s user. This is a common practice for connecting with a lower privileged account and then switching to the root user.",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "The name to display for the secret.",
            "type": "string"
          },
          "passwordTypeWebScriptId": {
            "description": "The id of the password change script to use on applicable web password secrets.",
            "type": "integer",
            "format": "int32"
          },
          "proxyEnabled": {
            "description": "Whether sessions launched on this secret use Secret Server’s proxying or connect directly.",
            "type": "boolean"
          },
          "requiresComment": {
            "description": "Whether the user must enter a comment to view the secret.",
            "type": "boolean"
          },
          "secretPolicyId": {
            "description": "The id of the secret policy that controls the security and other settings of the secret. Set to null to not assign a secret policy.",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplateId": {
            "description": "The id of the secret template that defines the fields and properties of the secret.",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "sessionRecordingEnabled": {
            "description": "Whether session recording is enabled.",
            "type": "boolean"
          },
          "siteId": {
            "description": "The id of the distributed engine site that is used by this secret for operations such as password changing.",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "sshKeyArgs": {
            "$ref": "#/components/schemas/SshKeyArgs"
          },
          "webLauncherRequiresIncognitoMode": {
            "description": "Whether the web launcher will require the browser to run in incognito mode.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretChangePasswordArgs": {
        "description": "Secret password change options",
        "properties": {
          "comment": {
            "description": "If the secret requires a comment to view or requires approval to view, a reason for accessing the secret must be provided.",
            "type": "string"
          },
          "doubleLockPassword": {
            "description": "If the secret is DoubleLocked, this is the DoubleLock password needed to access the secret.",
            "type": "string"
          },
          "forceCheckIn": {
            "description": "Force the secret to be checked in, even if checked out by someone else. The user must have the \"Force Check In\" permission.",
            "type": "boolean"
          },
          "includeInactive": {
            "description": "If the secret is deactivated, this must be set to true in order to access the secret. The user must also have the \"View Deleted Secrets\" permission.",
            "type": "boolean"
          },
          "newPassword": {
            "description": "New secret password.",
            "type": "string"
          },
          "noAutoCheckout": {
            "description": "Don't check out the secret automatically.",
            "type": "boolean"
          },
          "sshKeyArgs": {
            "$ref": "#/components/schemas/RotateSshKeyArgs"
          },
          "ticketNumber": {
            "description": "If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the ticket number to the help desk request.",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "If the secret requires a comment to view or requires approval and a user must provide a help desk a ticket number, this is the id of the help desk system configured in Secret Server that should be used to validate the ticket number.",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RotateSshKeyArgs": {
        "description": "SSH key rotation options",
        "properties": {
          "generatePassphrase": {
            "description": "Whether to generate the next SSH private key passphrase. Must be true if the passphrase is empty.",
            "type": "boolean"
          },
          "generateSshKeys": {
            "description": "Whether to generate the next SSH private key. Must be true if the private key is empty.",
            "type": "boolean"
          },
          "passphrase": {
            "description": "Private key passphrase",
            "type": "string"
          },
          "privateKey": {
            "description": "Private key",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretResponseCodeModel": {
        "description": "SecretResponseCodeModel",
        "properties": {
          "responseCodes": {
            "description": "ResponseCodes",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretCheckOutExtensionArgs": {
        "description": "Secret Check Out Extension Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretCheckOutExtensionModel"
          }
        },
        "type": "object"
      },
      "SecretCheckOutExtensionModel": {
        "description": "Secret Check Out Extension Model",
        "properties": {
          "minutesToAdd": {
            "description": "Extend Check Out To This Duration",
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "description": "Notes To Add To Audit",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretCheckOutExtensionResponseModel": {
        "description": "SecretCheckOutExtensionResponseModel",
        "properties": {
          "checkOutEndTime": {
            "description": "CheckOutEndTime",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "SecretProxyArgs": {
        "description": "Arguments to load the proxy credentials",
        "properties": {
          "launcherType": {
            "description": "The type of the launcher to proxy",
            "type": "integer",
            "format": "int32"
          },
          "machine": {
            "description": "The machine name",
            "type": "string"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "siteId": {
            "description": "The site ID to use (RDP proxy only)",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretRdpProxyModel": {
        "description": "SecretRdpProxyModel",
        "properties": {
          "domain": {
            "description": "The domain for the RDP Proxy",
            "type": "string"
          },
          "host": {
            "description": "The host and port for the RDP Proxy",
            "type": "string"
          },
          "password": {
            "description": "The password for the SSH Proxy",
            "type": "string"
          },
          "username": {
            "description": "The username for the SSH Proxy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretSshProxyModel": {
        "description": "SecretSshProxyModel",
        "properties": {
          "host": {
            "description": "The host for the SSH Proxy",
            "type": "string"
          },
          "password": {
            "description": "The password for the SSH Proxy",
            "type": "string"
          },
          "port": {
            "description": "The port for the SSH Proxy",
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "description": "The username for the SSH Proxy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretSshTerminalArgs": {
        "description": "Arguments to load the SSH proxy credentials",
        "properties": {
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretSshTerminalModel": {
        "description": "SecretSshTerminalModel",
        "properties": {
          "host": {
            "description": "The host for the SSH Proxy",
            "type": "string"
          },
          "port": {
            "description": "The port for the SSH Proxy",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "The secret id to launch",
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "description": "The username for the SSH Proxy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FavoriteSecretArgs": {
        "description": "Arguments to favorite a secret.",
        "properties": {
          "isFavorite": {
            "description": "Whether or not the secret is a favorite. This is an optional argument.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretDetailStopPasswordResultModel": {
        "description": "SecretDetailStopPasswordResultModel",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretDetailConvertTemplateArgs": {
        "description": "Wrapper around secret template conversion arguments",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConvertTemplateActionModel"
          }
        },
        "type": "object"
      },
      "ConvertTemplateActionModel": {
        "description": "Secret template conversion model",
        "properties": {
          "fieldMapping": {
            "description": "Which source fields should map to which destination fields",
            "items": {
              "$ref": "#/components/schemas/ConvertTemplateFieldModel"
            },
            "type": "array"
          },
          "folderId": {
            "description": "The target folder ID",
            "type": "integer",
            "format": "int32"
          },
          "isBulk": {
            "description": "Whether or not this is a bulk operation or a single secret",
            "type": "boolean"
          },
          "newSecretName": {
            "description": "The new name for the secret",
            "type": "string"
          },
          "secretIds": {
            "description": "A list of Secret IDs that will be converted",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "secretTemplateId": {
            "description": "The new secret template ID that will be applied to all secrets",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConvertTemplateFieldModel": {
        "description": "A secret field mapping for conversion",
        "properties": {
          "destinationFieldId": {
            "description": "The destination field ID",
            "type": "integer",
            "format": "int32"
          },
          "sourceFieldId": {
            "description": "The original source field ID",
            "type": "integer",
            "format": "int32"
          },
          "sourceFieldValue": {
            "description": "A value for the source field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailConvertTemplateModel": {
        "description": "SecretDetailConvertTemplateModel",
        "properties": {
          "secretId": {
            "description": "SecretId",
            "type": "integer",
            "format": "int32"
          },
          "taskId": {
            "description": "TaskId",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailConvertTemplateInfoArgs": {
        "description": "Get information used to convert a secret to a different template",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConvertTemplateInfoModel"
          }
        },
        "type": "object"
      },
      "ConvertTemplateInfoModel": {
        "description": "Define which secrets are being converted to what template type",
        "properties": {
          "destinationTemplateId": {
            "description": "What secret template are you converting to",
            "type": "integer",
            "format": "int32"
          },
          "secretIds": {
            "description": "Which secret IDs are being converted",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConvertTemplateDetailsModel": {
        "description": "ConvertTemplateDetailsModel",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/ConvertTemplateDestinationModel"
          },
          "source": {
            "$ref": "#/components/schemas/ConvertTemplateSourceModel"
          }
        },
        "type": "object"
      },
      "ConvertTemplateDestinationModel": {
        "description": "Destination",
        "properties": {
          "fields": {
            "description": "Fields",
            "items": {
              "$ref": "#/components/schemas/ConvertTemplateDetailFieldModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConvertTemplateDetailFieldModel": {
        "description": "Fields",
        "properties": {
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SecretFieldType"
          }
        },
        "type": "object"
      },
      "ConvertTemplateSourceModel": {
        "description": "Source",
        "properties": {
          "fields": {
            "description": "Fields",
            "items": {
              "$ref": "#/components/schemas/ConvertTemplateDetailFieldModel"
            },
            "type": "array"
          },
          "templateId": {
            "description": "TemplateId",
            "type": "integer",
            "format": "int32"
          },
          "templateName": {
            "description": "TemplateName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretsExportArgs": {
        "description": "SecretsExportArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretsExportModel"
          }
        },
        "type": "object"
      },
      "SecretsExportModel": {
        "description": "Data",
        "properties": {
          "doubleLockPassword": {
            "description": "The DoubleLock password of the current user.",
            "type": "string"
          },
          "exportChildFolders": {
            "description": "Export Child Folders",
            "type": "boolean"
          },
          "exportFileType": {
            "$ref": "#/components/schemas/ExportFileType"
          },
          "exportFolderPath": {
            "description": "Export Folder Path",
            "type": "boolean"
          },
          "exportTotp": {
            "description": "Export Totp Settings",
            "type": "boolean"
          },
          "folderId": {
            "description": "The folder Id of the specific folder being exported.",
            "type": "integer",
            "format": "int32"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "password": {
            "description": "The password of the current user.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExportFileType": {
        "description": "The file format to be exported.",
        "properties": {},
        "type": "string",
        "enum": [
          "Csv",
          "Xml"
        ]
      },
      "SecretsExportResultModel": {
        "description": "SecretsExportResultModel",
        "properties": {
          "errors": {
            "description": "Secret Export Errors",
            "items": {
              "$ref": "#/components/schemas/SecretExportErrorModel"
            },
            "type": "array"
          },
          "exportedSecretsFileText": {
            "description": "Export File Text",
            "type": "string"
          },
          "fileType": {
            "$ref": "#/components/schemas/ExportFileType"
          },
          "secretsCount": {
            "description": "Count of Exported Secrets",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretExportErrorModel": {
        "description": "Secret Export Errors",
        "properties": {
          "errorMessage": {
            "description": "Error Message",
            "type": "string"
          },
          "secretName": {
            "description": "Secret Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailUpdateRpcScriptSecretsArgs": {
        "description": "RPC Script Update Message",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailRpcScriptSecretsUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailRpcScriptSecretsUpdateModel": {
        "description": "Secrets available for RPC Scripts",
        "properties": {
          "resetSecretIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          }
        },
        "type": "object"
      },
      "SecretDetailRpcModel": {
        "description": "Secret Detail RPC",
        "properties": {
          "autoChangeEnabled": {
            "description": "AutoChange Enabled",
            "type": "boolean"
          },
          "autoChangeSchedule": {
            "$ref": "#/components/schemas/SecretDetailScheduleModel"
          },
          "canEnterNextPassword": {
            "description": "Can Enter Next Password",
            "type": "boolean"
          },
          "expireText": {
            "description": "Expire Text",
            "type": "string"
          },
          "hasNextPassphrase": {
            "description": "Has Next Passphrase",
            "type": "boolean"
          },
          "hasNextPassword": {
            "description": "Has Next Password",
            "type": "boolean"
          },
          "hasNextPrivateKey": {
            "description": "Has Next Private Key",
            "type": "boolean"
          },
          "isValidForSshKeyRpc": {
            "description": "is Valid For SSH Key RPC",
            "type": "boolean"
          },
          "passwordStatus": {
            "$ref": "#/components/schemas/SecretDetailPasswordStatus"
          },
          "passwordTypeId": {
            "description": "Password Type Id",
            "type": "integer",
            "format": "int32"
          },
          "passwordTypeName": {
            "description": "Password Type Name",
            "type": "string"
          },
          "passwordTypeWebScriptId": {
            "description": "Password Type WebScript Id",
            "type": "integer",
            "format": "int32"
          },
          "privilegedAccountSecretId": {
            "description": "Priviliged Account Secret Id",
            "type": "integer",
            "format": "int32"
          },
          "privilegedAccountSecretName": {
            "description": "Priviliged Account Secret Name",
            "type": "string"
          },
          "resetSecrets": {
            "description": "Reset Secrets",
            "items": {
              "$ref": "#/components/schemas/SecretDetailRpcSecrets"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretDetailScheduleModel": {
        "description": "Secret Detail Autochange Schedule",
        "properties": {
          "changeEveryMonths": {
            "description": "Change Every Months",
            "type": "integer",
            "format": "int32"
          },
          "changeEveryMonthsDayNumber": {
            "description": "Change Every Months Day Number",
            "type": "integer",
            "format": "int32"
          },
          "changeEveryMonthsInstance": {
            "description": "Change Every Months Instance",
            "type": "string"
          },
          "changeEveryMonthsInstanceTarget": {
            "description": "Change Every MOnths Instance Target",
            "type": "string"
          },
          "days": {
            "description": "Days",
            "type": "integer",
            "format": "int32"
          },
          "friday": {
            "description": "Friday",
            "type": "boolean"
          },
          "monday": {
            "description": "Monday",
            "type": "boolean"
          },
          "monthScheduleType": {
            "description": "Month Schedule Type",
            "type": "string"
          },
          "numberMonthlyDay": {
            "description": "Number Monthly Day",
            "type": "integer",
            "format": "int32"
          },
          "onlyChangeIfExpired": {
            "description": "Only Change If Expired",
            "type": "boolean"
          },
          "saturday": {
            "description": "Saturday",
            "type": "boolean"
          },
          "scheduleType": {
            "description": "Schedule Type",
            "type": "string"
          },
          "startingOn": {
            "description": "Starting On",
            "type": "string",
            "format": "date-time"
          },
          "sunday": {
            "description": "Sunday",
            "type": "boolean"
          },
          "thursday": {
            "description": "Thursday",
            "type": "boolean"
          },
          "tuesday": {
            "description": "Tuesday",
            "type": "boolean"
          },
          "wednesday": {
            "description": "Wednesday",
            "type": "boolean"
          },
          "weeks": {
            "description": "Weeks",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDetailPasswordStatus": {
        "description": "Password Status",
        "properties": {
          "failedAttempts": {
            "description": "FailedAttempts",
            "type": "integer",
            "format": "int32"
          },
          "failedDependency": {
            "description": "FailedDependency",
            "type": "boolean"
          },
          "lastRpcDate": {
            "description": "LastRpcDate",
            "type": "string",
            "format": "date-time"
          },
          "nextRpcDate": {
            "description": "NextRpcDate",
            "type": "string",
            "format": "date-time"
          },
          "rpcMessage": {
            "description": "RpcMessage",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PasswordChangeResult"
          }
        },
        "type": "object"
      },
      "PasswordChangeResult": {
        "description": "Status",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "Pending",
          "Success",
          "Fail"
        ]
      },
      "SecretDetailRpcSecrets": {
        "description": "Reset Secrets",
        "properties": {
          "folderName": {
            "description": "FolderName",
            "type": "string"
          },
          "order": {
            "description": "Order",
            "type": "integer",
            "format": "int32"
          },
          "secretId": {
            "description": "SecretId",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "SecretName",
            "type": "string"
          },
          "secretTemplateName": {
            "description": "SecretTemplateName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailUpdateSecurityApprovalArgs": {
        "description": "Secret Update Security Approval Message",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailSecurityApprovalUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailSecurityApprovalUpdateModel": {
        "description": "Secret Security Approval Update",
        "properties": {
          "approvers": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "requireApprovalType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalSecretDetailApprovalType"
          },
          "workflowTemplateId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalSecretDetailApprovalType": {
        "description": "Approval Type",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretDetailUpdateExpirationArgs": {
        "description": "SecretDetailUpdateExpirationArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailExpirationUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretDetailExpirationUpdateModel": {
        "description": "Data",
        "properties": {
          "expirationDate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalDateTime"
          },
          "expirationDayInterval": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "expirationType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretDetailExpirationUpdateType"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretDetailExpirationUpdateType": {
        "description": "ExpirationType",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretDetailExpirationUpdateType"
          }
        },
        "type": "object"
      },
      "SecretDetailExpirationUpdateType": {
        "description": "Value",
        "properties": {},
        "type": "string",
        "enum": [
          "Template",
          "DayInterval",
          "SpecificDate"
        ]
      },
      "SecretDetailSshRestrictedCommandUpdateArgs": {
        "description": "Update Secret SSH Command Arguments",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretDetailSshCommandUpdateData"
          }
        },
        "type": "object"
      },
      "SecretDetailSshCommandUpdateData": {
        "description": "Secret SSH Command Data",
        "properties": {
          "allowOwnersUnrestrictedCommands": {
            "description": "AllowOwnersUnrestrictedCommands",
            "type": "boolean"
          },
          "commandRestrictionType": {
            "$ref": "#/components/schemas/CommandRestrictionType"
          },
          "restrictSshCommands": {
            "description": "RestrictSshCommands",
            "type": "boolean"
          },
          "sshCommandBlocklists": {
            "description": "SshCommandBlocklists",
            "items": {
              "$ref": "#/components/schemas/SecretDetailRestrictedSshCommandBlocklistPermissionUpdateModel"
            },
            "type": "array"
          },
          "sshCommandMenus": {
            "description": "SshCommandMenus",
            "items": {
              "$ref": "#/components/schemas/SecretDetailRestrictedSshCommandMenuPermissionUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretDetailRestrictedSshCommandBlocklistPermissionUpdateModel": {
        "description": "Secret Detail SSH Command Blocklist Permission Update Model",
        "properties": {
          "rolePermissionId": {
            "description": "Role Permission Id (10064\tView, 10065\tEdit, 10066\tOwner)",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandBlocklistId": {
            "description": "SSH Command Blocklist Id",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "SecretDetailRestrictedSshCommandMenuPermissionUpdateModel": {
        "description": "Secret Detail SSH Command Menu Permission Update Model",
        "properties": {
          "groupId": {
            "description": "Group Id",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandMenuId": {
            "description": "SSH Command Menu Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretDetailJumpboxUpdateArgs": {
        "description": "SecretDetailJumpboxUpdateArgs",
        "properties": {
          "jumpboxRouteId": {
            "description": "JumpboxRouteId",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "SecretServerSettingsModel": {
        "description": "SecretServerSettingsModel",
        "properties": {
          "advancedSettings": {
            "description": "Advanced Configuration Settings",
            "items": {
              "$ref": "#/components/schemas/ConfigurationAdvancedModel"
            },
            "type": "array"
          },
          "applicationSettings": {
            "$ref": "#/components/schemas/ConfigurationApplicationSettingsModel"
          },
          "configurationVersion": {
            "description": "Export Configuration Version",
            "type": "string"
          },
          "email": {
            "$ref": "#/components/schemas/ConfigurationEmailModel"
          },
          "externalInstanceId": {
            "description": "ID for specific instance",
            "type": "string",
            "format": "uuid"
          },
          "folderSettings": {
            "$ref": "#/components/schemas/ConfigurationFoldersModel"
          },
          "launcherSettings": {
            "$ref": "#/components/schemas/ConfigurationLauncherSettingsModel"
          },
          "licenses": {
            "description": "License Keys",
            "items": {
              "$ref": "#/components/schemas/LicenseModel"
            },
            "type": "array"
          },
          "localUserPasswords": {
            "$ref": "#/components/schemas/ConfigurationLocalUserPasswordsModel"
          },
          "login": {
            "$ref": "#/components/schemas/ConfigurationLoginModel"
          },
          "permissionOptions": {
            "$ref": "#/components/schemas/ConfigurationPermissionOptionsModel"
          },
          "protocolHandlerSettings": {
            "$ref": "#/components/schemas/ConfigurationProtocolHandlerSettingsModel"
          },
          "saml": {
            "$ref": "#/components/schemas/ConfigurationSamlModel"
          },
          "security": {
            "$ref": "#/components/schemas/ConfigurationSecurityModel"
          },
          "sessionRecording": {
            "$ref": "#/components/schemas/ConfigurationSessionRecordingModel"
          },
          "sshCommands": {
            "$ref": "#/components/schemas/ConfigurationSshCommandExportModel"
          },
          "ticketSystem": {
            "$ref": "#/components/schemas/ConfigurationTicketSystemModel"
          },
          "userExperience": {
            "$ref": "#/components/schemas/ConfigurationUserExperienceModel"
          },
          "userInterface": {
            "$ref": "#/components/schemas/ConfigurationUserInterfaceModel"
          }
        },
        "type": "object"
      },
      "ConfigurationAdvancedModel": {
        "description": "Advanced Configuration Settings",
        "properties": {
          "advancedSettingId": {
            "description": "AdvancedSettingId",
            "type": "integer",
            "format": "int32"
          },
          "settingName": {
            "description": "SettingName",
            "type": "string"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LicenseModel": {
        "description": "License Keys",
        "properties": {
          "description": {
            "description": "License Description (read-only)",
            "type": "string"
          },
          "licenseKey": {
            "description": "License Key",
            "type": "string"
          },
          "licenseName": {
            "description": "License Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationSshCommandExportModel": {
        "description": "SSH Command configuration",
        "properties": {
          "sshCommandBlocklists": {
            "description": "SshCommandBlocklists",
            "items": {
              "$ref": "#/components/schemas/SshCommandBlocklistModel"
            },
            "type": "array"
          },
          "sshCommandMenuMaps": {
            "description": "SshCommandMenuMaps",
            "items": {
              "$ref": "#/components/schemas/ConfigurationSshCommandMenuMapModel"
            },
            "type": "array"
          },
          "sshCommandMenus": {
            "description": "SshCommandMenus",
            "items": {
              "$ref": "#/components/schemas/ConfigurationSshCommandMenuModel"
            },
            "type": "array"
          },
          "sshCommands": {
            "description": "SshCommands",
            "items": {
              "$ref": "#/components/schemas/SshCommandModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SshCommandBlocklistModel": {
        "description": "SSH command Blocklist",
        "properties": {
          "active": {
            "description": "Active / inactive",
            "type": "boolean"
          },
          "description": {
            "description": "SSH command Blocklist description",
            "type": "string"
          },
          "name": {
            "description": "SSH command Blocklist name",
            "type": "string"
          },
          "sshCommandBlocklistId": {
            "description": "SSH command Blocklist ID",
            "type": "string",
            "format": "uuid"
          },
          "sshCommands": {
            "description": "SSH commands in Blocklist",
            "items": {
              "$ref": "#/components/schemas/SshCommandModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SshCommandModel": {
        "description": "SSH Command",
        "properties": {
          "command": {
            "description": "SSH command",
            "type": "string"
          },
          "commandPermissionType": {
            "$ref": "#/components/schemas/CommandPermissionType"
          },
          "name": {
            "description": "SSH command name",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort order",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandGuid": {
            "description": "SSH command Guid",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandId": {
            "description": "SSH command ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "CommandPermissionType": {
        "description": "Allowed or Blocked",
        "properties": {},
        "type": "string",
        "enum": [
          "Allowed",
          "Blocked"
        ]
      },
      "ConfigurationSshCommandMenuMapModel": {
        "description": "SshCommandMenuMaps",
        "properties": {
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandGuid": {
            "description": "SshCommandGuid",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandMenuGuid": {
            "description": "SshCommandMenuGuid",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "ConfigurationSshCommandMenuModel": {
        "description": "SshCommandMenus",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "sshCommandMenuGuid": {
            "description": "SshCommandMenuGuid",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandMenuId": {
            "description": "SshCommandMenuId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationTicketSystemModel": {
        "description": "List of Ticket Systems",
        "properties": {
          "ticketSystemList": {
            "description": "List of Ticket Systems",
            "items": {
              "$ref": "#/components/schemas/TicketSystemModelV2"
            },
            "type": "array"
          },
          "warnings": {
            "$ref": "#/components/schemas/DictionaryOfStringAndString"
          }
        },
        "type": "object"
      },
      "TicketSystemModelV2": {
        "description": "List of Ticket Systems",
        "properties": {
          "active": {
            "description": "Ticket System Active status",
            "type": "boolean"
          },
          "addCommentsToTicket": {
            "description": "Send comment to your integrated Ticket System and add it to the incident or change request.",
            "type": "boolean"
          },
          "bmcChangeManagementCommentWorkType": {
            "description": "BMC Remedy Incident Management integration only.  Select work type for comments added.",
            "type": "string"
          },
          "bmcIncidentManagementCommentWorkType": {
            "description": "BMC Remedy Incident Management integration only.  Select work type for comments added.",
            "type": "string"
          },
          "bmcRemedyAuthentication": {
            "description": "BMC Remedy integration only. Authentication value that usually represents a login server.",
            "type": "string"
          },
          "bmcRemedyUrlEndpoint": {
            "description": "BMC Remedy integration only.  The SOAP URL endpoint for the BMC Remedy Incident or Change Management.  Should be the CHG_ChangeInterface_WS or HPD_IncidentInterface_WS endpoint.",
            "type": "string"
          },
          "description": {
            "description": "Ticket System Description",
            "type": "string"
          },
          "displayMessage": {
            "description": "Ticket System Ticket Title",
            "type": "string"
          },
          "forceRequireTicketNumber": {
            "$ref": "#/components/schemas/ForceRequireTicketSystemOptions"
          },
          "isDefault": {
            "description": "Indicates the Ticket System is the default choice.",
            "type": "boolean"
          },
          "name": {
            "description": "Ticket System Name",
            "type": "string"
          },
          "organizationId": {
            "description": "Ticket System Organization Id",
            "type": "integer",
            "format": "int32"
          },
          "powerShellAddCommentScriptArguments": {
            "description": "PowerShell integration only.  Optional arguments for the comment script.  Arguemnts are separated by a space.",
            "type": "string"
          },
          "powerShellAddCommentScriptId": {
            "description": "PowerShell integration only.  Custom PowerSHell script to add a comment to a ticket system.",
            "type": "integer",
            "format": "int32"
          },
          "powerShellAddTicketCommentScriptArguments": {
            "description": "PowerShell integration only.  Optional arguments for the ticket comment script.  Arguemnts are separated by a space.",
            "type": "string"
          },
          "powerShellAddTicketCommentScriptId": {
            "description": "PowerShell integration only.  Custom PowerSHell script to add a comment to a ticket in a ticket system.",
            "type": "integer",
            "format": "int32"
          },
          "powerShellRunAsAccountSecretId": {
            "description": "PowerShell integration only.  Secret Id for credentials to use to run the Powershell.",
            "type": "integer",
            "format": "int32"
          },
          "powerShellTicketStatusScriptArguments": {
            "description": "PowerShell integration only.  Optional arguments for the ticket status script.  Arguemnts are separated by a space.",
            "type": "string"
          },
          "powerShellTicketStatusScriptId": {
            "description": "Powreshell Integration only.  Custom PowerShell script to get the ticket status.",
            "type": "integer",
            "format": "int32"
          },
          "serviceNowAllowedStatuses": {
            "description": "ServiceNow integration only.  Statuses to accept from ServiceNow separated by commas.",
            "type": "string"
          },
          "serviceNowDomainName": {
            "description": "ServiceNow integration only. The domain name that hosts the RESTful web services for Ticket System integration.",
            "type": "string"
          },
          "siteId": {
            "description": "Ticket System Site",
            "type": "integer",
            "format": "int32"
          },
          "systemCredentialSecretId": {
            "description": "Privilged Secret Id for credentials to connect to integrated Ticket Systems.",
            "type": "integer",
            "format": "int32"
          },
          "ticketNumberErrorMessage": {
            "description": "Ticket Number Validation Error Message",
            "type": "string"
          },
          "ticketNumberValidation": {
            "description": "Ticket Number Validation Regex",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "The unique Id of the ticket system.",
            "type": "integer",
            "format": "int32"
          },
          "ticketSystemType": {
            "$ref": "#/components/schemas/TicketSystemTypes"
          },
          "viewTicketUrl": {
            "description": "Ticket System URL pattern",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretServerSettingsImportCapabilitiesArgs": {
        "description": "SecretServerSettingsImportCapabilitiesArgs",
        "properties": {
          "file": {
            "description": "File",
            "type": "string"
          },
          "isImport": {
            "description": "IsImport",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretServerSettingsImportCapabilityModel": {
        "description": "SecretServerSettingsImportCapabilityModel",
        "properties": {
          "advancedSettings": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationAdvancedModelArray"
          },
          "applicationSettings": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationApplicationSettingsModel"
          },
          "configurationVersion": {
            "description": "Export Configuration Version",
            "type": "string"
          },
          "email": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationEmailModel"
          },
          "externalInstanceId": {
            "description": "ID for specific instance",
            "type": "string",
            "format": "uuid"
          },
          "folderSettings": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationFoldersModel"
          },
          "launcherSettings": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationLauncherSettingsModel"
          },
          "licenses": {
            "$ref": "#/components/schemas/ViewFieldValueOfLicenseModelArray"
          },
          "localUserPasswords": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationLocalUserPasswordsModel"
          },
          "login": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationLoginModel"
          },
          "permissionOptions": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationPermissionOptionsModel"
          },
          "protocolHandlerSettings": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationProtocolHandlerSettingsModel"
          },
          "saml": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationSamlModel"
          },
          "security": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationSecurityModel"
          },
          "sessionRecording": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationSessionRecordingModel"
          },
          "sshCommands": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationSshCommandExportModel"
          },
          "ticketSystem": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationTicketSystemModel"
          },
          "userExperience": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationUserExperienceModel"
          },
          "userInterface": {
            "$ref": "#/components/schemas/ViewFieldValueOfConfigurationUserInterfaceModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationApplicationSettingsModel": {
        "description": "Application Settings configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationApplicationSettingsModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationEmailModel": {
        "description": "Email configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationEmailModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationFoldersModel": {
        "description": "Folder configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationFoldersModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationLauncherSettingsModel": {
        "description": "Launcher Settings configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationLauncherSettingsModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationLocalUserPasswordsModel": {
        "description": "Local User Password configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationLocalUserPasswordsModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationLoginModel": {
        "description": "Login configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationLoginModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationPermissionOptionsModel": {
        "description": "Permission Options configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationPermissionOptionsModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationProtocolHandlerSettingsModel": {
        "description": "Protocol Handler Settings configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationProtocolHandlerSettingsModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationSamlModel": {
        "description": "SAML configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationSamlModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationSecurityModel": {
        "description": "Security configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationSecurityModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationSessionRecordingModel": {
        "description": "Session Recording configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationSessionRecordingModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationSshCommandExportModel": {
        "description": "SSH Command configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationSshCommandExportModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationTicketSystemModel": {
        "description": "Ticket System configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationTicketSystemModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationUserExperienceModel": {
        "description": "User Experience configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationUserExperienceModel"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationUserInterfaceModel": {
        "description": "User Interface configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "$ref": "#/components/schemas/ConfigurationUserInterfaceModel"
          }
        },
        "type": "object"
      },
      "SecretServerSettingsImportArgs": {
        "description": "SecretServerSettingsImportArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretServerSettingsPatchModel"
          },
          "filter": {
            "$ref": "#/components/schemas/SecretServerSettingsQuery"
          }
        },
        "type": "object"
      },
      "SecretServerSettingsPatchModel": {
        "description": "Data",
        "properties": {
          "advancedSettings": {
            "description": "Advanced Configuration Settings",
            "items": {
              "$ref": "#/components/schemas/ConfigurationAdvancedUpdateArgs"
            },
            "type": "array"
          },
          "applicationSettings": {
            "$ref": "#/components/schemas/ConfigurationApplicationSettingsPatchModel"
          },
          "configurationVersion": {
            "description": "Export Configuration Version",
            "type": "string"
          },
          "email": {
            "$ref": "#/components/schemas/ConfigurationEmailPatchModel"
          },
          "externalInstanceId": {
            "description": "ID for specific instance",
            "type": "string",
            "format": "uuid"
          },
          "folderSettings": {
            "$ref": "#/components/schemas/ConfigurationFoldersPatchModel"
          },
          "launcherSettings": {
            "$ref": "#/components/schemas/ConfigurationLauncherSettingsPatchModel"
          },
          "licenses": {
            "description": "Licenses (on-perm only)",
            "items": {
              "$ref": "#/components/schemas/LicenseModel"
            },
            "type": "array"
          },
          "localUserPasswords": {
            "$ref": "#/components/schemas/ConfigurationLocalPasswordPatchModel"
          },
          "login": {
            "$ref": "#/components/schemas/ConfigurationLoginPatchModel"
          },
          "permissionOptions": {
            "$ref": "#/components/schemas/ConfigurationPermissionOptionsPatchModel"
          },
          "protocolHandlerSettings": {
            "$ref": "#/components/schemas/ConfigurationProtocolHandlerSettingsPatchModel"
          },
          "saml": {
            "$ref": "#/components/schemas/ConfigurationSamlPatchModel"
          },
          "security": {
            "$ref": "#/components/schemas/ConfigurationSecurityPatchModel"
          },
          "sessionRecording": {
            "$ref": "#/components/schemas/ConfigurationSessionRecordingPatchModel"
          },
          "sshCommands": {
            "$ref": "#/components/schemas/ConfigurationSshCommandImportModel"
          },
          "ticketSystem": {
            "$ref": "#/components/schemas/ConfigurationTicketSystemListCreateOrPatchModel"
          },
          "userExperience": {
            "$ref": "#/components/schemas/ConfigurationUserExperiencePatchModel"
          },
          "userInterface": {
            "$ref": "#/components/schemas/ConfigurationUserInterfacePatchModel"
          }
        },
        "type": "object"
      },
      "ConfigurationAdvancedUpdateArgs": {
        "description": "Advanced Configuration Settings",
        "required": [
          "advancedSettingId"
        ],
        "properties": {
          "advancedSettingId": {
            "description": "Setting Id",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Setting Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigurationLoginPatchModel": {
        "description": "Login Configuration",
        "properties": {
          "allowAutoComplete": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "allowRememberMe": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "cacheADCredentials": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "defaultLoginDomain": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "enableDomainSelector": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "enableLoginFailureCAPTCHA": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "maxConcurrentLoginsPerUser": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "maximumLoginFailures": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "maxLoginFailuresBeforeCAPTCHA": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "rememberMeTimeOutMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "sshKeyIntegration": {
            "$ref": "#/components/schemas/ConfigurationLoginSshKeyIntegrationPatchModel"
          },
          "twoFactor": {
            "$ref": "#/components/schemas/ConfigurationLoginTwoFactorPatchModel"
          },
          "userLockoutTimeMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "visualEncryptedKeyboardEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "visualEncryptedKeyboardRequired": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "ConfigurationSshCommandImportModel": {
        "description": "SSH Commands configuration",
        "properties": {
          "sshCommandBlocklists": {
            "description": "SshCommandBlocklists",
            "items": {
              "$ref": "#/components/schemas/SshCommandBlocklistPatchModel"
            },
            "type": "array"
          },
          "sshCommandMenuMaps": {
            "description": "SshCommandMenuMaps",
            "items": {
              "$ref": "#/components/schemas/ConfigurationSshCommandMenuMapModel"
            },
            "type": "array"
          },
          "sshCommandMenus": {
            "description": "SshCommandMenus",
            "items": {
              "$ref": "#/components/schemas/ConfigurationSshCommandMenuModel"
            },
            "type": "array"
          },
          "sshCommands": {
            "description": "SshCommands",
            "items": {
              "$ref": "#/components/schemas/SshCommandPatchModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SshCommandBlocklistPatchModel": {
        "description": "SshCommandBlocklists",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sshCommandBlocklistId": {
            "description": "SshCommandBlocklistId",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfGuidArray"
          }
        },
        "type": "object"
      },
      "SshCommandPatchModel": {
        "description": "SshCommands",
        "properties": {
          "command": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "sshCommandGuid": {
            "description": "SshCommandGuid",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandId": {
            "description": "SshCommandId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ConfigurationTicketSystemListCreateOrPatchModel": {
        "description": "Ticket Systems Configuration",
        "properties": {
          "ticketSystemList": {
            "description": "TicketSystemList",
            "items": {
              "$ref": "#/components/schemas/TicketSystemPatchModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretServerSettingsQuery": {
        "description": "Filter",
        "properties": {
          "loadAdvancedSettings": {
            "description": "LoadAdvancedSettings",
            "type": "boolean"
          },
          "loadAll": {
            "description": "LoadAll",
            "type": "boolean"
          },
          "loadApplicationSettings": {
            "description": "LoadApplicationSettings",
            "type": "boolean"
          },
          "loadEmail": {
            "description": "LoadEmail",
            "type": "boolean"
          },
          "loadFolderSettings": {
            "description": "LoadFolderSettings",
            "type": "boolean"
          },
          "loadLauncherSettings": {
            "description": "LoadLauncherSettings",
            "type": "boolean"
          },
          "loadLicenses": {
            "description": "LoadLicenses",
            "type": "boolean"
          },
          "loadLocalUserPasswords": {
            "description": "LoadLocalUserPasswords",
            "type": "boolean"
          },
          "loadLogin": {
            "description": "LoadLogin",
            "type": "boolean"
          },
          "loadPermissionOptions": {
            "description": "LoadPermissionOptions",
            "type": "boolean"
          },
          "loadProtocolHandlerSettings": {
            "description": "LoadProtocolHandlerSettings",
            "type": "boolean"
          },
          "loadSaml": {
            "description": "LoadSaml",
            "type": "boolean"
          },
          "loadSecurity": {
            "description": "LoadSecurity",
            "type": "boolean"
          },
          "loadSessionRecording": {
            "description": "LoadSessionRecording",
            "type": "boolean"
          },
          "loadSshCommands": {
            "description": "LoadSshCommands",
            "type": "boolean"
          },
          "loadTicketSystem": {
            "description": "LoadTicketSystem",
            "type": "boolean"
          },
          "loadUserExperience": {
            "description": "LoadUserExperience",
            "type": "boolean"
          },
          "loadUserInterface": {
            "description": "LoadUserInterface",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretServerSettingsImportResultModel": {
        "description": "Secret Server Settings import results",
        "properties": {
          "errors": {
            "$ref": "#/components/schemas/DictionaryOfStringAndString"
          },
          "secretServerSettings": {
            "$ref": "#/components/schemas/SecretServerSettingsModel"
          },
          "warnings": {
            "$ref": "#/components/schemas/DictionaryOfStringAndString"
          }
        },
        "type": "object"
      },
      "PagingOfSecretSessionSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretSessionSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretSessionSummary": {
        "description": "Recorded session summary",
        "properties": {
          "accessedByName": {
            "description": "AccessedByName",
            "type": "string"
          },
          "active": {
            "description": "Whether the recorded session is active",
            "type": "boolean"
          },
          "auditSecretId": {
            "description": "Associated access audit record",
            "type": "integer",
            "format": "int32"
          },
          "duration": {
            "description": "Duration of recorded session, in seconds",
            "type": "integer",
            "format": "int32"
          },
          "endDate": {
            "description": "Recorded session end time",
            "type": "string",
            "format": "date-time"
          },
          "endDateDisplay": {
            "description": "Recorded session end time (display format)",
            "type": "string"
          },
          "errorMessage": {
            "description": "Processing error message",
            "type": "string"
          },
          "fileExtension": {
            "description": "FileExtension",
            "type": "string"
          },
          "hasKeyStrokes": {
            "description": "Whether the recorded session has logged keystrokes",
            "type": "boolean"
          },
          "hasProcesses": {
            "description": "Whether the recorded session has info about running processes",
            "type": "boolean"
          },
          "hasProcessingError": {
            "description": "Whether an error occurred during video processing",
            "type": "boolean"
          },
          "isDeleted": {
            "description": "Whether the recorded session has been deleted",
            "type": "boolean"
          },
          "isLauncher": {
            "description": "IsLauncher",
            "type": "boolean"
          },
          "launchedSuccessfully": {
            "description": "Whether the session reached a state where it was active and not expired and had no other errors",
            "type": "boolean"
          },
          "launcherName": {
            "description": "Launcher name",
            "type": "string"
          },
          "launcherSessionGuid": {
            "description": "Launcher session unique identifier",
            "type": "string",
            "format": "uuid"
          },
          "launcherSessionStatus": {
            "description": "LauncherSessionStatus",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeId": {
            "description": "Launcher type",
            "type": "integer",
            "format": "int32"
          },
          "machineName": {
            "description": "Machine name",
            "type": "string"
          },
          "matchingSearchTypes": {
            "description": "MatchingSearchTypes",
            "type": "string"
          },
          "pbaId": {
            "description": "PbaId",
            "type": "integer",
            "format": "int64"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "Secret name",
            "type": "string"
          },
          "secretSessionId": {
            "description": "Recorded session ID",
            "type": "integer",
            "format": "int32"
          },
          "secretSessionUserName": {
            "description": "Recorded session username",
            "type": "string"
          },
          "sessionMovieProcessComplete": {
            "description": "Whether video processing is complete",
            "type": "boolean"
          },
          "startDate": {
            "description": "Recorded session start time",
            "type": "string",
            "format": "date-time"
          },
          "startDateDisplay": {
            "description": "Recorded session start time (display format)",
            "type": "string"
          },
          "userDomainName": {
            "description": "Active Directory domain name",
            "type": "string"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          },
          "userNameForDisplay": {
            "description": "Recorded session username (display format)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretSessionModel": {
        "description": "Recorded session",
        "properties": {
          "accessedByName": {
            "description": "AccessedByName",
            "type": "string"
          },
          "active": {
            "description": "Whether the recorded session is active",
            "type": "boolean"
          },
          "auditSecretId": {
            "description": "Associated access audit record",
            "type": "integer",
            "format": "int32"
          },
          "duration": {
            "description": "Duration of recorded session, in seconds",
            "type": "integer",
            "format": "int32"
          },
          "endDate": {
            "description": "Recorded session end time",
            "type": "string",
            "format": "date-time"
          },
          "endDateDisplay": {
            "description": "Recorded session end time (display format)",
            "type": "string"
          },
          "errorMessage": {
            "description": "Processing error message",
            "type": "string"
          },
          "fileExtension": {
            "description": "FileExtension",
            "type": "string"
          },
          "hasKeyStrokes": {
            "description": "Whether the recorded session has logged keystrokes",
            "type": "boolean"
          },
          "hasProcesses": {
            "description": "Whether the recorded session has info about running processes",
            "type": "boolean"
          },
          "hasProcessingError": {
            "description": "Whether an error occurred during video processing",
            "type": "boolean"
          },
          "isDeleted": {
            "description": "Whether the recorded session has been deleted",
            "type": "boolean"
          },
          "isLauncher": {
            "description": "IsLauncher",
            "type": "boolean"
          },
          "launchedSuccessfully": {
            "description": "Whether the session reached a state where it was active and not expired and had no other errors",
            "type": "boolean"
          },
          "launcherName": {
            "description": "LauncherName",
            "type": "string"
          },
          "launcherSessionGuid": {
            "description": "Launcher session unique identifier",
            "type": "string",
            "format": "uuid"
          },
          "launcherSessionStatus": {
            "description": "LauncherSessionStatus",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeId": {
            "description": "Launcher type",
            "type": "integer",
            "format": "int32"
          },
          "machineName": {
            "description": "Machine name",
            "type": "string"
          },
          "matchingSearchTypes": {
            "description": "MatchingSearchTypes",
            "type": "string"
          },
          "pbaId": {
            "description": "Pba Event Id if session was caused by an access challenge",
            "type": "integer",
            "format": "int64"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "secretName": {
            "description": "Secret name",
            "type": "string"
          },
          "secretSessionId": {
            "description": "Recorded session ID",
            "type": "integer",
            "format": "int32"
          },
          "secretSessionUserName": {
            "description": "User name from the recorded session",
            "type": "string"
          },
          "sessionMovieProcessComplete": {
            "description": "Whether video processing is complete",
            "type": "boolean"
          },
          "startDate": {
            "description": "Recorded session start time",
            "type": "string",
            "format": "date-time"
          },
          "startDateDisplay": {
            "description": "Recorded session start time (display format)",
            "type": "string"
          },
          "userDomainName": {
            "description": "Active Directory domain name",
            "type": "string"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          },
          "userNameForDisplay": {
            "description": "Display name for user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSecretSessionPointOfInterestModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretSessionPointOfInterestModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretSessionPointOfInterestModel": {
        "description": "Recorded session point of interest",
        "properties": {
          "activityDetails": {
            "description": "ActivityDetails",
            "type": "string"
          },
          "activityTitle": {
            "description": "ActivityTitle",
            "type": "string"
          },
          "activityType": {
            "$ref": "#/components/schemas/SecretSessionActivityType"
          },
          "activityTypeDisplayName": {
            "description": "Logged activity type (display format)",
            "type": "string"
          },
          "icon": {
            "description": "Icon",
            "type": "string"
          },
          "launcherSessionGuid": {
            "description": "Launcher session unique identifier",
            "type": "string",
            "format": "uuid"
          },
          "secretId": {
            "description": "Secret ID",
            "type": "integer",
            "format": "int32"
          },
          "secretSessionId": {
            "description": "Recorded session ID",
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "description": "Point of interest timestamp",
            "type": "string",
            "format": "date-time"
          },
          "timestampOffset": {
            "description": "Time since session start",
            "type": "string",
            "format": "time-span"
          },
          "timestampOffsetDisplay": {
            "description": "Time since session start (display format)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretSessionActivityType": {
        "description": "Logged activity type",
        "properties": {},
        "type": "string",
        "enum": [
          "SshKeyStroke",
          "ApplicationStartedOrExisting",
          "ApplicationEnd",
          "Keystroke",
          "Image",
          "ApplicationMadeActive"
        ]
      },
      "PagingOfISecretSessionPointOfInterestSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/ISecretSessionPointOfInterestSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "ISecretSessionPointOfInterestSummaryModel": {
        "description": "Query results",
        "properties": {
          "activityTypeGroup": {
            "description": "ActivityTypeGroup",
            "type": "string"
          },
          "launcherSessionGuid": {
            "description": "LauncherSessionGuid",
            "type": "string",
            "format": "uuid"
          },
          "score": {
            "description": "Score",
            "type": "integer",
            "format": "int32"
          },
          "secondsFromStart": {
            "description": "SecondsFromStart",
            "type": "integer",
            "format": "int64"
          },
          "timestampOffset": {
            "description": "TimestampOffset",
            "type": "string",
            "format": "time-span"
          }
        },
        "type": "object"
      },
      "StreamContentResult": {
        "description": "StreamContentResult",
        "properties": {},
        "type": "object"
      },
      "PagingOfSecretTemplateGroupedPermissionSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateGroupedPermissionSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateGroupedPermissionSummary": {
        "description": "Secret templates with assigned permissions",
        "properties": {
          "assignments": {
            "description": "All of the specific users and groups assigned to this template",
            "items": {
              "$ref": "#/components/schemas/SecretTemplatePermissionAssignmentSummary"
            },
            "type": "array"
          },
          "roleId": {
            "description": "The ID of the role assigned",
            "type": "integer",
            "format": "int32"
          },
          "roleName": {
            "description": "The name of the role assigned",
            "type": "string"
          },
          "secretTypeId": {
            "description": "Secret templates with assigned permissions. NULL if all templates",
            "type": "integer",
            "format": "int32"
          },
          "secretTypeName": {
            "description": "Secret Template Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplatePermissionAssignmentSummary": {
        "description": "aaaa",
        "properties": {
          "directlyAssigned": {
            "description": "When the group is a personal group this permission is directly assigned to that user.",
            "type": "boolean"
          },
          "groupId": {
            "description": "Group ID assigned for this permission.  Either an actual group or personal group ID.",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "The name of the group that is assigned",
            "type": "string"
          },
          "userDisplayName": {
            "description": "The user display name, only populated when directly assigned",
            "type": "string"
          },
          "userId": {
            "description": "The user ID, only populated when directly assigned",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSecretTemplateGroupSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateGroupSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateGroupSummary": {
        "description": "Secret Template Group Summary",
        "properties": {
          "displayName": {
            "description": "Display Name",
            "type": "string"
          },
          "displayNameWithDomain": {
            "description": "Display Name with Domain",
            "type": "string"
          },
          "domainName": {
            "description": "Domain Name",
            "type": "string"
          },
          "groupId": {
            "description": "Group Id",
            "type": "integer",
            "format": "int32"
          },
          "isPersonal": {
            "description": "Is Personal",
            "type": "boolean"
          },
          "secretTypeAccessRoleId": {
            "description": "Secret Type Access Role Id",
            "type": "integer",
            "format": "int32"
          },
          "secretTypeId": {
            "description": "Secret Type Id",
            "type": "integer",
            "format": "int32"
          },
          "secretTypeName": {
            "description": "Secret Type Name",
            "type": "string"
          },
          "userId": {
            "description": "If it is a personal group, the user id of the user",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplatePermissionsUpdateArgs": {
        "description": "SecretTemplatePermissionsUpdateArgs",
        "properties": {
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "permissions": {
            "description": "Permissions",
            "items": {
              "$ref": "#/components/schemas/PermissionModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PermissionModel": {
        "description": "Permissions",
        "properties": {
          "roleId": {
            "description": "RoleId",
            "type": "integer",
            "format": "int32"
          },
          "secretTypeId": {
            "description": "SecretTypeId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplatePermissionModel": {
        "description": "Secret template",
        "properties": {
          "id": {
            "description": "Secret template ID",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Secret template name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplatePermissionRole": {
        "description": "SecretTemplatePermissionRole[]",
        "properties": {
          "roleId": {
            "description": "The ID of the role",
            "type": "integer",
            "format": "int32"
          },
          "roleName": {
            "description": "The name of the role",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplateTypePermissionsUpdateArgs": {
        "description": "SecretTemplateTypePermissionsUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateTypePermissionsUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateTypePermissionsUpdateModel": {
        "description": "Data",
        "properties": {
          "permissions": {
            "description": "Permissions",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateTypePermissionsUpdateGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretTemplateTypePermissionsUpdateGroup": {
        "description": "Permissions",
        "properties": {
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "roleId": {
            "description": "RoleId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateTypePermissionsUpdateResponse": {
        "description": "SecretTemplateTypePermissionsUpdateResponse",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingModel": {
        "description": "Secret Template Extended Mapping Model",
        "properties": {
          "extendedTypeDescription": {
            "description": "A localizaed description for this extended type",
            "type": "string"
          },
          "extendedTypeId": {
            "description": "Extended Type ID",
            "type": "integer",
            "format": "int32"
          },
          "extendedTypeName": {
            "description": "A localizaed name for this extended type",
            "type": "string"
          },
          "fields": {
            "description": "Array of extended fields for the extended mapping",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateExtendedMappingFieldModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingFieldModel": {
        "description": "Secret Template Extended Mapping Field Model",
        "properties": {
          "extendedFieldId": {
            "description": "Id of the Extended Field",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldId": {
            "description": "Id of the Secret Template Field",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldName": {
            "description": "Secret Field Name of the mapped Secret Template Extended Field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingCreateArgs": {
        "description": "SecretTemplateExtendedMappingCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateExtendedMappingCreateModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingCreateModel": {
        "description": "Data",
        "properties": {
          "fields": {
            "description": "Fields",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateExtendedMappingCreateFieldModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingCreateFieldModel": {
        "description": "Fields",
        "properties": {
          "extendedFieldId": {
            "description": "ExtendedFieldId",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldId": {
            "description": "SecretFieldId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingDeleteResponseModel": {
        "description": "SecretTemplateExtendedMappingDeleteResponseModel",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingUpdateArgs": {
        "description": "SecretTemplateExtendedMappingUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateExtendedMappingUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingUpdateModel": {
        "description": "Data",
        "properties": {
          "fields": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretTemplateExtendedMappingUpdateFieldModelArray"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingUpdateFieldModel": {
        "description": "Value",
        "properties": {
          "extendedFieldId": {
            "description": "ExtendedFieldId",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldId": {
            "description": "SecretFieldId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherModel": {
        "description": "Secret Template Launcher Model",
        "properties": {
          "allowList": {
            "description": "User can select from values in this list",
            "type": "integer",
            "format": "int32"
          },
          "connectAsCommand": {
            "description": "This command is used after a PuTTy session is launched on a Secret that has SSH Proxy enabled and has a Secret set under 'Connect As' in the Launcher tab. The default su command is 'su - $USERNAME'. $USERNAME is the token used to retrieve the username field from the Secret. Sudo can also be used by specifying 'sudo -u $USERNAME /bin/bash'.",
            "type": "string"
          },
          "connectAsCommandResponse": {
            "description": "The Connect As Command Response is the response from the server prompting for a password. This is used so $productName knows when to send the password to the system. If the response from the server after typing 'su - root' is 'Password:' then the Connect As Command Response needs to contain 'Password:$PASSWORD'. The $CONNECTASPASSWORD token will use the credentials from the Secret set under 'Connect As' when prompted.",
            "type": "string"
          },
          "denyList": {
            "description": "User cannot enter these values. If used with an Allow List, the Deny List will take precedence.",
            "type": "integer",
            "format": "int32"
          },
          "fields": {
            "description": "Fields that can be mapped to this launcher",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateLauncherFieldValueModel"
            },
            "type": "array"
          },
          "includeMachinesFromDependencies": {
            "description": "This will add the list of machine names from the secret dependencies to either the allow list or block list.",
            "type": "boolean"
          },
          "launcherTypeId": {
            "description": "Unique ID for Launcher Type",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeName": {
            "description": "Name for Launcher Type",
            "type": "string"
          },
          "lineEnding": {
            "description": "The line ending that will be append to the end of the Connect As Command. This needs to match the type of line ending required by the system being proxied to.",
            "type": "string"
          },
          "restrictAs": {
            "description": "Restrict what can be selected to come from a list, only allow certain fields, or only deny certain fields.",
            "type": "integer",
            "format": "int32"
          },
          "restrictBySecretField": {
            "description": "Select a field that will contain the list of items that will restrict the input.",
            "type": "integer",
            "format": "int32"
          },
          "restrictUserInput": {
            "description": "You may specify a field of comma separated hosts or IP addresses that the user will be restricted to. The allow list will allow only these values, while the block list will allow all values except the hosts on the Secret Field.  Example: 192.168.1.2, MACHINE.EXAMPLE.COM, 192.168.1.60",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherFieldValueModel": {
        "description": "Values for a launcher that is associated to a secret template",
        "properties": {
          "defaultType": {
            "description": "What is the default type if allowed",
            "type": "string"
          },
          "defaultTypeIntMax": {
            "description": "If the default type is int then a maximum number that can be entered",
            "type": "integer",
            "format": "int32"
          },
          "defaultTypeIntMin": {
            "description": "If the default type is int then a minimum number that can be entered",
            "type": "integer",
            "format": "int32"
          },
          "defaultValue": {
            "description": "Default value for this field on a specific template",
            "type": "string"
          },
          "launcherTypeFieldId": {
            "description": "Launcher Field Id",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeFieldName": {
            "description": "Launcher Field Name",
            "type": "string"
          },
          "promptableField": {
            "description": "Whether or not this field can be prompted for input",
            "type": "boolean"
          },
          "secretFieldId": {
            "description": "Id of the Secret Template Field",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldName": {
            "description": "Secret Field Name of the mapped Secret Template Extended Field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherCreateArgs": {
        "description": "SecretTemplateLauncherCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateLauncherCreateModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherCreateModel": {
        "description": "Create a launcher for a template",
        "properties": {
          "fields": {
            "description": "Mapping of secret template fields to launcher fields",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateLauncherCreateFieldModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherCreateFieldModel": {
        "description": "Mapping of launcher field to secret template field",
        "properties": {
          "defaultValue": {
            "description": "The default value to use for this field.  Note:  This is only an option if the launcher field allows default options.",
            "type": "string"
          },
          "launcherTypeFieldId": {
            "description": "The launcher field id that is being mapped",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldId": {
            "description": "Which secret field this should map to",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherDeleteResultModel": {
        "description": "Delete result message",
        "properties": {
          "success": {
            "description": "True if process has succeeded",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherUpdateArgs": {
        "description": "SecretTemplateLauncherUpdateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateLauncherUpdateModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherUpdateModel": {
        "description": "Update mapping values between secret template and launcher",
        "properties": {
          "allowList": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "connectAsCommand": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "connectAsCommandResponse": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "connectAsTimeoutInSeconds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "denyList": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "expectedPromptEnding": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "fields": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretTemplateLauncherFieldValueModelArray"
          },
          "includeMachinesFromDependencies": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "lineEnding": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalLauncherConnectAsLineEnding"
          },
          "restrictAs": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "restrictBySecretField": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "restrictUserInput": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfOptionalLauncherConnectAsLineEnding": {
        "description": "The line ending that will be append to the end of the Connect As Command. This needs to match the type of line ending required by the system being proxied to.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSecretTemplateSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateCreateArgs": {
        "description": "SecretTemplateCreateArgs",
        "properties": {
          "fields": {
            "description": "Secret Template Fields",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateFieldCreateArgs"
            },
            "type": "array"
          },
          "name": {
            "description": "Secret Template Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldCreateArgs": {
        "description": "Secret Template Field Create Args",
        "properties": {
          "description": {
            "description": "Field description",
            "type": "string"
          },
          "displayName": {
            "description": "Field display name",
            "type": "string"
          },
          "editablePermission": {
            "description": "Who has editing rights",
            "type": "integer",
            "format": "int32"
          },
          "editRequires": {
            "$ref": "#/components/schemas/EditRequiresOptions"
          },
          "fieldSlugName": {
            "description": "Field Slug Name",
            "type": "string"
          },
          "generatePasswordCharacterSet": {
            "description": "Generate password character set. Only returned if user can manage secret templates",
            "type": "string"
          },
          "generatePasswordLength": {
            "description": "Generate password length.  Only returned if user can manage secret templates",
            "type": "integer",
            "format": "int32"
          },
          "hideOnView": {
            "description": "Hide this field when viewing",
            "type": "boolean"
          },
          "historyLength": {
            "description": "History length",
            "type": "integer",
            "format": "int32"
          },
          "isExpirationField": {
            "description": "Is expiration field",
            "type": "boolean"
          },
          "isFile": {
            "description": "Is this field a file type",
            "type": "boolean"
          },
          "isIndexable": {
            "description": "Is able to be indexed",
            "type": "boolean"
          },
          "isNotes": {
            "description": "Is this field a notes field type",
            "type": "boolean"
          },
          "isPassword": {
            "description": "Is this field a password field type",
            "type": "boolean"
          },
          "isRequired": {
            "description": "Is this field required",
            "type": "boolean"
          },
          "isUrl": {
            "description": "Is this field a url field type",
            "type": "boolean"
          },
          "listType": {
            "$ref": "#/components/schemas/ListType"
          },
          "mustEncrypt": {
            "description": "Must encrypt.  Only returned if user can manage secret templates",
            "type": "boolean"
          },
          "name": {
            "description": "Field name",
            "type": "string"
          },
          "passwordRequirementId": {
            "description": "ID For Password Requirement assigned to field",
            "type": "integer",
            "format": "int32"
          },
          "passwordTypeFieldId": {
            "description": "Type of password field",
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "description": "Sort Order for Field",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateExportModel": {
        "description": "Secret Template Export Model",
        "properties": {
          "exportFileText": {
            "description": "ExportFileText",
            "type": "string"
          },
          "fileName": {
            "description": "FileName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PasswordDictionaryModel": {
        "description": "PasswordDictionaryModel[]",
        "properties": {
          "id": {
            "description": "The dictionary ID",
            "type": "integer",
            "format": "int32"
          },
          "items": {
            "description": "A list of dictionary entries",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the dictionary",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AddPasswordDictionaryArgs": {
        "description": "AddPasswordDictionaryArgs",
        "properties": {
          "dictionaryName": {
            "description": "Dictionary Name",
            "type": "string"
          },
          "file": {
            "description": "Uploaded file",
            "type": "file"
          }
        },
        "type": "object"
      },
      "UpdatePasswordDictionaryArgs": {
        "description": "Update Password Dictionary Args",
        "properties": {
          "dictionaryId": {
            "description": "Dictionary ID to Update",
            "type": "integer",
            "format": "int32"
          },
          "dictionaryName": {
            "description": "Dictionary Name",
            "type": "string"
          },
          "file": {
            "description": "Uploaded file",
            "type": "file"
          }
        },
        "type": "object"
      },
      "PagingOfSecretTemplateExtendedTypeSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateExtendedTypeSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedTypeSummary": {
        "description": "Extended types can be mapped to secret templates for functionality that requires universal mapping of fields",
        "properties": {
          "extendedTypeDescription": {
            "description": "Description of extended type already localized for the current user",
            "type": "string"
          },
          "extendedTypeId": {
            "description": "Unique ID for extended type",
            "type": "integer",
            "format": "int32"
          },
          "extendedTypeName": {
            "description": "Name of extended type already localized for the current user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSecretTemplateExtendedMappingSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateExtendedMappingSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingSummary": {
        "description": "Extended Type Mapping Summary",
        "properties": {
          "extendedTypeDescription": {
            "description": "A brief description of this extended type",
            "type": "string"
          },
          "extendedTypeId": {
            "description": "ID for this extended type",
            "type": "integer",
            "format": "int32"
          },
          "extendedTypeName": {
            "description": "The name of this extended type",
            "type": "string"
          },
          "fields": {
            "description": "The fields that are mapped from the extended type to the secret template field",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateExtendedMappingFieldSummary"
            },
            "type": "array"
          },
          "secretTypeExtendedMapId": {
            "description": "A unique ID representing this mapping of Secret Template to Extended Type",
            "type": "integer",
            "format": "int32"
          },
          "secretTypeId": {
            "description": "Secret type / template ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateExtendedMappingFieldSummary": {
        "description": "The fields that are mapped from the extended type to the secret template field",
        "properties": {
          "extendedFieldId": {
            "description": "ExtendedFieldId",
            "type": "integer",
            "format": "int32"
          },
          "extendedFieldName": {
            "description": "ExtendedFieldName",
            "type": "string"
          },
          "extendedTypeId": {
            "description": "ExtendedTypeId",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldExtendedMapId": {
            "description": "SecretFieldExtendedMapId",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldId": {
            "description": "SecretFieldId",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldName": {
            "description": "SecretFieldName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfLauncherTypeSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/LauncherTypeSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "LauncherTypeSummary": {
        "description": "An available type of launcher",
        "properties": {
          "active": {
            "description": "Indicates if the launcher type is active or not",
            "type": "boolean"
          },
          "launcherTypeDescription": {
            "description": "Name of the launcher type",
            "type": "string"
          },
          "launcherTypeId": {
            "description": "Unique ID for a launcher",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeName": {
            "description": "Name of the launcher type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSecretTemplateLauncherSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateLauncherSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherSummary": {
        "description": "Summary model describing template to launcher mappings",
        "properties": {
          "allowListSecretFieldId": {
            "description": "The ID of the list to allow",
            "type": "integer",
            "format": "int32"
          },
          "connectAsCommand": {
            "description": "Connect as command",
            "type": "string"
          },
          "connectAsCommandResponse": {
            "description": "The expected response to get from the host on connect as",
            "type": "string"
          },
          "connectAsTimeoutInSeconds": {
            "description": "The amount of time, in seconds, that must elapse before a timeout occurs.",
            "type": "integer",
            "format": "int32"
          },
          "denyListSecretFieldId": {
            "description": "The ID of the list to deny",
            "type": "integer",
            "format": "int32"
          },
          "expectedPromptEnding": {
            "description": "The character used to mark the end of a prompt on a server, such as '$', '#', '%', and etc",
            "type": "string"
          },
          "fields": {
            "description": "Mapping of secret template fields to launch fields",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateLauncherFieldSummary"
            },
            "type": "array"
          },
          "launcherTypeDescription": {
            "description": "Detailed description of this launcher",
            "type": "string"
          },
          "launcherTypeId": {
            "description": "ID of this launcher",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeName": {
            "description": "Name of this launcher type",
            "type": "string"
          },
          "lineEnding": {
            "description": "Connect as command line ending to be sent",
            "type": "string"
          },
          "restrictHostDependencyMachines": {
            "description": "Use dependency hosts for restrictions",
            "type": "boolean"
          },
          "restrictHostSecretFieldId": {
            "description": "Restrict user input on a launcher mapping to values in this secret field",
            "type": "integer",
            "format": "int32"
          },
          "restrictHostType": {
            "description": "Restrict host type",
            "type": "integer",
            "format": "int32"
          },
          "restrictUserInput": {
            "description": "User input has restrictions to allow or deny specific entries",
            "type": "boolean"
          },
          "secretTypeId": {
            "description": "Secret Template ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateLauncherFieldSummary": {
        "description": "Includes both launcher field definition and mapped / values assigned for this secret template and launcher association",
        "properties": {
          "allowDefault": {
            "description": "Does this field allow a default value to be configured",
            "type": "boolean"
          },
          "defaultType": {
            "description": "Is AllowDefault is set, what is the type:  string or int",
            "type": "string"
          },
          "defaultTypeIntMax": {
            "description": "If DefaultType is int then what is the maximum int accepted",
            "type": "integer",
            "format": "int32"
          },
          "defaultTypeIntMin": {
            "description": "If DefaultType is int then what is the minimum int accepted",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeFieldId": {
            "description": "Unique ID for this launcher field mapping",
            "type": "integer",
            "format": "int32"
          },
          "launcherTypeId": {
            "description": "The launcher type ID",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name of the launcher field",
            "type": "string"
          },
          "promptableField": {
            "description": "Is this field one that can be prompted for user input",
            "type": "boolean"
          },
          "secretFieldDisplayName": {
            "description": "The secret field display name or if SecretFieldId is null this can be user input, blank, or a default value",
            "type": "string"
          },
          "secretFieldId": {
            "description": "The secret field ID that will be passed to the launcher",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplatePasswordTypeModel": {
        "description": "SecretTemplatePasswordTypeModel",
        "properties": {},
        "type": "object"
      },
      "SecretTemplatePasswordTypePatchArgs": {
        "description": "SecretTemplatePasswordTypePatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplatePasswordTypePatchModel"
          }
        },
        "type": "object"
      },
      "SecretTemplatePasswordTypePatchModel": {
        "description": "Data",
        "properties": {
          "defaultPrivilegedSecretId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "enableHeartbeat": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "enableRpc": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "fields": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretTemplatePasswordTypeFieldMappingUpdateModelArray"
          },
          "heartbeatIntervalDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "heartbeatIntervalHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "heartbeatIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "passwordTypeId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "rpcIntervalDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "rpcIntervalHours": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "rpcIntervalMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "rpcMaxAttempts": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          }
        },
        "type": "object"
      },
      "SecretTemplatePasswordTypeFieldMappingUpdateModel": {
        "description": "Value",
        "properties": {
          "passwordTypeFieldId": {
            "description": "PasswordTypeFieldId",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldId": {
            "description": "SecretFieldId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateDetailModel": {
        "description": "Secret template detail",
        "properties": {
          "active": {
            "description": "Is Secret Template active",
            "type": "boolean"
          },
          "description": {
            "description": "Secret Template Description",
            "type": "string"
          },
          "expirationChangeRequiredOnFieldId": {
            "description": "Secret Template Field Id that will require change on Expiration",
            "type": "integer",
            "format": "int32"
          },
          "expirationDays": {
            "description": "Expiration days, populated when ExpirationChangeRequiredOnFieldId is populated",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Secret Template Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Secret Template Name",
            "type": "string"
          },
          "namePattern": {
            "description": "Secret Template Name Pattern",
            "type": "string"
          },
          "namePatternErrorMessage": {
            "description": "Secret Template Name Pattern Error Message",
            "type": "string"
          },
          "oneTimePasswordDuration": {
            "description": "Duration in seconds that the One Time Password is valid, populated when one time password is enabled",
            "type": "integer",
            "format": "int32"
          },
          "oneTimePasswordEnabled": {
            "description": "One time password enabled",
            "type": "boolean"
          },
          "oneTimePasswordHash": {
            "description": "Hash to be used when generating the One Time Password, populated when one time password is enabled",
            "type": "string"
          },
          "oneTimePasswordLength": {
            "description": "Length of the generated One Time Password, populated when one time password is enabled",
            "type": "integer",
            "format": "int32"
          },
          "saveAllNameHistory": {
            "description": "Indicates that all Secret Name history will be saved. This will be reset if the SecretNameHistoryLength is updated.",
            "type": "boolean"
          },
          "secretCount": {
            "description": "The number of Secrets that use this template",
            "type": "integer",
            "format": "int32"
          },
          "secretNameHistoryLength": {
            "description": "The number of Secret Names to be saved. If SaveAllNameHistory is true, this will return null.",
            "type": "integer",
            "format": "int32"
          },
          "sshKeyFormat": {
            "description": "Format of the SSH Key, populated when the template contains a private SSH Key",
            "type": "string"
          },
          "sshKeySize": {
            "description": "Size of the SSH Key in bits, populated when the template contains a private SSH Key",
            "type": "string"
          },
          "validatePasswordRequirementsOnCreate": {
            "description": "Validate password requirements on create",
            "type": "boolean"
          },
          "validatePasswordRequirementsOnEdit": {
            "description": "Validate password requirements on edit",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretTemplateDetailPatchArgs": {
        "description": "SecretTemplateDetailPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateDetailPatchModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateDetailPatchModel": {
        "description": "Data",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "expirationChangeRequiredOnFieldId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "expirationDays": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "expirationEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "namePattern": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "namePatternErrorMessage": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "oneTimePasswordDuration": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "oneTimePasswordEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "oneTimePasswordHash": {
            "$ref": "#/components/schemas/UpdateFieldValueOfPasswordHashType"
          },
          "oneTimePasswordLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "saveAllNameHistory": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "secretNameHistoryLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "sshKeyFormat": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sshKeySize": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSshKeySizeType"
          },
          "validatePasswordRequirementsOnCreate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "validatePasswordRequirementsOnEdit": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfPasswordHashType": {
        "description": "Hash to be used when generating the One Time Password, updated when one time password is enabled",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/PasswordHashType"
          }
        },
        "type": "object"
      },
      "PasswordHashType": {
        "description": "Password Hash Type",
        "properties": {},
        "type": "string",
        "enum": [
          "SHA1",
          "SHA256",
          "SHA512"
        ]
      },
      "UpdateFieldValueOfSshKeySizeType": {
        "description": "Size of the SSH Key in bits, updated when the template contains a private SSH Key",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SshKeySizeType"
          }
        },
        "type": "object"
      },
      "SshKeySizeType": {
        "description": "SSH Key Size Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Key1024",
          "Key2048",
          "Key4096"
        ]
      },
      "PagingOfSecretTemplateFieldSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateFieldSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldSummaryModel": {
        "description": "Secret Template Field Summary Model",
        "properties": {
          "active": {
            "description": "Is this field active",
            "type": "boolean"
          },
          "description": {
            "description": "Description of Field",
            "type": "string"
          },
          "editRequiresPermission": {
            "description": "Type of permission required in order to edit this field",
            "type": "string"
          },
          "exposeForDisplay": {
            "description": "Is this field is exposed for display",
            "type": "boolean"
          },
          "historyLength": {
            "description": "Number of changes stored in history",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Field Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name of Field",
            "type": "string"
          },
          "required": {
            "description": "Is this field required",
            "type": "boolean"
          },
          "searchable": {
            "description": "Is this field searchable",
            "type": "boolean"
          },
          "slugName": {
            "description": "Slug Name of Field.",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort Order of the field used for display",
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "description": "Type of Field",
            "type": "string"
          },
          "viewingRequiresEdit": {
            "description": "Is edit permission required for viewing this field",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldModel": {
        "description": "Secret Template Field Model",
        "properties": {
          "active": {
            "description": "Is this field active",
            "type": "boolean"
          },
          "dataType": {
            "$ref": "#/components/schemas/FieldDataType"
          },
          "description": {
            "description": "Description of Field",
            "type": "string"
          },
          "dropdownOptions": {
            "description": "These values will appear as a drop down for text fields.",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateFieldOptionModel"
            },
            "type": "array"
          },
          "editRequiresPermission": {
            "$ref": "#/components/schemas/FieldPermissionType"
          },
          "exposeForDisplay": {
            "description": "Is this field is exposed for display",
            "type": "boolean"
          },
          "historyLength": {
            "description": "Number of changes stored in history. If SaveAllHistory is true, this will return null.",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "Field Id",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name of Field",
            "type": "string"
          },
          "passwordRequirement": {
            "description": "The Id of the Password Requirement if the data type is Password defaulting to the default Password Requirement if not set.",
            "type": "integer",
            "format": "int32"
          },
          "required": {
            "description": "Is this field required",
            "type": "boolean"
          },
          "saveAllHistory": {
            "description": "Indicates that all history will be saved. This will be reset if the HistoryLength is updated.",
            "type": "boolean"
          },
          "searchable": {
            "description": "Is this field searchable",
            "type": "boolean"
          },
          "slugName": {
            "description": "A unique identifier used in api calls and other interactions. The slug allows the display name to change without breaking interfaces to fields.",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort Order of the field used for display",
            "type": "integer",
            "format": "int32"
          },
          "viewingRequiresEdit": {
            "description": "Is edit permission required for viewing this field",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FieldDataType": {
        "description": "Field Data Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Text",
          "Notes",
          "Url",
          "Password",
          "File",
          "List",
          "UrlList"
        ]
      },
      "SecretTemplateFieldOptionModel": {
        "description": "Secret Template Option Model",
        "properties": {
          "id": {
            "description": "Option Id",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Option Value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldPermissionType": {
        "description": "Field Permission Type",
        "properties": {},
        "type": "string",
        "enum": [
          "Edit",
          "Owner",
          "NotEditable"
        ]
      },
      "SecretFieldPatchArgs": {
        "description": "Secret Field Patch Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateFieldPatchModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldPatchModel": {
        "description": "Secret Template Field Patch Model",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "dataType": {
            "$ref": "#/components/schemas/UpdateFieldValueOfFieldDataType"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "dropdownOptionsToAdd": {
            "$ref": "#/components/schemas/UpdateFieldValueOfStringArray"
          },
          "dropdownOptionsToRemove": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretTemplateFieldOptionRemoveModelArray"
          },
          "dropdownOptionsToUpdate": {
            "$ref": "#/components/schemas/UpdateFieldValueOfSecretTemplateFieldOptionUpdateModelArray"
          },
          "editRequiresPermission": {
            "$ref": "#/components/schemas/UpdateFieldValueOfFieldPermissionType"
          },
          "exposeForDisplay": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "historyLength": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "passwordRequirement": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "required": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "saveAllHistory": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "searchable": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "slugName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sortOrder": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "viewingRequiresEdit": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfFieldDataType": {
        "description": "The type that this field of the secret will represent.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/FieldDataType"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldOptionRemoveModel": {
        "description": "Secret Template Field Option Remove Model",
        "properties": {
          "id": {
            "description": "Option Id to Remove. Will take precedence over value.",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Option Value to Remove. If Id is populated, this will be ignored",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldOptionUpdateModel": {
        "description": "Secret Template Field Option Update Model",
        "properties": {
          "id": {
            "description": "Option Id to update",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Option Value ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfFieldPermissionType": {
        "description": "Type of permission required in order to edit this field",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/FieldPermissionType"
          }
        },
        "type": "object"
      },
      "SecretTemplateCopyArgs": {
        "description": "Secret Template Copy Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateCopyModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateCopyModel": {
        "description": "Secret Template Copy Model",
        "properties": {
          "name": {
            "description": "Secret Template Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldUpdateArgs": {
        "description": "Secret Template Field Update Args",
        "properties": {
          "description": {
            "description": "Field description",
            "type": "string"
          },
          "displayName": {
            "description": "Field display name",
            "type": "string"
          },
          "editablePermission": {
            "description": "Who has editing rights",
            "type": "integer",
            "format": "int32"
          },
          "editRequires": {
            "$ref": "#/components/schemas/EditRequiresOptions"
          },
          "fieldSlugName": {
            "description": "Field Slug Name",
            "type": "string"
          },
          "generatePasswordCharacterSet": {
            "description": "When this is set to true, the field data will be obfuscated during export",
            "type": "string"
          },
          "generatePasswordLength": {
            "description": "Generate password length.  Only returned if user can manage secret templates",
            "type": "integer",
            "format": "int32"
          },
          "hideOnView": {
            "description": "Hide this field when viewing",
            "type": "boolean"
          },
          "historyLength": {
            "description": "History length",
            "type": "integer",
            "format": "int32"
          },
          "isExpirationField": {
            "description": "Is expiration field",
            "type": "boolean"
          },
          "isFile": {
            "description": "Is this field a file type",
            "type": "boolean"
          },
          "isIndexable": {
            "description": "Is able to be indexed",
            "type": "boolean"
          },
          "isNotes": {
            "description": "Is this field a notes field type",
            "type": "boolean"
          },
          "isPassword": {
            "description": "Is this field a password field type",
            "type": "boolean"
          },
          "isRequired": {
            "description": "Is this field required",
            "type": "boolean"
          },
          "isUrl": {
            "description": "Is this field a url field type",
            "type": "boolean"
          },
          "listType": {
            "$ref": "#/components/schemas/ListType"
          },
          "mustEncrypt": {
            "description": "Must encrypt.  Only returned if user can manage secret templates",
            "type": "boolean"
          },
          "name": {
            "description": "Field name",
            "type": "string"
          },
          "passwordRequirementId": {
            "description": "ID For Password Requirement assigned to field",
            "type": "integer",
            "format": "int32"
          },
          "passwordTypeFieldId": {
            "description": "Type of password field",
            "type": "integer",
            "format": "int32"
          },
          "secretTemplateFieldId": {
            "description": "Field Id",
            "type": "integer",
            "format": "int32"
          },
          "sortOrder": {
            "description": "Sort Order for Field",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecretTemplateImportArgs": {
        "description": "Secret Template Import Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateImportModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateImportModel": {
        "description": "Secret Template Import Model",
        "properties": {
          "templateXml": {
            "description": "Secret Template XML",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretFieldCreateArgs": {
        "description": "Secret Field Create Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateFieldCreateModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldCreateModel": {
        "description": "Secret Template Field Create Model",
        "properties": {
          "dataType": {
            "$ref": "#/components/schemas/FieldDataType"
          },
          "description": {
            "description": "Description of Field",
            "type": "string"
          },
          "fieldSlugName": {
            "description": "A unique identifier used in api calls and other interactions. The slug allows the display name to change without breaking interfaces to fields.",
            "type": "string"
          },
          "name": {
            "description": "Name of Field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldSortArgs": {
        "description": "Secret Template Field Sort Args",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SecretTemplateFieldSortModel"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldSortModel": {
        "description": "Secret Template Field Sort Model",
        "properties": {
          "fieldIds": {
            "description": "Array of Field Ids used to update the sort order in the order that they are received",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretTemplateFieldSortResultModel": {
        "description": "The result of the sort",
        "properties": {
          "success": {
            "description": "Did the sort succeed",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SecretTemplatePasswordTypeUpdateArgs": {
        "description": "Secret Template Password Type Update Args",
        "properties": {
          "passwordTypeId": {
            "description": "Password Type Id",
            "type": "integer",
            "format": "int32"
          },
          "secretFieldPasswordTypeFieldDictionary": {
            "$ref": "#/components/schemas/DictionaryOfInt32AndInt32"
          }
        },
        "type": "object"
      },
      "DictionaryOfInt32AndInt32": {
        "description": "Secret Field Password Type Field Dictionary",
        "properties": {},
        "type": "object"
      },
      "PagingOfSecurityAuditLogSummaryAndSecurityAuditLogFilter": {
        "description": "Specify filtering, paging, sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "filter": {
            "$ref": "#/components/schemas/SecurityAuditLogFilter"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SecurityAuditLogSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SecurityAuditLogFilter": {
        "description": "Additional query options",
        "properties": {
          "isExporting": {
            "description": "IsExporting",
            "type": "boolean"
          },
          "searchText": {
            "description": "SearchText",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecurityAuditLogSummary": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "byUserDisplayName": {
            "description": "ByUserDisplayName",
            "type": "string"
          },
          "databaseName": {
            "description": "DatabaseName",
            "type": "string"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "dateRecordedDisplay": {
            "description": "DateRecordedDisplay",
            "type": "string"
          },
          "eventEntityType": {
            "description": "EventEntityType",
            "type": "string"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "logSourceName": {
            "description": "LogSourceName",
            "type": "string"
          },
          "machineName": {
            "description": "MachineName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServerNodeModel": {
        "description": "ServerNodeModel[]",
        "properties": {
          "backgroundWorkerError": {
            "description": "Background Worker Error",
            "type": "string"
          },
          "binaryVersion": {
            "description": "Binary Version",
            "type": "string"
          },
          "database": {
            "description": "Database",
            "type": "string"
          },
          "enableBackgroundWorker": {
            "description": "Background Worker Role Enabled",
            "type": "boolean"
          },
          "enableEngineWorker": {
            "description": "Engine Worker Role Enabled",
            "type": "boolean"
          },
          "enableSessionRecordingWorker": {
            "description": "Session Recording Worker Role Enabled",
            "type": "boolean"
          },
          "engineWorkerError": {
            "description": "Engine Worker Error",
            "type": "string"
          },
          "errorMessage": {
            "description": "The node configuration error if one exists",
            "type": "string"
          },
          "inCluster": {
            "description": "In Cluster",
            "type": "boolean"
          },
          "isCurrentNode": {
            "description": "Whether or not this node is the one which handled the request",
            "type": "boolean"
          },
          "lastConnected": {
            "description": "The date of the last time the node connected",
            "type": "string"
          },
          "logLevel": {
            "description": "Log Level",
            "type": "string"
          },
          "machineName": {
            "description": "Machine Name",
            "type": "string"
          },
          "nodeId": {
            "description": "Node Id",
            "type": "integer",
            "format": "int32"
          },
          "readonlyModeEnabled": {
            "description": "Readonly Mode Enabled",
            "type": "boolean"
          },
          "readonlyModeStatus": {
            "description": "The status of readonly mode if it is being disabled or enabled",
            "type": "string"
          },
          "sessionRecordingWorkerError": {
            "description": "Session Recording Worker Error",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServerNodeConfigurationModel": {
        "description": "Server Node Roles",
        "properties": {
          "enableBackgroundWorker": {
            "description": "Background Worker Role Enabled",
            "type": "boolean"
          },
          "enableEngineWorker": {
            "description": "Engine Worker Role Enabled",
            "type": "boolean"
          },
          "enableSessionRecordingWorker": {
            "description": "Session Recording Worker Role Enabled",
            "type": "boolean"
          },
          "inCluster": {
            "description": "Whether or not the node is in the cluster",
            "type": "boolean"
          },
          "logLevel": {
            "description": "Log Level",
            "type": "string"
          },
          "readonlyModeEnabled": {
            "description": "Readonly Mode Enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SlackConfigurationModelV2": {
        "description": "Slack Configuration",
        "properties": {
          "appId": {
            "description": "Id of App",
            "type": "string"
          },
          "botToken": {
            "description": "Bot Token",
            "type": "string"
          },
          "currentUserHasSlackId": {
            "description": "CurrentUserHasSlackId",
            "type": "boolean"
          },
          "inboxNotificationsEnabled": {
            "description": "Enable inbox notifications in Slack",
            "type": "boolean"
          },
          "secretInteractionsEnabled": {
            "description": "Enable secret notifications and interactions with Slack",
            "type": "boolean"
          },
          "signatureKey": {
            "description": "Signature Key",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SlackConfigurationUpdateArgsV2": {
        "description": "SlackConfigurationUpdateArgsV2",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SlackConfigurationUpdateModelV2"
          }
        },
        "type": "object"
      },
      "SlackConfigurationUpdateModelV2": {
        "description": "Data",
        "properties": {
          "appId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "botToken": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "inboxNotificationsEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "secretInteractionsEnabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "signatureKey": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "SlackConfigurationTestResultModel": {
        "description": "SlackConfigurationTestResultModel",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SlackResponse": {
        "description": "SlackResponse",
        "properties": {
          "error": {
            "description": "error",
            "type": "string"
          },
          "ok": {
            "description": "ok",
            "type": "boolean"
          },
          "response_metadata": {
            "$ref": "#/components/schemas/SlackResponseMetadata"
          },
          "warning": {
            "description": "warning",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SlackResponseMetadata": {
        "description": "response_metadata",
        "properties": {
          "messages": {
            "description": "messages",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "warnings": {
            "description": "warnings",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PagingOfSshCommandBlocklistSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SshCommandBlocklistSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshCommandBlocklistSummaryModel": {
        "description": "SSH command Blocklist",
        "properties": {
          "active": {
            "description": "If the Command Blocklist is enabled",
            "type": "boolean"
          },
          "description": {
            "description": "A description of the Command Blocklist",
            "type": "string"
          },
          "name": {
            "description": "Name the Command Blocklist",
            "type": "string"
          },
          "sshCommandBlocklistId": {
            "description": "ID of the Command Blocklist",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "SshCommandBlocklistDto": {
        "description": "SshCommandBlocklistDto",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "sshCommandBlocklistId": {
            "description": "SshCommandBlocklistId",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "PagingOfBlocklistSecretPolicySummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/BlocklistSecretPolicySummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "BlocklistSecretPolicySummaryModel": {
        "description": "Query results",
        "properties": {
          "secretPolicyId": {
            "description": "The Id of the Secret Policy",
            "type": "integer",
            "format": "int32"
          },
          "secretPolicyName": {
            "description": "The Name of the Secret Policy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SshCommandBlocklistPatchArgs": {
        "description": "SshCommandBlocklistPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SshCommandBlocklistPatchModel"
          }
        },
        "type": "object"
      },
      "SshCommandBlocklistCreateArgs": {
        "description": "Options to create SSH Command Blocklist",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SshCommandBlocklistCreateModel"
          }
        },
        "type": "object"
      },
      "SshCommandBlocklistCreateModel": {
        "description": "SSH Command Blocklist to create",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "sshCommandBlocklistId": {
            "description": "SshCommandBlocklistId",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandIds": {
            "description": "SshCommandIds",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PagingOfSshCommandSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SshCommandSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshCommandSummaryModel": {
        "description": "SSH command",
        "properties": {
          "command": {
            "description": "SSH command",
            "type": "string"
          },
          "commandPermissionType": {
            "$ref": "#/components/schemas/CommandPermissionType"
          },
          "name": {
            "description": "SSH command name",
            "type": "string"
          },
          "sortOrder": {
            "description": "Sort order",
            "type": "integer",
            "format": "int32"
          },
          "sshCommandGuid": {
            "description": "SSH command Guid",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandId": {
            "description": "SSH command ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshCommandDto": {
        "description": "SshCommandDto",
        "properties": {
          "command": {
            "description": "Command",
            "type": "string"
          },
          "commandPermissionType": {
            "$ref": "#/components/schemas/CommandPermissionType"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "sshCommandGuid": {
            "description": "SshCommandGuid",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandId": {
            "description": "SshCommandId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshCommandPatchArgs": {
        "description": "SshCommandPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SshCommandPatchModel"
          }
        },
        "type": "object"
      },
      "SshCommandCreateArgs": {
        "description": "Options to create SSH Command",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SshCommandCreateModel"
          }
        },
        "type": "object"
      },
      "SshCommandCreateModel": {
        "description": "SSH Command Create Model",
        "properties": {
          "command": {
            "description": "SSH command",
            "type": "string"
          },
          "commandPermissionType": {
            "$ref": "#/components/schemas/CommandPermissionType"
          },
          "name": {
            "description": "SSH command name",
            "type": "string"
          },
          "sshCommandGuid": {
            "description": "SSH command Guid",
            "type": "string",
            "format": "uuid"
          }
        },
        "type": "object"
      },
      "PagingOfSshCommandMenuSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SshCommandMenuSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshCommandMenuSummaryModel": {
        "description": "SSH Command Menu Summary",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "sshCommandMenuId": {
            "description": "ID of the SSH Command Menu",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfSshCommandMenuAuditSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SshCommandMenuAuditSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshCommandMenuAuditSummaryModel": {
        "description": "SSH Command Menu Audits",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "dateRecorded": {
            "description": "The date of the change",
            "type": "string",
            "format": "date-time"
          },
          "newCommands": {
            "description": "New Commands",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "oldCommands": {
            "description": "Old Commands",
            "type": "string"
          },
          "sshCommandMenuName": {
            "description": "The name of the command menu",
            "type": "string"
          },
          "userDisplayName": {
            "description": "Display name of the user making the change",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfSshCommandItemAuditSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SshCommandItemAuditSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SshCommandItemAuditSummaryModel": {
        "description": "SSH Command Info Audits (Menu, Blocklist, Command)",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "dateRecorded": {
            "description": "The date of the change",
            "type": "string",
            "format": "date-time"
          },
          "itemName": {
            "description": "The name of the item",
            "type": "string"
          },
          "itemType": {
            "description": "Item Type (Command, Menu, Blocklist)",
            "type": "string"
          },
          "newCommands": {
            "description": "New Commands (Menu only)",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "oldCommands": {
            "description": "Old Commands (Menu only)",
            "type": "string"
          },
          "userDisplayName": {
            "description": "Display name of the user making the change",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SshCommandMenuModel": {
        "description": "SSH Command Menu",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "sshCommandMenuGuid": {
            "description": "Ssh Command Menu Guid Id",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandMenuId": {
            "description": "Ssh Command Menu Id",
            "type": "integer",
            "format": "int32"
          },
          "sshCommands": {
            "description": "SshCommands",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SshCommandMenuPatchArgs": {
        "description": "SshCommandMenuPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SshCommandMenuPatchModel"
          }
        },
        "type": "object"
      },
      "SshCommandMenuPatchModel": {
        "description": "Patch SSH Command Menu",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "sshCommandMenuGuid": {
            "description": "Ssh Command Menu Guid Id",
            "type": "string",
            "format": "uuid"
          },
          "sshCommandMenuId": {
            "description": "Ssh Command Menu Id",
            "type": "integer",
            "format": "int32"
          },
          "sshCommands": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "SshCommandMenuStateModel": {
        "description": "Available state that can be performed on the SSH command feature such as actions",
        "properties": {
          "actions": {
            "description": "Actions the current user can perform",
            "items": {
              "$ref": "#/components/schemas/SshCommandMenuActions"
            },
            "type": "array"
          },
          "viewPolicy": {
            "description": "ViewPolicy",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SshCommandMenuActions": {
        "description": "Actions the current user can perform",
        "properties": {},
        "type": "string",
        "enum": [
          "CanCreate"
        ]
      },
      "SshCommandMenuCreateArgs": {
        "description": "Options to create SSH Command Menu",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SshCommandMenuCreateModel"
          }
        },
        "type": "object"
      },
      "SshCommandMenuCreateModel": {
        "description": "Create a new SSH Command Menu",
        "required": [
          "name",
          "active",
          "description",
          "sshCommands"
        ],
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "sshCommands": {
            "description": "SSH Commands should be in the format of commandname = command.  Each command should be separated by a carriage return and line feed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfTeamDetailModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/TeamDetailModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "TeamDetailModel": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "domainId": {
            "description": "Domain Id",
            "type": "integer",
            "format": "int32"
          },
          "shouldRestrictLists": {
            "description": "Should Restrict Lists",
            "type": "boolean"
          },
          "shouldRestrictSites": {
            "description": "Should Restrict Sites",
            "type": "boolean"
          },
          "teamDescription": {
            "description": "Team Description",
            "type": "string"
          },
          "teamId": {
            "description": "Team Id",
            "type": "integer",
            "format": "int32"
          },
          "teamName": {
            "description": "Team Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamCreateArgs": {
        "description": "Available options for creating a team",
        "required": [
          "teamName"
        ],
        "properties": {
          "domainId": {
            "description": "Id of domain team is in",
            "type": "integer",
            "format": "int32"
          },
          "teamDescription": {
            "description": "User description of team",
            "type": "string"
          },
          "teamName": {
            "description": "Name of the team",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamDetailUpdateModel": {
        "description": "TeamDetailUpdateModel",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "domainId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "teamDescription": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "teamName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "PagingOfTeamAuditModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/TeamAuditModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "TeamAuditModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "databaseName": {
            "description": "Database Name",
            "type": "string"
          },
          "dateRecorded": {
            "description": "Date Recordd",
            "type": "string",
            "format": "date-time"
          },
          "delegatedUserId": {
            "description": "Delegated User Id",
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "description": "Display Name",
            "type": "string"
          },
          "ipAddress": {
            "description": "IP Address",
            "type": "string"
          },
          "machineName": {
            "description": "Machine Name",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "teamAuditId": {
            "description": "TeamAuditId",
            "type": "integer",
            "format": "int32"
          },
          "teamId": {
            "description": "Team Id",
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "description": "User Id",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamGroupMembershipModel": {
        "description": "TeamGroupMembershipModel[]",
        "properties": {
          "groupDisplayName": {
            "description": "GroupDisplayName",
            "type": "string"
          },
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "teamGroupMembershipId": {
            "description": "TeamGroupMembershipId",
            "type": "integer",
            "format": "int32"
          },
          "teamId": {
            "description": "TeamId",
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "description": "Type",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamMemberUpdateArgs": {
        "description": "TeamMemberUpdateArgs",
        "properties": {
          "domainId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "groupIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          }
        },
        "type": "object"
      },
      "TeamSiteMap": {
        "description": "TeamSiteMap[]",
        "properties": {
          "siteId": {
            "description": "SiteId",
            "type": "integer",
            "format": "int32"
          },
          "siteName": {
            "description": "SiteName",
            "type": "string"
          },
          "teamId": {
            "description": "TeamId",
            "type": "integer",
            "format": "int32"
          },
          "teamSiteMapId": {
            "description": "TeamSiteMapId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "TeamSiteUpdateArgs": {
        "description": "TeamSiteUpdateArgs",
        "properties": {
          "shouldRestrictSites": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "siteIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          }
        },
        "type": "object"
      },
      "TeamCategorizedListSummary": {
        "description": "TeamCategorizedListSummary",
        "properties": {
          "lists": {
            "description": "Lists",
            "items": {
              "$ref": "#/components/schemas/SimpleCategorizedList"
            },
            "type": "array"
          },
          "teamId": {
            "description": "TeamId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "TeamCategorizedListUpdateArgs": {
        "description": "TeamCategorizedListUpdateArgs",
        "properties": {
          "listIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfGuidArray"
          },
          "shouldRestrictLists": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          }
        },
        "type": "object"
      },
      "TicketSystemModel": {
        "description": "TicketSystemModel[]",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "displayMessage": {
            "description": "DisplayMessage",
            "type": "string"
          },
          "forceRequireTicketNumber": {
            "description": "ForceRequireTicketNumber",
            "type": "integer",
            "format": "int32"
          },
          "isDefault": {
            "description": "IsDefault",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "TicketSystemId",
            "type": "integer",
            "format": "int32"
          },
          "ticketSystemTypeId": {
            "description": "TicketSystemTypeId",
            "type": "integer",
            "format": "int32"
          },
          "viewTicketUrl": {
            "description": "ViewTicketUrl",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TicketSystemCreateArgs": {
        "description": "TicketSystemCreateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TicketSystemCreateModel"
          }
        },
        "type": "object"
      },
      "TicketSystemCreateModel": {
        "description": "Data used to create the new ticket system.",
        "properties": {
          "active": {
            "description": "Ticket System Active status",
            "type": "boolean"
          },
          "addCommentsToTicket": {
            "description": "Send comment to your integrated Ticket System and add it to the incident or change request.",
            "type": "boolean"
          },
          "bmcChangeManagementCommentWorkType": {
            "description": "BMC Remedy Change Management integration only.  Select work type for comments added.",
            "type": "string"
          },
          "bmcIncidentManagementCommentWorkType": {
            "description": "BMC Remedy Incident Management integration only.  Select work type for comments added.",
            "type": "string"
          },
          "bmcRemedyAuthentication": {
            "description": "BMC Remedy integration only. Authentication value that usually represents a login server.",
            "type": "string"
          },
          "bmcRemedyUrlEndpoint": {
            "description": "BMC Remedy integration only.  The SOAP URL endpoint for the BMC Remedy Incident or Change Management.  Should be the CHG_ChangeInterface_WS or HPD_IncidentInterface_WS endpoint.",
            "type": "string"
          },
          "description": {
            "description": "Ticket System Dexcription",
            "type": "string"
          },
          "displayMessage": {
            "description": "Ticket System Ticket Title",
            "type": "string"
          },
          "forceRequireTicketNumber": {
            "$ref": "#/components/schemas/ForceRequireTicketSystemOptions"
          },
          "isDefault": {
            "description": "Indicates the Ticket System is the default choice.",
            "type": "boolean"
          },
          "name": {
            "description": "Ticket System Name",
            "type": "string"
          },
          "powerShellAddCommentScriptArguments": {
            "description": "PowerShell integration only.  Optional arguments for the comment script.  Arguemnts are separated by a space.",
            "type": "string"
          },
          "powerShellAddCommentScriptId": {
            "description": "PowerShell integration only.  Custom PowerSHell script to add a comment to a ticket system.",
            "type": "integer",
            "format": "int32"
          },
          "powerShellAddTicketCommentScriptArguments": {
            "description": "PowerShell integration only.  Optional arguments for the ticket comment script.  Arguemnts are separated by a space.",
            "type": "string"
          },
          "powerShellAddTicketCommentScriptId": {
            "description": "PowerShell integration only.  Custom PowerSHell script to add a comment to a ticket in a ticket system.",
            "type": "integer",
            "format": "int32"
          },
          "powerShellRunAsAccountSecretId": {
            "description": "PowerShell integration only.  Secret Id for credentials to use to run the Powershell.",
            "type": "integer",
            "format": "int32"
          },
          "powerShellTicketStatusScriptArguments": {
            "description": "PowerShell integration only.  Optional arguments for the ticket status script.  Arguemnts are separated by a space.",
            "type": "string"
          },
          "powerShellTicketStatusScriptId": {
            "description": "Powreshell Integration only.  Custom PowerShell script to get the ticket status.",
            "type": "integer",
            "format": "int32"
          },
          "serviceNowAllowedStatuses": {
            "description": "ServiceNow integration only.  Statuses to accept from ServiceNow, separated by commas.",
            "type": "string"
          },
          "serviceNowDomainName": {
            "description": "ServiceNow integration only. The domain name that hosts the RESTful web services for Ticket System integration.",
            "type": "string"
          },
          "siteId": {
            "description": "Ticket System Site",
            "type": "integer",
            "format": "int32"
          },
          "systemCredentialSecretId": {
            "description": "Privilged Secret Id for credentials to connect to integrated Ticket Systems.",
            "type": "integer",
            "format": "int32"
          },
          "ticketNumberErrorMessage": {
            "description": "Ticket Number Validation Error Message",
            "type": "string"
          },
          "ticketNumberValidation": {
            "description": "Ticket Number Validation Regex",
            "type": "string"
          },
          "ticketSystemType": {
            "$ref": "#/components/schemas/TicketSystemTypes"
          },
          "viewTicketUrl": {
            "description": "Ticket System URL pattern",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TicketSystemPatchArgs": {
        "description": "TicketSystemPatchArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TicketSystemPatchModel"
          }
        },
        "type": "object"
      },
      "PagingOfTicketSystemSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/TicketSystemSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "TicketSystemSummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "displayMessage": {
            "description": "DisplayMessage",
            "type": "string"
          },
          "forceRequireTicketNumber": {
            "description": "ForceRequireTicketNumber",
            "type": "integer",
            "format": "int32"
          },
          "isDefault": {
            "description": "IsDefault",
            "type": "boolean"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "ticketSystemId": {
            "description": "TicketSystemId",
            "type": "integer",
            "format": "int32"
          },
          "ticketSystemTypeId": {
            "description": "TicketSystemTypeId",
            "type": "integer",
            "format": "int32"
          },
          "viewTicketUrl": {
            "description": "ViewTicketUrl",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserModel": {
        "description": "User",
        "properties": {
          "adAccountExpires": {
            "description": "Active Directory account expiration time",
            "type": "string",
            "format": "date-time"
          },
          "adGuid": {
            "description": "Active Directory unique identifier",
            "type": "string"
          },
          "created": {
            "description": "User creation time",
            "type": "string",
            "format": "date-time"
          },
          "dateOptionId": {
            "description": "DateOptionId",
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "description": "Display name",
            "type": "string"
          },
          "domainId": {
            "description": "Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "duoTwoFactor": {
            "description": "Whether Duo two-factor authentication is enabled",
            "type": "boolean"
          },
          "emailAddress": {
            "description": "Email address",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the user account is enabled",
            "type": "boolean"
          },
          "externalUserSource": {
            "$ref": "#/components/schemas/ExternalUserSourceTypes"
          },
          "fido2TwoFactor": {
            "description": "Whether FIDO2 two-factor authentication is enabled",
            "type": "boolean"
          },
          "id": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRestrictions": {
            "description": "Array of IP Address Restrictions for the user.",
            "items": {
              "$ref": "#/components/schemas/UserIpAddressRestrictionModel"
            },
            "type": "array"
          },
          "isApplicationAccount": {
            "description": "IsApplicationAccount",
            "type": "boolean"
          },
          "isEmailCopiedFromAD": {
            "description": "Whether the email address is derived from the Active Directory account",
            "type": "boolean"
          },
          "isEmailVerified": {
            "description": "Whether the email address has been verified",
            "type": "boolean"
          },
          "isLockedOut": {
            "description": "Whether the user is locked out",
            "type": "boolean"
          },
          "lastLogin": {
            "description": "Time of last login",
            "type": "string",
            "format": "date-time"
          },
          "lastSessionActivity": {
            "description": "Time of last session activity",
            "type": "string",
            "format": "date-time"
          },
          "lockOutReason": {
            "description": "The reason for the lock out",
            "type": "string"
          },
          "lockOutReasonDescription": {
            "description": "An optional description of the reason for the lock out",
            "type": "string"
          },
          "loginFailures": {
            "description": "Number of login failures",
            "type": "integer",
            "format": "int32"
          },
          "mustVerifyEmail": {
            "description": "Whether the user must verify their email address",
            "type": "boolean"
          },
          "oathTwoFactor": {
            "description": "Whether OATH two-factor authentication is enabled",
            "type": "boolean"
          },
          "oathVerified": {
            "description": "Whether OATH has been verified",
            "type": "boolean"
          },
          "passwordLastChanged": {
            "description": "Time when the password was last changed",
            "type": "string",
            "format": "date-time"
          },
          "personalGroupId": {
            "description": "The personal group ID for this user.  Each user has a personal group that is a group that only contains that user.",
            "type": "integer",
            "format": "int32"
          },
          "platformIntegrationType": {
            "$ref": "#/components/schemas/PlatformIntegrationType"
          },
          "radiusTwoFactor": {
            "description": "Whether RADIUS two-factor authentication is enabled",
            "type": "boolean"
          },
          "radiusUserName": {
            "description": "RADIUS username",
            "type": "string"
          },
          "resetSessionStarted": {
            "description": "ResetSessionStarted",
            "type": "string",
            "format": "date-time"
          },
          "slackId": {
            "description": "Slack ID of the user",
            "type": "string"
          },
          "timeOptionId": {
            "description": "TimeOptionId",
            "type": "integer",
            "format": "int32"
          },
          "twoFactor": {
            "description": "Whether two-factor authentication is enabled",
            "type": "boolean"
          },
          "unixAuthenticationMethod": {
            "$ref": "#/components/schemas/UnixAuthenticationMethodType"
          },
          "userLcid": {
            "description": "UserLcid",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          },
          "verifyEmailSentDate": {
            "description": "Time when the verification email was sent",
            "type": "string",
            "format": "date-time"
          }
        },
        "type": "object"
      },
      "ExternalUserSourceTypes": {
        "description": "External user sources.",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "ThycoticOne",
          "Azure",
          "Platform"
        ]
      },
      "PlatformIntegrationType": {
        "description": "Type of Platform integration",
        "properties": {},
        "type": "string",
        "enum": [
          "None",
          "Native",
          "Hybrid"
        ]
      },
      "UnixAuthenticationMethodType": {
        "description": "Check password, public key, either, or both",
        "properties": {},
        "type": "string",
        "enum": [
          "Password",
          "PublicKey",
          "PasswordOrPublicKey",
          "PasswordAndPublicKey"
        ]
      },
      "UserUpdateArgs": {
        "description": "User update options",
        "properties": {
          "dateOptionId": {
            "description": "The id of the date format to use when displaying dates to this user. These options are defined in Admin > Configuration.",
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "description": "The user’s name as displayed in the user interface.",
            "type": "string"
          },
          "duoTwoFactor": {
            "description": "Whether Duo two-factor authentication is enabled.",
            "type": "boolean"
          },
          "emailAddress": {
            "description": "The user's email address. Used by the system to send reports, access requests, and other notifications.",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the user account is enabled. Disabled users are unable to log in and do not consume a user license.",
            "type": "boolean"
          },
          "fido2TwoFactor": {
            "description": "Whether FIDO2 two-factor authentication is enabled.",
            "type": "boolean"
          },
          "groupOwners": {
            "description": "A list of group ids for the groups that can manage this user. If not set, the user is managed by all users with the ‘Administer Users’ role permission.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "id": {
            "description": "User ID. Must match ID in path.",
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          "isApplicationAccount": {
            "description": "Whether this is an application account. Application accounts are used for automation, cannot log in using the UI, and do not consume a user license.",
            "type": "boolean"
          },
          "isGroupOwnerUpdate": {
            "description": "Whether the user is managed by the groups specified in GroupOwners or is managed by all users with the ‘Administer Users’ role permission.",
            "type": "boolean"
          },
          "isLockedOut": {
            "description": "Whether the user is locked out. A locked out user cannot log in.",
            "type": "boolean"
          },
          "loginFailures": {
            "description": "Number of login failures to allow before the account is locked out. Set to 0 for unlimited login attempts.",
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "oathTwoFactor": {
            "description": "Whether OATH two-factor authentication is enabled.",
            "type": "boolean"
          },
          "password": {
            "description": "The password used by local accounts to log in.",
            "type": "string"
          },
          "radiusTwoFactor": {
            "description": "Whether RADIUS two-factor authentication is enabled.",
            "type": "boolean"
          },
          "radiusUserName": {
            "description": "When a user account uses RADIUS two-factor authentication, this property is the user name of the RADIUS account used to authenticate this user.",
            "type": "string"
          },
          "timeOptionId": {
            "description": "The id of the time format to use when displaying times to this user. These options are defined in Admin > Configuration.",
            "type": "integer",
            "format": "int32"
          },
          "twoFactor": {
            "description": "Whether two-factor authentication is enabled.",
            "type": "boolean"
          },
          "unixAuthenticationMethod": {
            "$ref": "#/components/schemas/UnixAuthenticationMethodType"
          }
        },
        "type": "object"
      },
      "PatchUserModel": {
        "description": "PatchUserModel",
        "properties": {
          "dateOptionId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "displayName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "duoTwoFactor": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "emailAddress": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "enabled": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "fido2TwoFactor": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "groupOwners": {
            "description": "GroupOwners",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "id": {
            "description": "User ID. Must match ID in path",
            "type": "integer",
            "format": "int32"
          },
          "ipAddressRestrictionIds": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32Array"
          },
          "isApplicationAccount": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "isGroupOwnerUpdate": {
            "description": "IsGroupOwnerUpdate",
            "type": "boolean"
          },
          "isLockedOut": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "loginFailures": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "oathTwoFactor": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "password": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "radiusTwoFactor": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "radiusUserName": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "slackId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "timeOptionId": {
            "$ref": "#/components/schemas/UpdateFieldValueOfInt32"
          },
          "twoFactor": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "unixAuthenticationMethod": {
            "$ref": "#/components/schemas/UpdateFieldValueOfUnixAuthenticationMethodType"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfUnixAuthenticationMethodType": {
        "description": "Check password, public key, either, or both",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/UnixAuthenticationMethodType"
          }
        },
        "type": "object"
      },
      "UserOwnerModel": {
        "description": "User owner",
        "properties": {
          "domainId": {
            "description": "Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "User owner ID",
            "type": "integer",
            "format": "int32"
          },
          "isUser": {
            "description": "Whether the owner is a user (true) or a group (false)",
            "type": "boolean"
          },
          "name": {
            "description": "User owner name",
            "type": "string"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "GroupAssignments": {
        "description": "Groups to be assigned.",
        "properties": {
          "groupIds": {
            "description": "Group Ids",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GroupChangeStatusModel": {
        "description": "The status of the group change action.",
        "properties": {
          "success": {
            "description": "The success or failure of the user group action.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfUserSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/UserSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserSummary": {
        "description": "User summary",
        "properties": {
          "created": {
            "description": "User creation time",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "Display name",
            "type": "string"
          },
          "domainId": {
            "description": "Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "domainName": {
            "description": "Active Directory Domain Name",
            "type": "string"
          },
          "emailAddress": {
            "description": "Email address",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the user account is enabled",
            "type": "boolean"
          },
          "externalUserSource": {
            "$ref": "#/components/schemas/ExternalUserSourceTypes"
          },
          "id": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "isApplicationAccount": {
            "description": "IsApplicationAccount",
            "type": "boolean"
          },
          "isLockedOut": {
            "description": "Whether the user is locked out",
            "type": "boolean"
          },
          "lastLogin": {
            "description": "Time of last login",
            "type": "string",
            "format": "date-time"
          },
          "loginFailures": {
            "description": "Number of login failures",
            "type": "integer",
            "format": "int32"
          },
          "platformIntegrationType": {
            "$ref": "#/components/schemas/PlatformIntegrationType"
          },
          "twoFactorMethod": {
            "$ref": "#/components/schemas/MultifactorAuthenticationProviderTypes"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserCreateArgs": {
        "description": "User create options",
        "required": [
          "userName",
          "password",
          "displayName"
        ],
        "properties": {
          "adGuid": {
            "description": "Active Directory unique identifier.",
            "type": "string",
            "maxLength": 50
          },
          "displayName": {
            "description": "The user’s name as displayed in the user interface.",
            "type": "string"
          },
          "domainId": {
            "description": "If not null, the Active Directory domain ID.",
            "type": "integer",
            "format": "int32",
            "minimum": -1
          },
          "duoTwoFactor": {
            "description": "Whether Duo two-factor authentication is enabled.",
            "type": "boolean"
          },
          "emailAddress": {
            "description": "The user's email address. Used by the system to send reports, access requests, and other notifications.",
            "type": "string"
          },
          "enabled": {
            "description": "Whether the user account is enabled. Disabled users are unable to log in and do not consume a user license.",
            "type": "boolean"
          },
          "fido2TwoFactor": {
            "description": "Whether Duo two-factor authentication is enabled.",
            "type": "boolean"
          },
          "isApplicationAccount": {
            "description": "Whether this is an application account. Application accounts are used for automation, cannot log in using the UI, and do not consume a user license.",
            "type": "boolean"
          },
          "oathTwoFactor": {
            "description": "Whether OATH two-factor authentication is enabled.",
            "type": "boolean"
          },
          "password": {
            "description": "The password used by local accounts to log in.",
            "type": "string"
          },
          "radiusTwoFactor": {
            "description": "Whether RADIUS two-factor authentication is enabled.",
            "type": "boolean"
          },
          "radiusUserName": {
            "description": "RADIUS username",
            "type": "string"
          },
          "twoFactor": {
            "description": "Whether two-factor authentication is enabled.",
            "type": "boolean"
          },
          "unixAuthenticationMethod": {
            "$ref": "#/components/schemas/UnixAuthenticationMethodType"
          },
          "userName": {
            "description": "The unique string identifying this user.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CurrentUserModel": {
        "description": "Current User",
        "properties": {
          "adminLinks": {
            "description": "List of admin link options for current user",
            "items": {
              "$ref": "#/components/schemas/MenuLink"
            },
            "type": "array"
          },
          "dateOptionId": {
            "description": "Date option of current user",
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "description": "Display Name of current user",
            "type": "string"
          },
          "emailAddress": {
            "description": "Email Address of current user",
            "type": "string"
          },
          "id": {
            "description": "Id of current user",
            "type": "integer",
            "format": "int32"
          },
          "permissions": {
            "description": "Permissions assigned to current user",
            "items": {
              "$ref": "#/components/schemas/RestRolePermission"
            },
            "type": "array"
          },
          "profileLinks": {
            "description": "List of profile options for current user",
            "items": {
              "$ref": "#/components/schemas/MenuLink"
            },
            "type": "array"
          },
          "timeOptionId": {
            "description": "Time option of current user",
            "type": "integer",
            "format": "int32"
          },
          "userLcid": {
            "description": "Language of current user",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User Name of current user",
            "type": "string"
          },
          "userTheme": {
            "description": "The current users theme",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MenuLink": {
        "description": "List of admin link options for current user",
        "properties": {
          "link": {
            "description": "Link",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestRolePermission": {
        "description": "Permissions assigned to current user",
        "properties": {
          "name": {
            "description": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfUserPublicSshKeySummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/UserPublicSshKeySummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserPublicSshKeySummary": {
        "description": "User public ssh key",
        "properties": {
          "active": {
            "description": "Whether the user public ssh key is active",
            "type": "boolean"
          },
          "dateCreated": {
            "description": "User public ssh key creation time",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "expired": {
            "description": "Whether the user public ssh key is expired",
            "type": "boolean"
          },
          "format": {
            "description": "The Format of the key",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "publicSshKey": {
            "description": "Public ssh key",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserPublicSshKeyCreateArgs": {
        "description": "User public ssh key create options",
        "required": [
          "description",
          "format"
        ],
        "properties": {
          "description": {
            "description": "Description",
            "type": "string"
          },
          "format": {
            "description": "Format of private key file",
            "type": "string"
          },
          "passphrase": {
            "description": "Passphrase",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfUserOwnerSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/UserOwnerSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserOwnerSummary": {
        "description": "User owner summary",
        "properties": {
          "domainId": {
            "description": "Active Directory domain ID",
            "type": "integer",
            "format": "int32"
          },
          "groupId": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "User owner ID",
            "type": "integer",
            "format": "int32"
          },
          "isUser": {
            "description": "Whether the owner is a user (true) or a group (false)",
            "type": "boolean"
          },
          "name": {
            "description": "User owner name",
            "type": "string"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserOwnerCreateArgs": {
        "description": "User owner create options",
        "properties": {
          "groupId": {
            "description": "Group ID",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group name",
            "type": "string"
          },
          "userId": {
            "description": "User ID",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "User name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserOwnerPatchUserModel": {
        "description": "Update a list of add and removed owners owners of the user",
        "properties": {
          "addedGroupIds": {
            "description": "Group IDs to add as owners of the user",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "removeAllOwners": {
            "description": "Set to remove all owners to make user to be managed by user admins",
            "type": "boolean"
          },
          "removeGroupIds": {
            "description": "Group IDs to remove as owners of the user",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UserOwnerPatchResult": {
        "description": "UserOwnerPatchResult",
        "properties": {
          "success": {
            "description": "Success of the patch",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PagingOfDomainSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/DomainSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "DomainSummary": {
        "description": "Query results",
        "properties": {
          "domainId": {
            "description": "DomainId",
            "type": "integer",
            "format": "int32"
          },
          "domainName": {
            "description": "DomainName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfUserRoleSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/UserRoleSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserRoleSummary": {
        "description": "All of the roles a user has",
        "properties": {
          "groups": {
            "description": "All of the groups to which the user belongs that have this role",
            "items": {
              "$ref": "#/components/schemas/GroupAssignedRoleModel"
            },
            "type": "array"
          },
          "isDirectAssignment": {
            "description": "Is the role directly assigned to the user",
            "type": "boolean"
          },
          "roleId": {
            "description": "Role ID",
            "type": "integer",
            "format": "int32"
          },
          "roleName": {
            "description": "Role Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupAssignedRoleModel": {
        "description": "All of the groups to which the user belongs that have this role",
        "properties": {
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "GroupName",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PagingOfUserAuditSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/UserAuditSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserAuditSummary": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action that occurred",
            "type": "string"
          },
          "databaseName": {
            "description": "Database name",
            "type": "string"
          },
          "dateRecorded": {
            "description": "Date Recorded",
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "description": "The name of the user that made the change",
            "type": "string"
          },
          "displayNameAffected": {
            "description": "The display name that was affected by this change",
            "type": "string"
          },
          "ipAddress": {
            "description": "IP Address",
            "type": "string"
          },
          "machineName": {
            "description": "Machine name",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userId": {
            "description": "The user id of the user that made the change",
            "type": "integer",
            "format": "int32"
          },
          "userIdAffected": {
            "description": "The user id that was affected by this change",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfUserTeamSummary": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/UserTeamSummary"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserTeamSummary": {
        "description": "Query results",
        "properties": {
          "active": {
            "description": "Team Active State",
            "type": "boolean"
          },
          "domainId": {
            "description": "Team Domain Id",
            "type": "integer",
            "format": "int32"
          },
          "isDirectlyAssigned": {
            "description": "If the user is directly assigned to the team",
            "type": "boolean"
          },
          "teamDescription": {
            "description": "Team Description",
            "type": "string"
          },
          "teamGroupMemberships": {
            "description": "The memberships a user has to a team.",
            "items": {
              "$ref": "#/components/schemas/TeamGroupSummary"
            },
            "type": "array"
          },
          "teamId": {
            "description": "Team Id",
            "type": "integer",
            "format": "int32"
          },
          "teamName": {
            "description": "Team Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeamGroupSummary": {
        "description": "Team Group Summary",
        "properties": {
          "groupId": {
            "description": "Group Id",
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "description": "Group Name",
            "type": "string"
          },
          "isPersonal": {
            "description": "Is Personal Group",
            "type": "boolean"
          },
          "teamId": {
            "description": "Team Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PreferenceModel": {
        "description": "Preference Model",
        "properties": {
          "settingCode": {
            "description": "Setting Code",
            "type": "string"
          },
          "settingId": {
            "description": "Setting Id",
            "type": "integer",
            "format": "int32"
          },
          "settingKey": {
            "description": "Setting Key",
            "type": "string"
          },
          "settingName": {
            "description": "Setting Name",
            "type": "string"
          },
          "settingValue": {
            "description": "Setting Value",
            "type": "string"
          },
          "userId": {
            "description": "User Id",
            "type": "integer",
            "format": "int32"
          },
          "userSettingId": {
            "description": "User Setting Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "RestPreferenceUpdateArgs": {
        "description": "Preference update options",
        "properties": {
          "settingCode": {
            "description": "Setting Code",
            "type": "string"
          },
          "settingName": {
            "description": "Setting Name",
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/Object"
          }
        },
        "type": "object"
      },
      "PagingOfSessionSummaryModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/SessionSummaryModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "SessionSummaryModel": {
        "description": "Session Summary Model",
        "properties": {
          "browser": {
            "description": "Browser",
            "type": "string"
          },
          "current": {
            "description": "Indicating the current session",
            "type": "boolean"
          },
          "ipAddress": {
            "description": "IP Address",
            "type": "string"
          },
          "loginDate": {
            "description": "Login Date",
            "type": "string",
            "format": "date-time"
          },
          "userSessionId": {
            "description": "User Session Id",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "UserChangePasswordArgs": {
        "description": "User change password options",
        "required": [
          "currentPassword",
          "newPassword"
        ],
        "properties": {
          "currentPassword": {
            "description": "Current user password",
            "type": "string"
          },
          "newPassword": {
            "description": "New user password",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserPasswordVerifyArgs": {
        "description": "UserPasswordVerifyArgs",
        "properties": {
          "password": {
            "description": "Password",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResetTwoFactorArgs": {
        "description": "ResetTwoFactorArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ResetTwoFactorRequestModel"
          }
        },
        "type": "object"
      },
      "ResetTwoFactorRequestModel": {
        "description": "Request a 2FA reset",
        "properties": {
          "twoFactorType": {
            "$ref": "#/components/schemas/TwoFactorResetType"
          }
        },
        "type": "object"
      },
      "TwoFactorResetType": {
        "description": "Available types of 2FA options that can be reset",
        "properties": {},
        "type": "string",
        "enum": [
          "Oath",
          "Fido"
        ]
      },
      "ResetTwoFactorResponseModel": {
        "description": "The result of the 2FA reset",
        "properties": {
          "success": {
            "description": "Did the 2FA reset succeed",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PasswordResetArgs": {
        "description": "PasswordResetArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PasswordResetRequestModel"
          }
        },
        "type": "object"
      },
      "PasswordResetRequestModel": {
        "description": "Reset a users password",
        "required": [
          "userId",
          "password"
        ],
        "properties": {
          "password": {
            "description": "The new password for this user",
            "type": "string"
          },
          "userId": {
            "description": "The user id to reset",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PasswordResetResultModel": {
        "description": "PasswordResetResultModel",
        "properties": {
          "success": {
            "description": "Success",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LockOutArgs": {
        "description": "LockOutArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LockOutRequestModel"
          }
        },
        "type": "object"
      },
      "LockOutRequestModel": {
        "description": "Request a lock out",
        "properties": {
          "description": {
            "description": "An optional description of the reason for the lock out",
            "type": "string"
          },
          "reasonType": {
            "$ref": "#/components/schemas/LockOutReasonType"
          }
        },
        "type": "object"
      },
      "LockOutReasonType": {
        "description": "Available types of reasons for lock out",
        "properties": {},
        "type": "string",
        "enum": [
          "SuspiciousActivity",
          "LoginAttemptsExceeded",
          "Other"
        ]
      },
      "LockOutResponseModel": {
        "description": "The result of the lock out",
        "properties": {
          "success": {
            "description": "Did the lock out succeed",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SessionTerminateArgs": {
        "description": "SessionTerminateArgs",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SessionTerminateModel"
          }
        },
        "type": "object"
      },
      "SessionTerminateModel": {
        "description": "The request of a session termination",
        "properties": {
          "userSessionIds": {
            "description": "Ids of the User Sessions to terminate",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SessionTerminateResponseModel": {
        "description": "The result of a session termination",
        "properties": {
          "success": {
            "description": "Did the session terminate succeed",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DoubleLockSetUserPasswordArgs": {
        "description": "DoubleLockSetUserPasswordArgs",
        "properties": {
          "password": {
            "description": "Password",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VersionSummary": {
        "description": "Version Summary",
        "properties": {
          "version": {
            "description": "Instance Version Number",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkflowInstanceDto": {
        "description": "WorkflowInstanceDto[]",
        "properties": {
          "configurationJson": {
            "description": "ConfigurationJson",
            "type": "string"
          },
          "currentState": {
            "description": "CurrentState",
            "type": "string"
          },
          "currentStateInfoJson": {
            "description": "CurrentStateInfoJson",
            "type": "string"
          },
          "currentStepId": {
            "description": "CurrentStepId",
            "type": "integer",
            "format": "int32"
          },
          "currentStepState": {
            "$ref": "#/components/schemas/AccessRequestState"
          },
          "endTime": {
            "description": "EndTime",
            "type": "string",
            "format": "date-time"
          },
          "entityWorkflowMapId": {
            "description": "EntityWorkflowMapId",
            "type": "integer",
            "format": "int32"
          },
          "expirationTime": {
            "description": "ExpirationTime",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "Id",
            "type": "integer",
            "format": "int32"
          },
          "pendingTransaction": {
            "description": "PendingTransaction",
            "type": "boolean"
          },
          "startTime": {
            "description": "StartTime",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "Status",
            "type": "string"
          },
          "workflowTemplateId": {
            "description": "WorkflowTemplateId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfWorkflowStepTemplateDetailModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepTemplateDetailModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "WorkflowStepTemplateDetailModel": {
        "description": "Query results",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/AccessRequestStepConfigurationModel"
          },
          "expirationMinutes": {
            "description": "ExpirationMinutes",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "order": {
            "description": "Order",
            "type": "integer",
            "format": "int32"
          },
          "workflowStepTemplateId": {
            "description": "WorkflowStepTemplateId",
            "type": "integer",
            "format": "int32"
          },
          "workflowTemplateId": {
            "description": "WorkflowTemplateId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AccessRequestStepConfigurationModel": {
        "description": "Configuration",
        "properties": {
          "approverGroups": {
            "description": "ApproverGroups",
            "items": {
              "$ref": "#/components/schemas/AccessReviewerModel"
            },
            "type": "array"
          },
          "approveStep": {
            "description": "ApproveStep",
            "type": "integer",
            "format": "int32"
          },
          "expireStep": {
            "description": "ExpireStep",
            "type": "integer",
            "format": "int32"
          },
          "numApprovalsRequired": {
            "description": "NumApprovalsRequired",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "AccessReviewerModel": {
        "description": "ApproverGroups",
        "properties": {
          "accessReviewerId": {
            "description": "AccessReviewerId",
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "groupId": {
            "description": "GroupId",
            "type": "integer",
            "format": "int32"
          },
          "isOwner": {
            "description": "IsOwner",
            "type": "boolean"
          },
          "isUser": {
            "description": "IsUser",
            "type": "boolean"
          },
          "workflowStepTemplateId": {
            "description": "WorkflowStepTemplateId",
            "type": "integer",
            "format": "int32"
          },
          "workflowTemplateId": {
            "description": "WorkflowTemplateId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "WorkflowStepTemplateCreateArgs": {
        "description": "WorkflowStepTemplateCreateArgs",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/AccessRequestStepConfigurationModel"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "order": {
            "description": "Order",
            "type": "integer",
            "format": "int32"
          },
          "workflowTemplateId": {
            "description": "WorkflowTemplateId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "WorkflowStepTemplateUpdateArgs": {
        "description": "WorkflowStepTemplateUpdateArgs",
        "properties": {
          "workflowStepTemplates": {
            "description": "WorkflowStepTemplates",
            "items": {
              "$ref": "#/components/schemas/WorkflowStepTemplateDetailModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WorkflowTemplateDetailModel": {
        "description": "WorkflowTemplateDetailModel",
        "properties": {
          "active": {
            "description": "Active",
            "type": "boolean"
          },
          "configurationJson": {
            "description": "ConfigurationJson",
            "type": "string"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "expirationMinutes": {
            "description": "ExpirationMinutes",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "reusable": {
            "description": "Reusable",
            "type": "boolean"
          },
          "typeName": {
            "description": "TypeName",
            "type": "string"
          },
          "workflowTemplateId": {
            "description": "WorkflowTemplateId",
            "type": "integer",
            "format": "int32"
          },
          "workflowType": {
            "$ref": "#/components/schemas/WorkflowType"
          }
        },
        "type": "object"
      },
      "WorkflowStepTemplateUpdateModel": {
        "description": "WorkflowStepTemplateUpdateModel",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/AccessRequestStepConfigurationModel"
          },
          "expirationMinutes": {
            "description": "ExpirationMinutes",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "order": {
            "description": "Order",
            "type": "integer",
            "format": "int32"
          },
          "workflowStepTemplateId": {
            "description": "WorkflowStepTemplateId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "PagingOfWorkflowTemplateDetailModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/WorkflowTemplateDetailModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "WorkflowTemplateCreateArgs": {
        "description": "WorkflowTemplateCreateArgs",
        "required": [
          "workflowType",
          "name"
        ],
        "properties": {
          "configurationJson": {
            "description": "ConfigurationJson",
            "type": "string"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "expirationMinutes": {
            "description": "ExpirationMinutes",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "workflowType": {
            "$ref": "#/components/schemas/WorkflowType"
          }
        },
        "type": "object"
      },
      "WorkflowTemplateUpdateModel": {
        "description": "WorkflowTemplateUpdateModel",
        "properties": {
          "active": {
            "$ref": "#/components/schemas/UpdateFieldValueOfBoolean"
          },
          "configurationJson": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "description": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          },
          "expirationMinutes": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalInt32"
          },
          "isCopy": {
            "$ref": "#/components/schemas/UpdateFieldValueOfOptionalBoolean"
          },
          "name": {
            "$ref": "#/components/schemas/UpdateFieldValueOfString"
          }
        },
        "type": "object"
      },
      "PagingOfWorkflowTemplateAuditModel": {
        "description": "Specify paging and sorting options for querying records and returning results",
        "properties": {
          "batchCount": {
            "description": "Number of result batches available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "description": "Index of current result page",
            "type": "integer",
            "format": "int32"
          },
          "hasNext": {
            "description": "Whether there are any results in additional pages",
            "type": "boolean"
          },
          "hasPrev": {
            "description": "Whether there are any results in previous pages",
            "type": "boolean"
          },
          "nextSkip": {
            "description": "Correct value of 'skip' for the next page of results",
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "description": "Number of result pages available with current query options",
            "type": "integer",
            "format": "int32"
          },
          "prevSkip": {
            "description": "Correct value of 'skip' for the previous page of results",
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "description": "Query results",
            "items": {
              "$ref": "#/components/schemas/WorkflowTemplateAuditModel"
            },
            "type": "array"
          },
          "severity": {
            "$ref": "#/components/schemas/Severity"
          },
          "skip": {
            "description": "Number of records to skip before taking results",
            "type": "integer",
            "format": "int32"
          },
          "sortBy": {
            "description": "List of sort properties",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          },
          "success": {
            "description": "Whether the query executed successfully",
            "type": "boolean"
          },
          "take": {
            "description": "Maximum number of records to include in results",
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "description": "Total number of results available",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "WorkflowTemplateAuditModel": {
        "description": "Query results",
        "properties": {
          "action": {
            "description": "Action",
            "type": "string"
          },
          "databaseName": {
            "description": "DatabaseName",
            "type": "string"
          },
          "dateRecorded": {
            "description": "DateRecorded",
            "type": "string",
            "format": "date-time"
          },
          "delegatedUserName": {
            "description": "DelegatedUserName",
            "type": "string"
          },
          "delegateUserId": {
            "description": "DelegateUserId",
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "description": "DisplayName",
            "type": "string"
          },
          "formattedDate": {
            "description": "FormattedDate",
            "type": "string"
          },
          "ipAddress": {
            "description": "IpAddress",
            "type": "string"
          },
          "machineName": {
            "description": "MachineName",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "userId": {
            "description": "UserId",
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "description": "UserName",
            "type": "string"
          },
          "workflowTemplateAuditId": {
            "description": "WorkflowTemplateAuditId",
            "type": "integer",
            "format": "int32"
          },
          "workflowTemplateId": {
            "description": "WorkflowTemplateId",
            "type": "integer",
            "format": "int32"
          }
        },
        "type": "object"
      },
      "IPagingOfSystemLogSummaryModel": {
        "description": "IPagingOfSystemLogSummaryModel",
        "properties": {
          "records": {
            "description": "Records",
            "items": {
              "$ref": "#/components/schemas/SystemLogSummaryModel"
            },
            "type": "array"
          },
          "sortBy": {
            "description": "SortBy",
            "items": {
              "$ref": "#/components/schemas/Sort"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SystemLogSummaryModel": {
        "description": "System Log Summary Model",
        "properties": {
          "correlationId": {
            "description": "Correlation ID",
            "type": "string"
          },
          "dateRecorded": {
            "description": "Date Log Message was Recorded",
            "type": "string",
            "format": "date-time"
          },
          "logLevel": {
            "description": "Log Level of Message",
            "type": "string"
          },
          "logMessage": {
            "description": "Message that was Logged",
            "type": "string"
          },
          "machineName": {
            "description": "Machine Name that was Logged on",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfStringArray": {
        "description": "Characters that split keys to be indexed",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfConfigurationSessionRecordingSiteArchiveUpdateModelArray": {
        "description": "A list of archive paths mapped to sites, used when ArchiveLocationBySite is true",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/ConfigurationSessionRecordingSiteArchiveUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfInt32Array": {
        "description": "FolderIds",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfEventPipelineFilterMapUpdateModelArray": {
        "description": "Filters",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/EventPipelineFilterMapUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSettingUpdateModelArray": {
        "description": "Settings",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SettingUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfEventPipelineTaskMapUpdateModelArray": {
        "description": "Tasks",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTaskMapUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfEventPipelineTriggerUpdateModelArray": {
        "description": "Triggers",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTriggerUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfEventPipelineFilterSettingValueMapViewModelArray": {
        "description": "Settings",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/EventPipelineFilterSettingValueMapViewModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfEventPipelineTaskSettingValueMapViewModelArray": {
        "description": "Settings",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/EventPipelineTaskSettingValueMapViewModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfEventPipelineUpdateModelArray": {
        "description": "Pipelines",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/EventPipelineUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfEventSubscriptionEntityActionModelArray": {
        "description": "A list of the entity actions that file the subscription",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/EventSubscriptionEntityActionModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfReportSubscriberArray": {
        "description": "EmailGroups",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/ReportSubscriber"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfReportPermissionUpdateModelArray": {
        "description": "Array of permissions to use for a given report",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/ReportPermissionUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfReportCategoryPermissionUpdateModelArray": {
        "description": "Array of permissions to use for a given report category",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/ReportCategoryPermissionUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfRecurringScheduleValueModelArray": {
        "description": "Passing any constraints will update all of them and remove any not specified.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/RecurringScheduleValueModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ILogicResultOfSecretDependencyGroupArray": {
        "description": "ILogicResultOfSecretDependencyGroup[]",
        "properties": {
          "model": {
            "description": "Model",
            "items": {
              "$ref": "#/components/schemas/SecretDependencyGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretPolicyItemOfUserGroupMapModelArray": {
        "description": "Array of UserGroupMaps depends on Require Approval For Access being set",
        "properties": {
          "parentPolicyItemId": {
            "description": "ParentPolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "policyItemId": {
            "description": "PolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/UserGroupMapModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretPolicyItemOfSshCommandMenuGroupMapModelArray": {
        "description": "Array of Ssh Command Menu Groups depends on Ssh Command Restriction Type being set",
        "properties": {
          "parentPolicyItemId": {
            "description": "ParentPolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "policyItemId": {
            "description": "PolicyItemId",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SshCommandMenuGroupMapModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretPolicyDataItemOfUserGroupMapDataModelArray": {
        "description": "Array of UserGroupMaps depends on Require Approval For Access being set",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfUserGroupMapDataModelArray"
          }
        },
        "type": "object"
      },
      "SecretPolicyDataItemOfUserGroupMapDataModelArray": {
        "description": "Value",
        "properties": {
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/UserGroupMapDataModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretPolicyDataItemOfSshCommandMenuGroupModelArray": {
        "description": "Array of Ssh Command Menu Groups depends on Ssh Command Restriction Type being set",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "$ref": "#/components/schemas/SecretPolicyDataItemOfSshCommandMenuGroupModelArray"
          }
        },
        "type": "object"
      },
      "SecretPolicyDataItemOfSshCommandMenuGroupModelArray": {
        "description": "Value",
        "properties": {
          "policyApplyType": {
            "$ref": "#/components/schemas/PolicyApplyType"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SshCommandMenuGroupModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfWorkflowTemplateArray": {
        "description": "ApprovalWorkflowOptions",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/WorkflowTemplate"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfSecretDetailUserViewModelArray": {
        "description": "Approvers",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SecretDetailUserViewModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueReadOnlyOfViewTemplateFieldDropDownOptionArray": {
        "description": "AvailableDoubleLocks",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/ViewTemplateFieldDropDownOption"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfSecretDetailApprovalTypeArray": {
        "description": "AvailableRequireApprovalTypes",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SecretDetailApprovalType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfConfigurationAdvancedModelArray": {
        "description": "Advanced Settings configuration",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/ConfigurationAdvancedModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ViewFieldValueOfLicenseModelArray": {
        "description": "Licenses (on-perm only)",
        "properties": {
          "additionalLinks": {
            "description": "AdditionalLinks",
            "items": {
              "$ref": "#/components/schemas/ViewFieldLink"
            },
            "type": "array"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "fieldInputType": {
            "description": "FieldInputType",
            "type": "string"
          },
          "hasHistory": {
            "description": "HasHistory",
            "type": "boolean"
          },
          "helpLink": {
            "description": "HelpLink",
            "type": "string"
          },
          "helpLinkText": {
            "description": "HelpLinkText",
            "type": "string"
          },
          "hidden": {
            "description": "Hidden",
            "type": "boolean"
          },
          "hideOnView": {
            "description": "HideOnView",
            "type": "boolean"
          },
          "isRequired": {
            "description": "IsRequired",
            "type": "boolean"
          },
          "label": {
            "description": "Label",
            "type": "string"
          },
          "maxLength": {
            "description": "MaxLength",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "placeholder": {
            "description": "Placeholder",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly",
            "type": "boolean"
          },
          "readOnlyReason": {
            "description": "ReadOnlyReason",
            "type": "string"
          },
          "sortOrder": {
            "description": "SortOrder",
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/LicenseModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfGuidArray": {
        "description": "SshCommandIds",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretTemplateExtendedMappingUpdateFieldModelArray": {
        "description": "Fields",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateExtendedMappingUpdateFieldModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretTemplateLauncherFieldValueModelArray": {
        "description": "Fields that can be mapped to this launcher",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateLauncherFieldValueModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretTemplatePasswordTypeFieldMappingUpdateModelArray": {
        "description": "Fields",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SecretTemplatePasswordTypeFieldMappingUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretTemplateFieldOptionRemoveModelArray": {
        "description": "Dropdown Options to remove",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateFieldOptionRemoveModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateFieldValueOfSecretTemplateFieldOptionUpdateModelArray": {
        "description": "Dropdown Options to update.",
        "properties": {
          "dirty": {
            "description": "Dirty",
            "type": "boolean"
          },
          "value": {
            "description": "Value",
            "items": {
              "$ref": "#/components/schemas/SecretTemplateFieldOptionUpdateModel"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  }
}